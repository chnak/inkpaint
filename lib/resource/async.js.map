{"version":3,"sources":["../../src/resource/async.js"],"names":["_noop","eachSeries","array","iterator","callback","deferNext","i","len","length","next","err","setTimeout","onlyOnce","fn","onceWrapper","Error","callFn","apply","arguments","queue","worker","concurrency","workers","q","_tasks","saturated","unsaturated","buffer","empty","drain","error","started","paused","push","data","_insert","kill","unshift","process","task","shift","_next","running","idle","pause","resume","w","insertAtFront","item"],"mappings":"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","sourcesContent":["function _noop() {}\n\nexport function eachSeries(array, iterator, callback, deferNext) {\n  let i = 0;\n  const len = array.length;\n\n  (function next(err) {\n    if (err || i === len) {\n      if (callback) {\n        callback(err);\n      }\n\n      return;\n    }\n\n    if (deferNext) {\n      setTimeout(() => {\n        iterator(array[i++], next);\n      }, 1);\n    } else {\n      iterator(array[i++], next);\n    }\n  })();\n}\n\nfunction onlyOnce(fn) {\n  return function onceWrapper() {\n    if (fn === null) {\n      throw new Error(\"Callback was already called.\");\n    }\n\n    const callFn = fn;\n\n    fn = null;\n    callFn.apply(this, arguments);\n  };\n}\n\nexport function queue(worker, concurrency) {\n  if (concurrency == null) {\n    concurrency = 1;\n  } else if (concurrency === 0) {\n    throw new Error(\"Concurrency must not be zero\");\n  }\n\n  let workers = 0;\n  const q = {\n    _tasks: [],\n    concurrency,\n    saturated: _noop,\n    unsaturated: _noop,\n    buffer: concurrency / 4,\n    empty: _noop,\n    drain: _noop,\n    error: _noop,\n    started: false,\n    paused: false,\n    push(data, callback) {\n      _insert(data, false, callback);\n    },\n    kill() {\n      workers = 0;\n      q.drain = _noop;\n      q.started = false;\n      q._tasks = [];\n    },\n    unshift(data, callback) {\n      _insert(data, true, callback);\n    },\n    process() {\n      while (!q.paused && workers < q.concurrency && q._tasks.length) {\n        const task = q._tasks.shift();\n\n        if (q._tasks.length === 0) {\n          q.empty();\n        }\n\n        workers += 1;\n\n        if (workers === q.concurrency) {\n          q.saturated();\n        }\n\n        worker(task.data, onlyOnce(_next(task)));\n      }\n    },\n    length() {\n      return q._tasks.length;\n    },\n    running() {\n      return workers;\n    },\n    idle() {\n      return q._tasks.length + workers === 0;\n    },\n    pause() {\n      if (q.paused === true) {\n        return;\n      }\n\n      q.paused = true;\n    },\n    resume() {\n      if (q.paused === false) {\n        return;\n      }\n\n      q.paused = false;\n      for (let w = 1; w <= q.concurrency; w++) {\n        q.process();\n      }\n    }\n  };\n\n  function _insert(data, insertAtFront, callback) {\n    if (callback != null && typeof callback !== \"function\") {\n      throw new Error(\"task callback must be a function\");\n    }\n\n    q.started = true;\n\n    if (data == null && q.idle()) {\n      setTimeout(() => q.drain(), 1);\n      return;\n    }\n\n    const item = {\n      data,\n      callback: typeof callback === \"function\" ? callback : _noop\n    };\n\n    if (insertAtFront) {\n      q._tasks.unshift(item);\n    } else {\n      q._tasks.push(item);\n    }\n\n    setTimeout(() => q.process(), 1);\n  }\n\n  function _next(task) {\n    return function next() {\n      workers -= 1;\n\n      task.callback.apply(task, arguments);\n\n      if (arguments[0] != null) {\n        q.error(arguments[0], task.data);\n      }\n\n      if (workers <= q.concurrency - q.buffer) {\n        q.unsaturated();\n      }\n\n      if (q.idle()) {\n        q.drain();\n      }\n\n      q.process();\n    };\n  }\n\n  return q;\n}\n"],"file":"async.js"}