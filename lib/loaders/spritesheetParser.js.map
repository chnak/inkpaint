{"version":3,"sources":["../../src/loaders/spritesheetParser.js"],"names":["spritesheetParser","resource","next","imageResourceName","name","data","type","Resource","TYPE","JSON","frames","resources","loadOptions","crossOrigin","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","onImageLoad","res","error","spritesheet","Spritesheet","texture","baseTexture","url","parse","textures","isDataUrl","meta","image","resolve","replace"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AAEe,oBAAW;AACxB,SAAO,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EAA2C;AAChD,QAAMC,iBAAiB,GAAMF,QAAQ,CAACG,IAAf,WAAvB;;AAEA,QACE,CAACH,QAAQ,CAACI,IAAV,IACAJ,QAAQ,CAACK,IAAT,KAAkBC,mBAASC,IAAT,CAAcC,IADhC,IAEA,CAACR,QAAQ,CAACI,IAAT,CAAcK,MAFf,IAGA,KAAKC,SAAL,CAAeR,iBAAf,CAJF,EAKE;AACAD,MAAAA,IAAI;AACJ;AACD;;AAED,QAAMU,WAAW,GAAG;AAClBC,MAAAA,WAAW,EAAEZ,QAAQ,CAACY,WADJ;AAElBC,MAAAA,QAAQ,EAAEb,QAAQ,CAACa,QAAT,CAAkBC,aAFV;AAGlBC,MAAAA,cAAc,EAAEf;AAHE,KAApB;AAMA,QAAMgB,YAAY,GAAGC,eAAe,CAACjB,QAAD,EAAW,KAAKkB,OAAhB,CAApC,CAnBgD,CAqBhD;;AACA,SAAKC,GAAL,CAASjB,iBAAT,EAA4Bc,YAA5B,EAA0CL,WAA1C,EAAuD,SAASS,WAAT,CACrDC,GADqD,EAErD;AACA,UAAIA,GAAG,CAACC,KAAR,EAAe;AACbrB,QAAAA,IAAI,CAACoB,GAAG,CAACC,KAAL,CAAJ;AACA;AACD;;AAED,UAAMC,WAAW,GAAG,IAAIC,oBAAJ,CAClBH,GAAG,CAACI,OAAJ,CAAYC,WADM,EAElB1B,QAAQ,CAACI,IAFS,EAGlBJ,QAAQ,CAAC2B,GAHS,CAApB;AAKAJ,MAAAA,WAAW,CAACK,KAAZ,CAAkB,MAAM;AACtB5B,QAAAA,QAAQ,CAACuB,WAAT,GAAuBA,WAAvB;AACAvB,QAAAA,QAAQ,CAAC6B,QAAT,GAAoBN,WAAW,CAACM,QAAhC;AACA5B,QAAAA,IAAI;AACL,OAJD;AAKD,KAlBD;AAmBD,GAzCD;AA0CD;;AAEM,SAASgB,eAAT,CAAyBjB,QAAzB,EAAmCkB,OAAnC,EAA4C;AACjD;AACA,MAAIlB,QAAQ,CAAC8B,SAAb,EAAwB;AACtB,WAAO9B,QAAQ,CAACI,IAAT,CAAc2B,IAAd,CAAmBC,KAA1B;AACD;;AAED,SAAOL,aAAIM,OAAJ,CACLjC,QAAQ,CAAC2B,GAAT,CAAaO,OAAb,CAAqBhB,OAArB,EAA8B,EAA9B,CADK,EAELlB,QAAQ,CAACI,IAAT,CAAc2B,IAAd,CAAmBC,KAFd,CAAP;AAID","sourcesContent":["import url from \"url\";\nimport { Resource } from \"../resource\";\nimport Spritesheet from \"../textures/Spritesheet\";\n\nexport default function() {\n  return function spritesheetParser(resource, next) {\n    const imageResourceName = `${resource.name}_image`;\n\n    if (\n      !resource.data ||\n      resource.type !== Resource.TYPE.JSON ||\n      !resource.data.frames ||\n      this.resources[imageResourceName]\n    ) {\n      next();\n      return;\n    }\n\n    const loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n\n    const resourcePath = getResourcePath(resource, this.baseUrl);\n\n    // load the image for this sheet\n    this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(\n      res\n    ) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n\n      const spritesheet = new Spritesheet(\n        res.texture.baseTexture,\n        resource.data,\n        resource.url\n      );\n      spritesheet.parse(() => {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n}\n\nexport function getResourcePath(resource, baseUrl) {\n  // Prepend url path unless the resource image is a data url\n  if (resource.isDataUrl) {\n    return resource.data.meta.image;\n  }\n\n  return url.resolve(\n    resource.url.replace(baseUrl, \"\"),\n    resource.data.meta.image\n  );\n}\n"],"file":"spritesheetParser.js"}