{"version":3,"sources":["../../../src/renderers/webgl/TextureManager.js"],"names":["TextureManager","constructor","renderer","gl","_managedTextures","bindTexture","getTexture","updateTexture","texture","location","isRenderTexture","_glRenderTargets","hasLoaded","boundTextures","undefined","i","length","activeTexture","TEXTURE0","glTexture","_glTextures","CONTEXT_UID","renderTarget","RenderTarget","width","height","scaleMode","resolution","resize","_activeRenderTarget","root","frameBuffer","bind","GLTexture","premultiplyAlpha","upload","source","on","destroyTexture","push","isPowerOfTwo","mipmap","enableMipmap","wrapMode","WRAP_MODES","CLAMP","enableWrapClamp","REPEAT","enableWrapRepeat","enableWrapMirrorRepeat","SCALE_MODES","NEAREST","enableNearestScaling","enableLinearScaling","skipRemove","baseTexture","uid","glTextures","glRenderTargets","unbindTexture","destroy","off","indexOf","bindRenderTarget","rootRenderTarget","removeAll"],"mappings":"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","sourcesContent":["import { GLTexture } from \"pixi-gl-core\";\nimport { WRAP_MODES, SCALE_MODES } from \"../../const\";\nimport RenderTarget from \"./utils/RenderTarget\";\nimport { removeItems } from \"../../utils\";\n\nexport default class TextureManager {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.gl = renderer.gl;\n    this._managedTextures = [];\n  }\n\n  bindTexture() {\n    // empty\n  }\n\n  getTexture() {\n    // empty\n  }\n\n  updateTexture(texture, location) {\n    const gl = this.gl;\n    const isRenderTexture = !!texture._glRenderTargets;\n\n    if (!texture.hasLoaded) {\n      return null;\n    }\n\n    const boundTextures = this.renderer.boundTextures;\n    if (location === undefined) {\n      location = 0;\n      for (let i = 0; i < boundTextures.length; ++i) {\n        if (boundTextures[i] === texture) {\n          location = i;\n          break;\n        }\n      }\n    }\n\n    boundTextures[location] = texture;\n    gl.activeTexture(gl.TEXTURE0 + location);\n    let glTexture = texture._glTextures[this.renderer.CONTEXT_UID];\n\n    if (!glTexture) {\n      if (isRenderTexture) {\n        const renderTarget = new RenderTarget(\n          this.gl,\n          texture.width,\n          texture.height,\n          texture.scaleMode,\n          texture.resolution\n        );\n\n        renderTarget.resize(texture.width, texture.height);\n        texture._glRenderTargets[this.renderer.CONTEXT_UID] = renderTarget;\n        glTexture = renderTarget.texture;\n\n        // framebuffer constructor disactivates current framebuffer\n        if (!this.renderer._activeRenderTarget.root) {\n          this.renderer._activeRenderTarget.frameBuffer.bind();\n        }\n      } else {\n        glTexture = new GLTexture(this.gl, null, null, null, null);\n        glTexture.bind(location);\n        glTexture.premultiplyAlpha = true;\n        glTexture.upload(texture.source);\n      }\n\n      texture._glTextures[this.renderer.CONTEXT_UID] = glTexture;\n      texture.on(\"update\", this.updateTexture, this);\n      texture.on(\"dispose\", this.destroyTexture, this);\n      this._managedTextures.push(texture);\n\n      if (texture.isPowerOfTwo) {\n        if (texture.mipmap) {\n          glTexture.enableMipmap();\n        }\n\n        if (texture.wrapMode === WRAP_MODES.CLAMP) {\n          glTexture.enableWrapClamp();\n        } else if (texture.wrapMode === WRAP_MODES.REPEAT) {\n          glTexture.enableWrapRepeat();\n        } else {\n          glTexture.enableWrapMirrorRepeat();\n        }\n      } else {\n        glTexture.enableWrapClamp();\n      }\n\n      if (texture.scaleMode === SCALE_MODES.NEAREST) {\n        glTexture.enableNearestScaling();\n      } else {\n        glTexture.enableLinearScaling();\n      }\n    }\n    // the texture already exists so we only need to update it..\n    else if (isRenderTexture) {\n      texture._glRenderTargets[this.renderer.CONTEXT_UID].resize(\n        texture.width,\n        texture.height\n      );\n    } else {\n      glTexture.upload(texture.source);\n    }\n\n    return glTexture;\n  }\n\n  destroyTexture(texture, skipRemove) {\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded) {\n      return;\n    }\n\n    const renderer = this.renderer;\n    const uid = renderer.CONTEXT_UID;\n    const glTextures = texture._glTextures;\n    const glRenderTargets = texture._glRenderTargets;\n\n    if (glTextures[uid]) {\n      renderer.unbindTexture(texture);\n\n      glTextures[uid].destroy();\n      texture.off(\"update\", this.updateTexture, this);\n      texture.off(\"dispose\", this.destroyTexture, this);\n\n      delete glTextures[uid];\n\n      if (!skipRemove) {\n        const i = this._managedTextures.indexOf(texture);\n\n        if (i !== -1) {\n          removeItems(this._managedTextures, i, 1);\n        }\n      }\n    }\n\n    if (glRenderTargets && glRenderTargets[uid]) {\n      if (renderer._activeRenderTarget === glRenderTargets[uid]) {\n        renderer.bindRenderTarget(renderer.rootRenderTarget);\n      }\n\n      glRenderTargets[uid].destroy();\n      delete glRenderTargets[uid];\n    }\n  }\n\n  /**\n   * Deletes all the textures from WebGL\n   */\n  removeAll() {\n    // empty all the old gl textures as they are useless now\n    for (let i = 0; i < this._managedTextures.length; ++i) {\n      const texture = this._managedTextures[i];\n\n      if (texture._glTextures[this.renderer.CONTEXT_UID]) {\n        delete texture._glTextures[this.renderer.CONTEXT_UID];\n      }\n    }\n  }\n\n  /**\n   * Destroys this manager and removes all its textures\n   */\n  destroy() {\n    // destroy managed textures\n    for (let i = 0; i < this._managedTextures.length; ++i) {\n      const texture = this._managedTextures[i];\n\n      this.destroyTexture(texture, true);\n\n      texture.off(\"update\", this.updateTexture, this);\n      texture.off(\"dispose\", this.destroyTexture, this);\n    }\n\n    this._managedTextures = null;\n  }\n}\n"],"file":"TextureManager.js"}