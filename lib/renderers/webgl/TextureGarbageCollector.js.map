{"version":3,"sources":["../../../src/renderers/webgl/TextureGarbageCollector.js"],"names":["TextureGarbageCollector","constructor","renderer","count","checkCount","maxIdle","settings","GC_MAX_IDLE","checkCountMax","GC_MAX_CHECK_COUNT","mode","GC_MODE","update","GC_MODES","MANUAL","run","tm","textureManager","managedTextures","_managedTextures","wasRemoved","i","length","texture","_glRenderTargets","touched","destroyTexture","j","unload","displayObject","_texture","children"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,uBAAN,CAA8B;AAC3CC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,OAAL,GAAeC,kBAASC,WAAxB;AACA,SAAKC,aAAL,GAAqBF,kBAASG,kBAA9B;AACA,SAAKC,IAAL,GAAYJ,kBAASK,OAArB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKT,KAAL;;AAEA,QAAI,KAAKO,IAAL,KAAcG,gBAASC,MAA3B,EAAmC;AACjC;AACD;;AAED,SAAKV,UAAL;;AAEA,QAAI,KAAKA,UAAL,GAAkB,KAAKI,aAA3B,EAA0C;AACxC,WAAKJ,UAAL,GAAkB,CAAlB;AAEA,WAAKW,GAAL;AACD;AACF;;AAEDA,EAAAA,GAAG,GAAG;AACJ,QAAMC,EAAE,GAAG,KAAKd,QAAL,CAAce,cAAzB;AACA,QAAMC,eAAe,GAAGF,EAAE,CAACG,gBAA3B;AACA,QAAIC,UAAU,GAAG,KAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,eAAe,CAACI,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAME,OAAO,GAAGL,eAAe,CAACG,CAAD,CAA/B,CAD+C,CAG/C;;AACA,UACE,CAACE,OAAO,CAACC,gBAAT,IACA,KAAKrB,KAAL,GAAaoB,OAAO,CAACE,OAArB,GAA+B,KAAKpB,OAFtC,EAGE;AACAW,QAAAA,EAAE,CAACU,cAAH,CAAkBH,OAAlB,EAA2B,IAA3B;AACAL,QAAAA,eAAe,CAACG,CAAD,CAAf,GAAqB,IAArB;AACAD,QAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AAED,QAAIA,UAAJ,EAAgB;AACd,UAAIO,CAAC,GAAG,CAAR;;AAEA,WAAK,IAAIN,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,eAAe,CAACI,MAApC,EAA4CD,EAAC,EAA7C,EAAiD;AAC/C,YAAIH,eAAe,CAACG,EAAD,CAAf,KAAuB,IAA3B,EAAiC;AAC/BH,UAAAA,eAAe,CAACS,CAAC,EAAF,CAAf,GAAuBT,eAAe,CAACG,EAAD,CAAtC;AACD;AACF;;AAEDH,MAAAA,eAAe,CAACI,MAAhB,GAAyBK,CAAzB;AACD;AACF;;AAEDC,EAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB,QAAMb,EAAE,GAAG,KAAKd,QAAL,CAAce,cAAzB,CADoB,CAGpB;;AACA,QAAIY,aAAa,CAACC,QAAd,IAA0BD,aAAa,CAACC,QAAd,CAAuBN,gBAArD,EAAuE;AACrER,MAAAA,EAAE,CAACU,cAAH,CAAkBG,aAAa,CAACC,QAAhC,EAA0C,IAA1C;AACD;;AAED,SAAK,IAAIT,CAAC,GAAGQ,aAAa,CAACE,QAAd,CAAuBT,MAAvB,GAAgC,CAA7C,EAAgDD,CAAC,IAAI,CAArD,EAAwDA,CAAC,EAAzD,EAA6D;AAC3D,WAAKO,MAAL,CAAYC,aAAa,CAACE,QAAd,CAAuBV,CAAvB,CAAZ;AACD;AACF;;AAtE0C","sourcesContent":["import { GC_MODES } from \"../../const\";\nimport settings from \"../../settings\";\n\nexport default class TextureGarbageCollector {\n  constructor(renderer) {\n    this.renderer = renderer;\n\n    this.count = 0;\n    this.checkCount = 0;\n    this.maxIdle = settings.GC_MAX_IDLE;\n    this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n    this.mode = settings.GC_MODE;\n  }\n\n  update() {\n    this.count++;\n\n    if (this.mode === GC_MODES.MANUAL) {\n      return;\n    }\n\n    this.checkCount++;\n\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n\n      this.run();\n    }\n  }\n\n  run() {\n    const tm = this.renderer.textureManager;\n    const managedTextures = tm._managedTextures;\n    let wasRemoved = false;\n\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n\n      // only supports non generated textures at the moment!\n      if (\n        !texture._glRenderTargets &&\n        this.count - texture.touched > this.maxIdle\n      ) {\n        tm.destroyTexture(texture, true);\n        managedTextures[i] = null;\n        wasRemoved = true;\n      }\n    }\n\n    if (wasRemoved) {\n      let j = 0;\n\n      for (let i = 0; i < managedTextures.length; i++) {\n        if (managedTextures[i] !== null) {\n          managedTextures[j++] = managedTextures[i];\n        }\n      }\n\n      managedTextures.length = j;\n    }\n  }\n\n  unload(displayObject) {\n    const tm = this.renderer.textureManager;\n\n    // only destroy non generated textures\n    if (displayObject._texture && displayObject._texture._glRenderTargets) {\n      tm.destroyTexture(displayObject._texture, true);\n    }\n\n    for (let i = displayObject.children.length - 1; i >= 0; i--) {\n      this.unload(displayObject.children[i]);\n    }\n  }\n}\n"],"file":"TextureGarbageCollector.js"}