{"version":3,"sources":["../../../../src/renderers/webgl/filters/filterTransforms.js"],"names":["calculateScreenSpaceMatrix","outputMatrix","filterArea","textureSize","mappedMatrix","identity","translate","x","width","y","height","scale","calculateNormalizedScreenSpaceMatrix","translateScaleX","translateScaleY","calculateSpriteMatrix","sprite","orig","_texture","set","worldTransform","copy","Matrix","TEMP_MATRIX","invert","prepend","anchor"],"mappings":";;;;;;;;;AAAA;;AAEO,SAASA,0BAAT,CACLC,YADK,EAELC,UAFK,EAGLC,WAHK,EAIL;AACA,MAAMC,YAAY,GAAGH,YAAY,CAACI,QAAb,EAArB;AACAD,EAAAA,YAAY,CAACE,SAAb,CACEJ,UAAU,CAACK,CAAX,GAAeJ,WAAW,CAACK,KAD7B,EAEEN,UAAU,CAACO,CAAX,GAAeN,WAAW,CAACO,MAF7B;AAIAN,EAAAA,YAAY,CAACO,KAAb,CAAmBR,WAAW,CAACK,KAA/B,EAAsCL,WAAW,CAACO,MAAlD;AAEA,SAAON,YAAP;AACD;;AAEM,SAASQ,oCAAT,CACLX,YADK,EAELC,UAFK,EAGLC,WAHK,EAIL;AACA,MAAMC,YAAY,GAAGH,YAAY,CAACI,QAAb,EAArB;AACAD,EAAAA,YAAY,CAACE,SAAb,CACEJ,UAAU,CAACK,CAAX,GAAeJ,WAAW,CAACK,KAD7B,EAEEN,UAAU,CAACO,CAAX,GAAeN,WAAW,CAACO,MAF7B;AAKA,MAAMG,eAAe,GAAGV,WAAW,CAACK,KAAZ,GAAoBN,UAAU,CAACM,KAAvD;AACA,MAAMM,eAAe,GAAGX,WAAW,CAACO,MAAZ,GAAqBR,UAAU,CAACQ,MAAxD;AACAN,EAAAA,YAAY,CAACO,KAAb,CAAmBE,eAAnB,EAAoCC,eAApC;AAEA,SAAOV,YAAP;AACD;;AAEM,SAASW,qBAAT,CACLd,YADK,EAELC,UAFK,EAGLC,WAHK,EAILa,MAJK,EAKL;AACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,QAAP,CAAgBD,IAA7B;AACA,MAAMb,YAAY,GAAGH,YAAY,CAACkB,GAAb,CACnBhB,WAAW,CAACK,KADO,EAEnB,CAFmB,EAGnB,CAHmB,EAInBL,WAAW,CAACO,MAJO,EAKnBR,UAAU,CAACK,CALQ,EAMnBL,UAAU,CAACO,CANQ,CAArB;AAQA,MAAMW,cAAc,GAAGJ,MAAM,CAACI,cAAP,CAAsBC,IAAtB,CAA2BC,aAAOC,WAAlC,CAAvB;AAEAH,EAAAA,cAAc,CAACI,MAAf;AACApB,EAAAA,YAAY,CAACqB,OAAb,CAAqBL,cAArB;AACAhB,EAAAA,YAAY,CAACO,KAAb,CAAmB,MAAMM,IAAI,CAACT,KAA9B,EAAqC,MAAMS,IAAI,CAACP,MAAhD;AACAN,EAAAA,YAAY,CAACE,SAAb,CAAuBU,MAAM,CAACU,MAAP,CAAcnB,CAArC,EAAwCS,MAAM,CAACU,MAAP,CAAcjB,CAAtD;AAEA,SAAOL,YAAP;AACD","sourcesContent":["import { Matrix } from \"../../../math\";\n\nexport function calculateScreenSpaceMatrix(\n  outputMatrix,\n  filterArea,\n  textureSize\n) {\n  const mappedMatrix = outputMatrix.identity();\n  mappedMatrix.translate(\n    filterArea.x / textureSize.width,\n    filterArea.y / textureSize.height\n  );\n  mappedMatrix.scale(textureSize.width, textureSize.height);\n\n  return mappedMatrix;\n}\n\nexport function calculateNormalizedScreenSpaceMatrix(\n  outputMatrix,\n  filterArea,\n  textureSize\n) {\n  const mappedMatrix = outputMatrix.identity();\n  mappedMatrix.translate(\n    filterArea.x / textureSize.width,\n    filterArea.y / textureSize.height\n  );\n\n  const translateScaleX = textureSize.width / filterArea.width;\n  const translateScaleY = textureSize.height / filterArea.height;\n  mappedMatrix.scale(translateScaleX, translateScaleY);\n\n  return mappedMatrix;\n}\n\nexport function calculateSpriteMatrix(\n  outputMatrix,\n  filterArea,\n  textureSize,\n  sprite\n) {\n  const orig = sprite._texture.orig;\n  const mappedMatrix = outputMatrix.set(\n    textureSize.width,\n    0,\n    0,\n    textureSize.height,\n    filterArea.x,\n    filterArea.y\n  );\n  const worldTransform = sprite.worldTransform.copy(Matrix.TEMP_MATRIX);\n\n  worldTransform.invert();\n  mappedMatrix.prepend(worldTransform);\n  mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);\n  mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n  return mappedMatrix;\n}\n"],"file":"filterTransforms.js"}