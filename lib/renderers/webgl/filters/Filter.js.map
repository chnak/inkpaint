{"version":3,"sources":["../../../../src/renderers/webgl/filters/Filter.js"],"names":["SOURCE_KEY_MAP","Filter","constructor","vertexSrc","fragmentSrc","uniformData","defaultVertexSrc","defaultFragmentSrc","_blendMode","BLEND_MODES","NORMAL","uniforms","i","value","type","toLowerCase","glShaders","glShaderKey","padding","resolution","settings","FILTER_RESOLUTION","enabled","autoFit","apply","filterManager","input","output","clear","currentState","applyFilter","blendMode","join"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,cAAc,GAAG,EAAvB;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,WAAzB,EAAsC;AAC/C,SAAKF,SAAL,GAAiBA,SAAS,IAAIF,MAAM,CAACK,gBAArC;AACA,SAAKF,WAAL,GAAmBA,WAAW,IAAIH,MAAM,CAACM,kBAAzC;AACA,SAAKC,UAAL,GAAkBC,mBAAYC,MAA9B;AACA,SAAKL,WAAL,GACEA,WAAW,IACX,qCACE,KAAKF,SADP,EAEE,KAAKC,WAFP,EAGE,2BAHF,CAFF;AAQA,SAAKO,QAAL,GAAgB,EAAhB;;AAEA,SAAK,IAAMC,CAAX,IAAgB,KAAKP,WAArB,EAAkC;AAChC,WAAKM,QAAL,CAAcC,CAAd,IAAmB,KAAKP,WAAL,CAAiBO,CAAjB,EAAoBC,KAAvC;;AACA,UAAI,KAAKR,WAAL,CAAiBO,CAAjB,EAAoBE,IAAxB,EAA8B;AAC5B,aAAKT,WAAL,CAAiBO,CAAjB,EAAoBE,IAApB,GAA2B,KAAKT,WAAL,CAAiBO,CAAjB,EAAoBE,IAApB,CAAyBC,WAAzB,EAA3B;AACD;AACF;;AAED,SAAKC,SAAL,GAAiB,EAAjB;;AACA,QAAI,CAAChB,cAAc,CAAC,KAAKG,SAAL,GAAiB,KAAKC,WAAvB,CAAnB,EAAwD;AACtDJ,MAAAA,cAAc,CAAC,KAAKG,SAAL,GAAiB,KAAKC,WAAvB,CAAd,GAAoD,iBAApD;AACD;;AAED,SAAKa,WAAL,GAAmBjB,cAAc,CAAC,KAAKG,SAAL,GAAiB,KAAKC,WAAvB,CAAjC;AACA,SAAKc,OAAL,GAAe,CAAf;AACA,SAAKC,UAAL,GAAkBC,kBAASC,iBAA3B;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;AAEDC,EAAAA,KAAK,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,YAAtC,EAAoD;AACvDJ,IAAAA,aAAa,CAACK,WAAd,CAA0B,IAA1B,EAAgCJ,KAAhC,EAAuCC,MAAvC,EAA+CC,KAA/C;AACD;;AAEY,MAATG,SAAS,GAAG;AACd,WAAO,KAAKvB,UAAZ;AACD;;AAEY,MAATuB,SAAS,CAAClB,KAAD,EAAQ;AACnB,SAAKL,UAAL,GAAkBK,KAAlB;AACD;;AAE0B,aAAhBP,gBAAgB,GAAG;AAC5B,WAAO,CACL,iCADK,EAEL,+BAFK,EAIL,gCAJK,EAKL,4BALK,EAOL,6BAPK,EAQL,4BARK,EAUL,kBAVK,EAWL,sFAXK,EAYL,qEAZK,EAaL,oCAbK,EAcL,GAdK,EAeL0B,IAfK,CAeA,IAfA,CAAP;AAgBD;;AAE4B,aAAlBzB,kBAAkB,GAAG;AAC9B,WAAO,CACL,6BADK,EAEL,4BAFK,EAIL,6BAJK,EAKL,kCALK,EAOL,kBAPK,EAQL,yDARK,EASL,sDATK,EAUL,gBAVK,EAWL,uCAXK,EAYL,MAZK,EAaL,wCAbK,EAcL,MAdK,EAeL,SAfK,EAgBL,MAhBK,EAiBL,wCAjBK,EAkBL,MAlBK,EAmBL;AACA,gDApBK,EAqBL,8BArBK,EAsBL,GAtBK,EAuBLyB,IAvBK,CAuBA,IAvBA,CAAP;AAwBD;;AA1FyB","sourcesContent":["import extractUniformsFromSrc from \"./extractUniformsFromSrc\";\nimport { uid } from \"../../../utils\";\nimport { BLEND_MODES } from \"../../../const\";\nimport settings from \"../../../settings\";\n\nconst SOURCE_KEY_MAP = {};\n\nexport default class Filter {\n  constructor(vertexSrc, fragmentSrc, uniformData) {\n    this.vertexSrc = vertexSrc || Filter.defaultVertexSrc;\n    this.fragmentSrc = fragmentSrc || Filter.defaultFragmentSrc;\n    this._blendMode = BLEND_MODES.NORMAL;\n    this.uniformData =\n      uniformData ||\n      extractUniformsFromSrc(\n        this.vertexSrc,\n        this.fragmentSrc,\n        \"projectionMatrix|uSampler\"\n      );\n\n    this.uniforms = {};\n\n    for (const i in this.uniformData) {\n      this.uniforms[i] = this.uniformData[i].value;\n      if (this.uniformData[i].type) {\n        this.uniformData[i].type = this.uniformData[i].type.toLowerCase();\n      }\n    }\n\n    this.glShaders = {};\n    if (!SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc]) {\n      SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc] = uid();\n    }\n\n    this.glShaderKey = SOURCE_KEY_MAP[this.vertexSrc + this.fragmentSrc];\n    this.padding = 4;\n    this.resolution = settings.FILTER_RESOLUTION;\n    this.enabled = true;\n    this.autoFit = true;\n  }\n\n  apply(filterManager, input, output, clear, currentState) {\n    filterManager.applyFilter(this, input, output, clear);\n  }\n\n  get blendMode() {\n    return this._blendMode;\n  }\n\n  set blendMode(value) {\n    this._blendMode = value;\n  }\n\n  static get defaultVertexSrc() {\n    return [\n      \"attribute vec2 aVertexPosition;\",\n      \"attribute vec2 aTextureCoord;\",\n\n      \"uniform mat3 projectionMatrix;\",\n      \"uniform mat3 filterMatrix;\",\n\n      \"varying vec2 vTextureCoord;\",\n      \"varying vec2 vFilterCoord;\",\n\n      \"void main(void){\",\n      \"   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\",\n      \"   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\",\n      \"   vTextureCoord = aTextureCoord ;\",\n      \"}\"\n    ].join(\"\\n\");\n  }\n\n  static get defaultFragmentSrc() {\n    return [\n      \"varying vec2 vTextureCoord;\",\n      \"varying vec2 vFilterCoord;\",\n\n      \"uniform sampler2D uSampler;\",\n      \"uniform sampler2D filterSampler;\",\n\n      \"void main(void){\",\n      \"   vec4 masky = texture2D(filterSampler, vFilterCoord);\",\n      \"   vec4 sample = texture2D(uSampler, vTextureCoord);\",\n      \"   vec4 color;\",\n      \"   if(mod(vFilterCoord.x, 1.0) > 0.5)\",\n      \"   {\",\n      \"     color = vec4(1.0, 0.0, 0.0, 1.0);\",\n      \"   }\",\n      \"   else\",\n      \"   {\",\n      \"     color = vec4(0.0, 1.0, 0.0, 1.0);\",\n      \"   }\",\n      // '   gl_FragColor = vec4(mod(vFilterCoord.x, 1.5), vFilterCoord.y,0.0,1.0);',\n      \"   gl_FragColor = mix(sample, masky, 0.5);\",\n      \"   gl_FragColor *= sample.a;\",\n      \"}\"\n    ].join(\"\\n\");\n  }\n}\n"],"file":"Filter.js"}