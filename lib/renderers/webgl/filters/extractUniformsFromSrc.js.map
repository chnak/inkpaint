{"version":3,"sources":["../../../../src/renderers/webgl/filters/extractUniformsFromSrc.js"],"names":["defaultValue","glCore","shader","extractUniformsFromSrc","vertexSrc","fragmentSrc","mask","vertUniforms","extractUniformsFromString","fragUniforms","Object","assign","string","maskRegex","RegExp","uniforms","nameSplit","lines","replace","split","i","length","line","trim","indexOf","splitLine","type","name","size","Number","match","value"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,YAAY,GAAGC,oBAAOC,MAAP,CAAcF,YAAnC;;AAEe,SAASG,sBAAT,CAAgCC,SAAhC,EAA2CC,WAA3C,EAAwDC,IAAxD,EACf;AACI,MAAMC,YAAY,GAAGC,yBAAyB,CAACJ,SAAD,EAAYE,IAAZ,CAA9C;AACA,MAAMG,YAAY,GAAGD,yBAAyB,CAACH,WAAD,EAAcC,IAAd,CAA9C;AAEA,SAAOI,MAAM,CAACC,MAAP,CAAcJ,YAAd,EAA4BE,YAA5B,CAAP;AACH;;AAED,SAASD,yBAAT,CAAmCI,MAAnC,EACA;AACI,MAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAW,sDAAX,CAAlB;AAEA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,SAAJ,CAJJ,CAMI;AACA;;AACA,MAAMC,KAAK,GAAGL,MAAM,CAACM,OAAP,CAAe,MAAf,EAAuB,GAAvB,EACDC,KADC,CACK,SADL,CAAd,CARJ,CAWI;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI,QAAME,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAL,CAASG,IAAT,EAAb;;AAEA,QAAID,IAAI,CAACE,OAAL,CAAa,SAAb,IAA0B,CAAC,CAA/B,EACA;AACI,UAAMC,SAAS,GAAGH,IAAI,CAACH,KAAL,CAAW,GAAX,CAAlB;AACA,UAAMO,IAAI,GAAGD,SAAS,CAAC,CAAD,CAAtB;AAEA,UAAIE,IAAI,GAAGF,SAAS,CAAC,CAAD,CAApB;AACA,UAAIG,IAAI,GAAG,CAAX;;AAEA,UAAID,IAAI,CAACH,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EACA;AACI;AACAR,QAAAA,SAAS,GAAGW,IAAI,CAACR,KAAL,CAAW,MAAX,CAAZ;AACAQ,QAAAA,IAAI,GAAGX,SAAS,CAAC,CAAD,CAAhB;AACAY,QAAAA,IAAI,IAAIC,MAAM,CAACb,SAAS,CAAC,CAAD,CAAV,CAAd;AACH;;AAED,UAAI,CAACW,IAAI,CAACG,KAAL,CAAWjB,SAAX,CAAL,EACA;AACIE,QAAAA,QAAQ,CAACY,IAAD,CAAR,GAAiB;AACbI,UAAAA,KAAK,EAAE/B,YAAY,CAAC0B,IAAD,EAAOE,IAAP,CADN;AAEbD,UAAAA,IAFa;AAGbD,UAAAA;AAHa,SAAjB;AAKH;AACJ;AACJ;;AAED,SAAOX,QAAP;AACH","sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst defaultValue = glCore.shader.defaultValue;\n\nexport default function extractUniformsFromSrc(vertexSrc, fragmentSrc, mask)\n{\n    const vertUniforms = extractUniformsFromString(vertexSrc, mask);\n    const fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n\n    return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string)\n{\n    const maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n\n    const uniforms = {};\n    let nameSplit;\n\n    // clean the lines a little - remove extra spaces / tabs etc\n    // then split along ';'\n    const lines = string.replace(/\\s+/g, ' ')\n                .split(/\\s*;\\s*/);\n\n    // loop through..\n    for (let i = 0; i < lines.length; i++)\n    {\n        const line = lines[i].trim();\n\n        if (line.indexOf('uniform') > -1)\n        {\n            const splitLine = line.split(' ');\n            const type = splitLine[1];\n\n            let name = splitLine[2];\n            let size = 1;\n\n            if (name.indexOf('[') > -1)\n            {\n                // array!\n                nameSplit = name.split(/\\[|]/);\n                name = nameSplit[0];\n                size *= Number(nameSplit[1]);\n            }\n\n            if (!name.match(maskRegex))\n            {\n                uniforms[name] = {\n                    value: defaultValue(type, size),\n                    name,\n                    type,\n                };\n            }\n        }\n    }\n\n    return uniforms;\n}\n"],"file":"extractUniformsFromSrc.js"}