{"version":3,"sources":["../../../../src/renderers/webgl/utils/checkMaxIfStatmentsInShader.js"],"names":["fragTemplate","join","checkMaxIfStatmentsInShader","maxIfs","gl","shader","createShader","FRAGMENT_SHADER","fragmentSrc","replace","generateIfTestSrc","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","src","i"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG,CACnB,0BADmB,EAEnB,kBAFmB,EAGnB,mBAHmB,EAInB,WAJmB,EAKnB,2BALmB,EAMnB,GANmB,EAOnBC,IAPmB,CAOd,IAPc,CAArB;;AASe,SAASC,2BAAT,CAAqCC,MAArC,EAA6CC,EAA7C,EAAiD;AAC9D,MAAMC,MAAM,GAAGD,EAAE,CAACE,YAAH,CAAgBF,EAAE,CAACG,eAAnB,CAAf;;AAEA,SAAO,IAAP,EAAa;AACX,QAAMC,WAAW,GAAGR,YAAY,CAACS,OAAb,CAClB,aADkB,EAElBC,iBAAiB,CAACP,MAAD,CAFC,CAApB;AAKAC,IAAAA,EAAE,CAACO,YAAH,CAAgBN,MAAhB,EAAwBG,WAAxB;AACAJ,IAAAA,EAAE,CAACQ,aAAH,CAAiBP,MAAjB;;AAEA,QAAI,CAACD,EAAE,CAACS,kBAAH,CAAsBR,MAAtB,EAA8BD,EAAE,CAACU,cAAjC,CAAL,EAAuD;AACrDX,MAAAA,MAAM,GAAIA,MAAM,GAAG,CAAV,GAAe,CAAxB;AACD,KAFD,MAEO;AACL;AACD;AACF;;AAED,SAAOA,MAAP;AACD;;AAED,SAASO,iBAAT,CAA2BP,MAA3B,EAAmC;AACjC,MAAIY,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAApB,EAA4B,EAAEa,CAA9B,EAAiC;AAC/B,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTD,MAAAA,GAAG,IAAI,SAAP;AACD;;AAED,QAAIC,CAAC,GAAGb,MAAM,GAAG,CAAjB,EAAoB;AAClBY,MAAAA,GAAG,oBAAkBC,CAAlB,UAAH;AACD;AACF;;AAED,SAAOD,GAAP;AACD","sourcesContent":["const fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(\"\\n\");\n\nexport default function checkMaxIfStatmentsInShader(maxIfs, gl) {\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n  while (true) {\n    const fragmentSrc = fragTemplate.replace(\n      /%forloop%/gi,\n      generateIfTestSrc(maxIfs)\n    );\n\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = (maxIfs / 2) | 0;\n    } else {\n      break;\n    }\n  }\n\n  return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n\n  return src;\n}\n"],"file":"checkMaxIfStatmentsInShader.js"}