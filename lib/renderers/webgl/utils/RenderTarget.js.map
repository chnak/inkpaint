{"version":3,"sources":["../../../../src/renderers/webgl/utils/RenderTarget.js"],"names":["RenderTarget","constructor","gl","width","height","scaleMode","resolution","root","frameBuffer","texture","clearColor","size","Rectangle","settings","RESOLUTION","projectionMatrix","Matrix","transform","frame","defaultFrame","destinationFrame","sourceFrame","stencilBuffer","stencilMaskStack","filterData","filterPoolKey","undefined","SCALE_MODE","GLFramebuffer","createRGBA","SCALE_MODES","NEAREST","enableNearestScaling","enableLinearScaling","framebuffer","setFrame","resize","clear","cc","attachStencilBuffer","enableStencil","activate","bind","calculateProjection","append","enable","SCISSOR_TEST","scissor","x","y","disable","viewport","pm","identity","a","d","tx","ty","projectionFrame","destroy","stencil","deleteRenderbuffer"],"mappings":"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","sourcesContent":["import { Rectangle, Matrix } from \"../../../math\";\nimport { SCALE_MODES } from \"../../../const\";\nimport settings from \"../../../settings\";\nimport { GLFramebuffer } from \"pixi-gl-core\";\n\nexport default class RenderTarget {\n  constructor(gl, width, height, scaleMode, resolution, root) {\n    this.gl = gl;\n    this.frameBuffer = null;\n    this.texture = null;\n    this.clearColor = [0, 0, 0, 0];\n    this.size = new Rectangle(0, 0, 1, 1);\n    this.resolution = resolution || settings.RESOLUTION;\n    this.projectionMatrix = new Matrix();\n    this.transform = null;\n    this.frame = null;\n    this.defaultFrame = new Rectangle();\n    this.destinationFrame = null;\n    this.sourceFrame = null;\n    this.stencilBuffer = null;\n    this.stencilMaskStack = [];\n    this.filterData = null;\n    this.filterPoolKey = \"\";\n\n    /**\n     * The scale mode.\n     *\n     * @member {number}\n     * @default InkPaint.settings.SCALE_MODE\n     * @see InkPaint.SCALE_MODES\n     */\n    this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n    /**\n     * Whether this object is the root element or not\n     *\n     * @member {boolean}\n     * @default false\n     */\n    this.root = root || false;\n\n    if (!this.root) {\n      this.frameBuffer = GLFramebuffer.createRGBA(gl, 100, 100);\n\n      if (this.scaleMode === SCALE_MODES.NEAREST) {\n        this.frameBuffer.texture.enableNearestScaling();\n      } else {\n        this.frameBuffer.texture.enableLinearScaling();\n      }\n\n      this.texture = this.frameBuffer.texture;\n    } else {\n      // make it a null framebuffer..\n      this.frameBuffer = new GLFramebuffer(gl, 100, 100);\n      this.frameBuffer.framebuffer = null;\n    }\n\n    this.setFrame();\n\n    this.resize(width, height);\n  }\n\n  /**\n   * Clears the filter texture.\n   *\n   * @param {number[]} [clearColor=this.clearColor] - Array of [r,g,b,a] to clear the framebuffer\n   */\n  clear(clearColor) {\n    const cc = clearColor || this.clearColor;\n\n    this.frameBuffer.clear(cc[0], cc[1], cc[2], cc[3]); // r,g,b,a);\n  }\n\n  /**\n   * Binds the stencil buffer.\n   *\n   */\n  attachStencilBuffer() {\n    if (!this.root) {\n      this.frameBuffer.enableStencil();\n    }\n  }\n\n  /**\n   * Sets the frame of the render target.\n   *\n   * @param {Rectangle} destinationFrame - The destination frame.\n   * @param {Rectangle} sourceFrame - The source frame.\n   */\n  setFrame(destinationFrame, sourceFrame) {\n    this.destinationFrame =\n      destinationFrame || this.destinationFrame || this.defaultFrame;\n    this.sourceFrame = sourceFrame || this.sourceFrame || this.destinationFrame;\n  }\n\n  /**\n   * Binds the buffers and initialises the viewport.\n   *\n   */\n  activate() {\n    // TODO refactor usage of frame..\n    const gl = this.gl;\n\n    // make sure the texture is unbound!\n    this.frameBuffer.bind();\n\n    this.calculateProjection(this.destinationFrame, this.sourceFrame);\n\n    if (this.transform) {\n      this.projectionMatrix.append(this.transform);\n    }\n\n    // TODO add a check as them may be the same!\n    if (this.destinationFrame !== this.sourceFrame) {\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(\n        this.destinationFrame.x | 0,\n        this.destinationFrame.y | 0,\n        (this.destinationFrame.width * this.resolution) | 0,\n        (this.destinationFrame.height * this.resolution) | 0\n      );\n    } else {\n      gl.disable(gl.SCISSOR_TEST);\n    }\n\n    // TODO - does not need to be updated all the time??\n    gl.viewport(\n      this.destinationFrame.x | 0,\n      this.destinationFrame.y | 0,\n      (this.destinationFrame.width * this.resolution) | 0,\n      (this.destinationFrame.height * this.resolution) | 0\n    );\n  }\n\n  calculateProjection(destinationFrame, sourceFrame) {\n    const pm = this.projectionMatrix;\n\n    sourceFrame = sourceFrame || destinationFrame;\n\n    pm.identity();\n\n    // TODO: make dest scale source\n    if (!this.root) {\n      pm.a = (1 / destinationFrame.width) * 2;\n      pm.d = (1 / destinationFrame.height) * 2;\n\n      pm.tx = -1 - sourceFrame.x * pm.a;\n      pm.ty = -1 - sourceFrame.y * pm.d;\n    } else {\n      pm.a = (1 / destinationFrame.width) * 2;\n      pm.d = (-1 / destinationFrame.height) * 2;\n\n      pm.tx = -1 - sourceFrame.x * pm.a;\n      pm.ty = 1 - sourceFrame.y * pm.d;\n    }\n  }\n\n  resize(width, height) {\n    width = width | 0;\n    height = height | 0;\n\n    if (this.size.width === width && this.size.height === height) {\n      return;\n    }\n\n    this.size.width = width;\n    this.size.height = height;\n\n    this.defaultFrame.width = width;\n    this.defaultFrame.height = height;\n\n    this.frameBuffer.resize(width * this.resolution, height * this.resolution);\n\n    const projectionFrame = this.frame || this.size;\n\n    this.calculateProjection(projectionFrame);\n  }\n\n  /**\n   * Destroys the render target.\n   *\n   */\n  destroy() {\n    if (this.frameBuffer.stencil) {\n      this.gl.deleteRenderbuffer(this.frameBuffer.stencil);\n    }\n    this.frameBuffer.destroy();\n\n    this.frameBuffer = null;\n    this.texture = null;\n  }\n}\n"],"file":"RenderTarget.js"}