{"version":3,"sources":["../../../../src/renderers/webgl/managers/MaskManager.js"],"names":["MaskManager","WebGLManager","constructor","renderer","scissor","scissorData","scissorRenderTarget","enableScissor","alphaMaskPool","alphaMaskIndex","pushMask","target","maskData","texture","pushSpriteMask","_activeRenderTarget","root","stencilManager","stencilMaskStack","length","isFastRect","matrix","worldTransform","rot","Math","atan2","b","a","round","PI","pushStencilMask","pushScissorMask","popMask","popSpriteMask","popScissorMask","popStencilMask","alphaMaskFilter","AlphaMaskFilter","resolution","maskSprite","stashFilterArea","filterArea","getBounds","filterManager","pushFilter","popFilter","currentRenderer","stop","pushStencil","popStencil","renderable","renderTarget","bounds","fit","size","gl","enable","SCISSOR_TEST","x","height","y","width","disable"],"mappings":"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","sourcesContent":["import WebGLManager from \"./WebGLManager\";\nimport AlphaMaskFilter from \"../filters/spriteMask/SpriteMaskFilter\";\n\nexport default class MaskManager extends WebGLManager {\n  constructor(renderer) {\n    super(renderer);\n    this.scissor = false;\n    this.scissorData = null;\n    this.scissorRenderTarget = null;\n    this.enableScissor = true;\n    this.alphaMaskPool = [];\n    this.alphaMaskIndex = 0;\n  }\n\n  pushMask(target, maskData) {\n    if (maskData.texture) {\n      this.pushSpriteMask(target, maskData);\n    } else if (\n      this.enableScissor &&\n      !this.scissor &&\n      this.renderer._activeRenderTarget.root &&\n      !this.renderer.stencilManager.stencilMaskStack.length &&\n      maskData.isFastRect()\n    ) {\n      const matrix = maskData.worldTransform;\n\n      let rot = Math.atan2(matrix.b, matrix.a);\n\n      // use the nearest degree!\n      rot = Math.round(rot * (180 / Math.PI));\n\n      if (rot % 90) {\n        this.pushStencilMask(maskData);\n      } else {\n        this.pushScissorMask(target, maskData);\n      }\n    } else {\n      this.pushStencilMask(maskData);\n    }\n  }\n\n  popMask(target, maskData) {\n    if (maskData.texture) {\n      this.popSpriteMask(target, maskData);\n    } else if (\n      this.enableScissor &&\n      !this.renderer.stencilManager.stencilMaskStack.length\n    ) {\n      this.popScissorMask(target, maskData);\n    } else {\n      this.popStencilMask(target, maskData);\n    }\n  }\n\n  pushSpriteMask(target, maskData) {\n    let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n    if (!alphaMaskFilter) {\n      alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [\n        new AlphaMaskFilter(maskData)\n      ];\n    }\n\n    alphaMaskFilter[0].resolution = this.renderer.resolution;\n    alphaMaskFilter[0].maskSprite = maskData;\n\n    const stashFilterArea = target.filterArea;\n\n    target.filterArea = maskData.getBounds(true);\n    this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n    target.filterArea = stashFilterArea;\n\n    this.alphaMaskIndex++;\n  }\n\n  popSpriteMask() {\n    this.renderer.filterManager.popFilter();\n    this.alphaMaskIndex--;\n  }\n\n  pushStencilMask(maskData) {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.pushStencil(maskData);\n  }\n\n  popStencilMask() {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.popStencil();\n  }\n\n  pushScissorMask(target, maskData) {\n    maskData.renderable = true;\n\n    const renderTarget = this.renderer._activeRenderTarget;\n\n    const bounds = maskData.getBounds();\n\n    bounds.fit(renderTarget.size);\n    maskData.renderable = false;\n\n    this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n\n    const resolution = this.renderer.resolution;\n\n    this.renderer.gl.scissor(\n      bounds.x * resolution,\n      (renderTarget.root\n        ? renderTarget.size.height - bounds.y - bounds.height\n        : bounds.y) * resolution,\n      bounds.width * resolution,\n      bounds.height * resolution\n    );\n\n    this.scissorRenderTarget = renderTarget;\n    this.scissorData = maskData;\n    this.scissor = true;\n  }\n\n  popScissorMask() {\n    this.scissorRenderTarget = null;\n    this.scissorData = null;\n    this.scissor = false;\n\n    // must be scissor!\n    const gl = this.renderer.gl;\n\n    gl.disable(gl.SCISSOR_TEST);\n  }\n}\n"],"file":"MaskManager.js"}