{"version":3,"sources":["../../src/renderers/SystemRenderer.js"],"names":["tempMatrix","Matrix","SystemRenderer","EventEmitter","constructor","system","options","arg2","arg3","Object","assign","width","height","settings","RENDER_OPTIONS","type","RENDERER_TYPE","UNKNOWN","screen","Rectangle","view","Doc","createElement","resolution","RESOLUTION","transparent","autoResize","blendModes","preserveDrawingBuffer","clearBeforeRender","roundPixels","_backgroundColor","_backgroundColorRgba","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","Container","_lastObjectRendered","resize","screenWidth","screenHeight","style","destroy","removeView","parentNode","removeChild","value"],"mappings":"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","sourcesContent":["import { hex2string, hex2rgb } from \"../utils\";\nimport { Matrix, Rectangle } from \"../math\";\nimport { RENDERER_TYPE } from \"../const\";\nimport EventEmitter from \"eventemitter3\";\nimport Doc from \"../polyfill/Doc\";\nimport settings from \"../settings\";\nimport Container from \"../display/Container\";\nimport RenderTexture from \"../textures/RenderTexture\";\nconst tempMatrix = new Matrix();\n\nexport default class SystemRenderer extends EventEmitter {\n  constructor(system, options, arg2, arg3) {\n    super();\n\n    if (typeof options === \"number\") {\n      options = Object.assign(\n        {\n          width: options,\n          height: arg2 || settings.RENDER_OPTIONS.height\n        },\n        arg3\n      );\n    }\n\n    options = Object.assign({}, settings.RENDER_OPTIONS, options);\n    this.options = options;\n    this.type = RENDERER_TYPE.UNKNOWN;\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.view = options.view || Doc.createElement(\"canvas\");\n    this.resolution = options.resolution || settings.RESOLUTION;\n    this.transparent = options.transparent;\n    this.autoResize = options.autoResize || false;\n    this.blendModes = null;\n    this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.roundPixels = options.roundPixels;\n\n    this._backgroundColor = 0x000000;\n    this._backgroundColorRgba = [0, 0, 0, 0];\n    this._backgroundColorString = \"#000000\";\n\n    this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n    this._tempDisplayObjectParent = new Container();\n    this._lastObjectRendered = this._tempDisplayObjectParent;\n  }\n\n  get width() {\n    return this.view.width;\n  }\n\n  get height() {\n    return this.view.height;\n  }\n\n  resize(screenWidth, screenHeight) {\n    this.screen.width = screenWidth;\n    this.screen.height = screenHeight;\n\n    this.view.width = screenWidth * this.resolution;\n    this.view.height = screenHeight * this.resolution;\n\n    if (this.autoResize) {\n      this.view.style.width = `${screenWidth}px`;\n      this.view.style.height = `${screenHeight}px`;\n    }\n  }\n\n  destroy(removeView) {\n    if (removeView && this.view.parentNode) {\n      this.view.parentNode.removeChild(this.view);\n    }\n\n    this.type = RENDERER_TYPE.UNKNOWN;\n    this.view = null;\n    this.screen = null;\n    this.resolution = 0;\n    this.transparent = false;\n    this.autoResize = false;\n    this.blendModes = null;\n    this.options = null;\n\n    this.preserveDrawingBuffer = false;\n    this.clearBeforeRender = false;\n    this.roundPixels = false;\n\n    this._backgroundColor = 0;\n    this._backgroundColorRgba = null;\n    this._backgroundColorString = null;\n\n    this._tempDisplayObjectParent = null;\n    this._lastObjectRendered = null;\n  }\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value) {\n    this._backgroundColor = value;\n    this._backgroundColorString = hex2string(value);\n    hex2rgb(value, this._backgroundColorRgba);\n  }\n}\n"],"file":"SystemRenderer.js"}