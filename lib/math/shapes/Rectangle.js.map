{"version":3,"sources":["../../../src/math/shapes/Rectangle.js"],"names":["Rectangle","constructor","x","y","width","height","Number","type","SHAPES","RECT","left","right","top","bottom","EMPTY","clone","copy","rectangle","contains","pad","paddingX","paddingY","fit","x1","Math","max","x2","min","y1","y2","enlarge","ceil","resolution","eps","floor","toString"],"mappings":"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","sourcesContent":["import { SHAPES } from \"../../const\";\n\nexport default class Rectangle {\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n\n  copy(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n\n    return this;\n  }\n\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  pad(paddingX, paddingY) {\n    paddingX = paddingX || 0;\n    paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);\n\n    this.x -= paddingX;\n    this.y -= paddingY;\n\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n  }\n\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x);\n    const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.max(this.y, rectangle.y);\n    const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n  }\n\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param {InkPaint.Rectangle} rectangle - The rectangle to include.\n   */\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x);\n    const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.min(this.y, rectangle.y);\n    const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n  }\n\n  ceil(resolution = 1, eps = 0.001) {\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    const y2 =\n      Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n  }\n\n  toString() {\n    return `Rect:: ${this.x}_${this.y}_${this.width}_${this.height}`;\n  }\n}\n"],"file":"Rectangle.js"}