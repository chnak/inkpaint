{"version":3,"sources":["../../../src/math/shapes/Ellipse.js"],"names":["Ellipse","constructor","x","y","halfWidth","halfHeight","width","height","type","SHAPES","ELIP","clone","contains","normx","normy","getBounds","Rectangle"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,OAAN,CAAc;AAC3B;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,CAAD,EAAQC,CAAR,EAAeC,SAAf,EAA8BC,UAA9B,EAA8C;AAAA,QAA7CH,CAA6C;AAA7CA,MAAAA,CAA6C,GAAzC,CAAyC;AAAA;;AAAA,QAAtCC,CAAsC;AAAtCA,MAAAA,CAAsC,GAAlC,CAAkC;AAAA;;AAAA,QAA/BC,SAA+B;AAA/BA,MAAAA,SAA+B,GAAnB,CAAmB;AAAA;;AAAA,QAAhBC,UAAgB;AAAhBA,MAAAA,UAAgB,GAAH,CAAG;AAAA;;AACvD;AACJ;AACA;AACA;AACI,SAAKH,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKG,KAAL,GAAaF,SAAb;AAEA;AACJ;AACA;AACA;;AACI,SAAKG,MAAL,GAAcF,UAAd;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKG,IAAL,GAAYC,cAAOC,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIX,OAAJ,CAAY,KAAKE,CAAjB,EAAoB,KAAKC,CAAzB,EAA4B,KAAKG,KAAjC,EAAwC,KAAKC,MAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,QAAQ,CAACV,CAAD,EAAIC,CAAJ,EAAO;AACb,QAAI,KAAKG,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EAAyC;AACvC,aAAO,KAAP;AACD,KAHY,CAKb;;;AACA,QAAIM,KAAK,GAAG,CAACX,CAAC,GAAG,KAAKA,CAAV,IAAe,KAAKI,KAAhC;AACA,QAAIQ,KAAK,GAAG,CAACX,CAAC,GAAG,KAAKA,CAAV,IAAe,KAAKI,MAAhC;AAEAM,IAAAA,KAAK,IAAIA,KAAT;AACAC,IAAAA,KAAK,IAAIA,KAAT;AAEA,WAAOD,KAAK,GAAGC,KAAR,IAAiB,CAAxB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,GAAG;AACV,WAAO,IAAIC,kBAAJ,CACL,KAAKd,CAAL,GAAS,KAAKI,KADT,EAEL,KAAKH,CAAL,GAAS,KAAKI,MAFT,EAGL,KAAKD,KAHA,EAIL,KAAKC,MAJA,CAAP;AAMD;;AAtF0B","sourcesContent":["import Rectangle from \"./Rectangle\";\nimport { SHAPES } from \"../../const\";\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof InkPaint\n */\nexport default class Ellipse {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this ellipse\n   * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n   * @param {number} [halfWidth=0] - The half width of this ellipse\n   * @param {number} [halfHeight=0] - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = halfWidth;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = halfHeight;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default InkPaint.SHAPES.ELIP\n     * @see InkPaint.SHAPES\n     */\n    this.type = SHAPES.ELIP;\n  }\n\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {InkPaint.Ellipse} a copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    // normalize the coords to an ellipse with center 0,0\n    let normx = (x - this.x) / this.width;\n    let normy = (y - this.y) / this.height;\n\n    normx *= normx;\n    normy *= normy;\n\n    return normx + normy <= 1;\n  }\n\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return {InkPaint.Rectangle} the framing rectangle\n   */\n  getBounds() {\n    return new Rectangle(\n      this.x - this.width,\n      this.y - this.height,\n      this.width,\n      this.height\n    );\n  }\n}\n"],"file":"Ellipse.js"}