{"version":3,"sources":["../../../src/math/shapes/Circle.js"],"names":["Circle","constructor","x","y","radius","type","SHAPES","CIRC","clone","contains","r2","dx","dy","getBounds","Rectangle"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,MAAN,CAAa;AAC1B;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,CAAD,EAAQC,CAAR,EAAeC,MAAf,EAA2B;AAAA,QAA1BF,CAA0B;AAA1BA,MAAAA,CAA0B,GAAtB,CAAsB;AAAA;;AAAA,QAAnBC,CAAmB;AAAnBA,MAAAA,CAAmB,GAAf,CAAe;AAAA;;AAAA,QAAZC,MAAY;AAAZA,MAAAA,MAAY,GAAH,CAAG;AAAA;;AACpC;AACJ;AACA;AACA;AACI,SAAKF,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,MAAL,GAAcA,MAAd;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,IAAL,GAAYC,cAAOC,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIR,MAAJ,CAAW,KAAKE,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,KAAKC,MAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,QAAQ,CAACP,CAAD,EAAIC,CAAJ,EAAO;AACb,QAAI,KAAKC,MAAL,IAAe,CAAnB,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,QAAMM,EAAE,GAAG,KAAKN,MAAL,GAAc,KAAKA,MAA9B;AACA,QAAIO,EAAE,GAAG,KAAKT,CAAL,GAASA,CAAlB;AACA,QAAIU,EAAE,GAAG,KAAKT,CAAL,GAASA,CAAlB;AAEAQ,IAAAA,EAAE,IAAIA,EAAN;AACAC,IAAAA,EAAE,IAAIA,EAAN;AAEA,WAAOD,EAAE,GAAGC,EAAL,IAAWF,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEG,EAAAA,SAAS,GAAG;AACV,WAAO,IAAIC,kBAAJ,CACL,KAAKZ,CAAL,GAAS,KAAKE,MADT,EAEL,KAAKD,CAAL,GAAS,KAAKC,MAFT,EAGL,KAAKA,MAAL,GAAc,CAHT,EAIL,KAAKA,MAAL,GAAc,CAJT,CAAP;AAMD;;AA/EyB","sourcesContent":["import Rectangle from \"./Rectangle\";\nimport { SHAPES } from \"../../const\";\n\n/**\n * The Circle object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof InkPaint\n */\nexport default class Circle {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this circle\n   * @param {number} [y=0] - The Y coordinate of the center of this circle\n   * @param {number} [radius=0] - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.radius = radius;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default InkPaint.SHAPES.CIRC\n     * @see InkPaint.SHAPES\n     */\n    this.type = SHAPES.CIRC;\n  }\n\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return {InkPaint.Circle} a copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n\n    dx *= dx;\n    dy *= dy;\n\n    return dx + dy <= r2;\n  }\n\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   *\n   * @return {InkPaint.Rectangle} the framing rectangle\n   */\n  getBounds() {\n    return new Rectangle(\n      this.x - this.radius,\n      this.y - this.radius,\n      this.radius * 2,\n      this.radius * 2\n    );\n  }\n}\n"],"file":"Circle.js"}