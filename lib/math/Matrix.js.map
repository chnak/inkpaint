{"version":3,"sources":["../../src/math/Matrix.js"],"names":["Matrix","constructor","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","Point","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","PI_2","skew","sqrt","position","invert","n","identity","clone","copy","IDENTITY","TEMP_MATRIX"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,MAAN,CAAa;AAC1BC,EAAAA,WAAW,CAACC,CAAD,EAAQC,CAAR,EAAeC,CAAf,EAAsBC,CAAtB,EAA6BC,EAA7B,EAAqCC,EAArC,EAA6C;AAAA,QAA5CL,CAA4C;AAA5CA,MAAAA,CAA4C,GAAxC,CAAwC;AAAA;;AAAA,QAArCC,CAAqC;AAArCA,MAAAA,CAAqC,GAAjC,CAAiC;AAAA;;AAAA,QAA9BC,CAA8B;AAA9BA,MAAAA,CAA8B,GAA1B,CAA0B;AAAA;;AAAA,QAAvBC,CAAuB;AAAvBA,MAAAA,CAAuB,GAAnB,CAAmB;AAAA;;AAAA,QAAhBC,EAAgB;AAAhBA,MAAAA,EAAgB,GAAX,CAAW;AAAA;;AAAA,QAARC,EAAQ;AAARA,MAAAA,EAAQ,GAAH,CAAG;AAAA;;AACtD,SAAKL,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,CAAL,GAASA,CAAT;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,EAAL,GAAUA,EAAV;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,EAAL,GAAUA,EAAV;AAEA,SAAKC,KAAL,GAAa,IAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,SAAKN,CAAL,GAASM,KAAK,CAAC,CAAD,CAAd;AACA,SAAKL,CAAL,GAASK,KAAK,CAAC,CAAD,CAAd;AACA,SAAKJ,CAAL,GAASI,KAAK,CAAC,CAAD,CAAd;AACA,SAAKH,CAAL,GAASG,KAAK,CAAC,CAAD,CAAd;AACA,SAAKF,EAAL,GAAUE,KAAK,CAAC,CAAD,CAAf;AACA,SAAKD,EAAL,GAAUC,KAAK,CAAC,CAAD,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,GAAG,CAACR,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,EAAb,EAAiBC,EAAjB,EAAqB;AACtB,SAAKL,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,OAAO,CAACC,SAAD,EAAYC,GAAZ,EAAiB;AACtB,QAAI,CAAC,KAAKL,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAa,IAAIM,YAAJ,CAAiB,CAAjB,CAAb;AACD;;AAED,QAAMN,KAAK,GAAGK,GAAG,IAAI,KAAKL,KAA1B;;AAEA,QAAII,SAAJ,EAAe;AACbJ,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKN,CAAhB;AACAM,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKL,CAAhB;AACAK,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKJ,CAAhB;AACAI,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKH,CAAhB;AACAG,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKF,EAAhB;AACAE,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKD,EAAhB;AACAC,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACD,KAVD,MAUO;AACLA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKN,CAAhB;AACAM,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKJ,CAAhB;AACAI,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKF,EAAhB;AACAE,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKL,CAAhB;AACAK,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKH,CAAhB;AACAG,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKD,EAAhB;AACAC,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACD;;AAED,WAAOA,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,KAAK,CAACC,GAAD,EAAMC,MAAN,EAAc;AACjBA,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIC,cAAJ,EAAnB;AAEA,QAAMC,CAAC,GAAGH,GAAG,CAACG,CAAd;AACA,QAAMC,CAAC,GAAGJ,GAAG,CAACI,CAAd;AAEAH,IAAAA,MAAM,CAACE,CAAP,GAAW,KAAKjB,CAAL,GAASiB,CAAT,GAAa,KAAKf,CAAL,GAASgB,CAAtB,GAA0B,KAAKd,EAA1C;AACAW,IAAAA,MAAM,CAACG,CAAP,GAAW,KAAKjB,CAAL,GAASgB,CAAT,GAAa,KAAKd,CAAL,GAASe,CAAtB,GAA0B,KAAKb,EAA1C;AAEA,WAAOU,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,YAAY,CAACL,GAAD,EAAMC,MAAN,EAAc;AACxBA,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIC,cAAJ,EAAnB;AAEA,QAAMI,EAAE,GAAG,KAAK,KAAKpB,CAAL,GAAS,KAAKG,CAAd,GAAkB,KAAKD,CAAL,GAAS,CAAC,KAAKD,CAAtC,CAAX;AAEA,QAAMgB,CAAC,GAAGH,GAAG,CAACG,CAAd;AACA,QAAMC,CAAC,GAAGJ,GAAG,CAACI,CAAd;AAEAH,IAAAA,MAAM,CAACE,CAAP,GACE,KAAKd,CAAL,GAASiB,EAAT,GAAcH,CAAd,GACA,CAAC,KAAKf,CAAN,GAAUkB,EAAV,GAAeF,CADf,GAEA,CAAC,KAAKb,EAAL,GAAU,KAAKH,CAAf,GAAmB,KAAKE,EAAL,GAAU,KAAKD,CAAnC,IAAwCiB,EAH1C;AAIAL,IAAAA,MAAM,CAACG,CAAP,GACE,KAAKlB,CAAL,GAASoB,EAAT,GAAcF,CAAd,GACA,CAAC,KAAKjB,CAAN,GAAUmB,EAAV,GAAeH,CADf,GAEA,CAAC,CAAC,KAAKZ,EAAN,GAAW,KAAKL,CAAhB,GAAoB,KAAKI,EAAL,GAAU,KAAKH,CAApC,IAAyCmB,EAH3C;AAKA,WAAOL,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,SAAS,CAACJ,CAAD,EAAIC,CAAJ,EAAO;AACd,SAAKd,EAAL,IAAWa,CAAX;AACA,SAAKZ,EAAL,IAAWa,CAAX;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,KAAK,CAACL,CAAD,EAAIC,CAAJ,EAAO;AACV,SAAKlB,CAAL,IAAUiB,CAAV;AACA,SAAKd,CAAL,IAAUe,CAAV;AACA,SAAKhB,CAAL,IAAUe,CAAV;AACA,SAAKhB,CAAL,IAAUiB,CAAV;AACA,SAAKd,EAAL,IAAWa,CAAX;AACA,SAAKZ,EAAL,IAAWa,CAAX;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASD,KAAT,CAAZ;AACA,QAAMG,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASH,KAAT,CAAZ;AAEA,QAAMI,EAAE,GAAG,KAAK5B,CAAhB;AACA,QAAM6B,EAAE,GAAG,KAAK3B,CAAhB;AACA,QAAM4B,GAAG,GAAG,KAAK1B,EAAjB;AAEA,SAAKJ,CAAL,GAAS4B,EAAE,GAAGH,GAAL,GAAW,KAAKxB,CAAL,GAAS0B,GAA7B;AACA,SAAK1B,CAAL,GAAS2B,EAAE,GAAGD,GAAL,GAAW,KAAK1B,CAAL,GAASwB,GAA7B;AACA,SAAKvB,CAAL,GAAS2B,EAAE,GAAGJ,GAAL,GAAW,KAAKtB,CAAL,GAASwB,GAA7B;AACA,SAAKxB,CAAL,GAAS0B,EAAE,GAAGF,GAAL,GAAW,KAAKxB,CAAL,GAASsB,GAA7B;AACA,SAAKrB,EAAL,GAAU0B,GAAG,GAAGL,GAAN,GAAY,KAAKpB,EAAL,GAAUsB,GAAhC;AACA,SAAKtB,EAAL,GAAUyB,GAAG,GAAGH,GAAN,GAAY,KAAKtB,EAAL,GAAUoB,GAAhC;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,QAAMJ,EAAE,GAAG,KAAK5B,CAAhB;AACA,QAAMiC,EAAE,GAAG,KAAKhC,CAAhB;AACA,QAAM4B,EAAE,GAAG,KAAK3B,CAAhB;AACA,QAAMgC,EAAE,GAAG,KAAK/B,CAAhB;AAEA,SAAKH,CAAL,GAASgC,MAAM,CAAChC,CAAP,GAAW4B,EAAX,GAAgBI,MAAM,CAAC/B,CAAP,GAAW4B,EAApC;AACA,SAAK5B,CAAL,GAAS+B,MAAM,CAAChC,CAAP,GAAWiC,EAAX,GAAgBD,MAAM,CAAC/B,CAAP,GAAWiC,EAApC;AACA,SAAKhC,CAAL,GAAS8B,MAAM,CAAC9B,CAAP,GAAW0B,EAAX,GAAgBI,MAAM,CAAC7B,CAAP,GAAW0B,EAApC;AACA,SAAK1B,CAAL,GAAS6B,MAAM,CAAC9B,CAAP,GAAW+B,EAAX,GAAgBD,MAAM,CAAC7B,CAAP,GAAW+B,EAApC;AAEA,SAAK9B,EAAL,GAAU4B,MAAM,CAAC5B,EAAP,GAAYwB,EAAZ,GAAiBI,MAAM,CAAC3B,EAAP,GAAYwB,EAA7B,GAAkC,KAAKzB,EAAjD;AACA,SAAKC,EAAL,GAAU2B,MAAM,CAAC5B,EAAP,GAAY6B,EAAZ,GAAiBD,MAAM,CAAC3B,EAAP,GAAY6B,EAA7B,GAAkC,KAAK7B,EAAjD;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE8B,EAAAA,YAAY,CAAClB,CAAD,EAAIC,CAAJ,EAAOkB,MAAP,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,KAAjD,EAAwDC,KAAxD,EAA+D;AACzE,SAAK1C,CAAL,GAAS0B,IAAI,CAACD,GAAL,CAASe,QAAQ,GAAGE,KAApB,IAA6BJ,MAAtC;AACA,SAAKrC,CAAL,GAASyB,IAAI,CAACC,GAAL,CAASa,QAAQ,GAAGE,KAApB,IAA6BJ,MAAtC;AACA,SAAKpC,CAAL,GAAS,CAACwB,IAAI,CAACC,GAAL,CAASa,QAAQ,GAAGC,KAApB,CAAD,GAA8BF,MAAvC;AACA,SAAKpC,CAAL,GAASuB,IAAI,CAACD,GAAL,CAASe,QAAQ,GAAGC,KAApB,IAA6BF,MAAtC;AAEA,SAAKnC,EAAL,GAAUa,CAAC,IAAImB,MAAM,GAAG,KAAKpC,CAAd,GAAkBqC,MAAM,GAAG,KAAKnC,CAApC,CAAX;AACA,SAAKG,EAAL,GAAUa,CAAC,IAAIkB,MAAM,GAAG,KAAKnC,CAAd,GAAkBoC,MAAM,GAAG,KAAKlC,CAApC,CAAX;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEwC,EAAAA,OAAO,CAACX,MAAD,EAAS;AACd,QAAMF,GAAG,GAAG,KAAK1B,EAAjB;;AAEA,QAAI4B,MAAM,CAAChC,CAAP,KAAa,CAAb,IAAkBgC,MAAM,CAAC/B,CAAP,KAAa,CAA/B,IAAoC+B,MAAM,CAAC9B,CAAP,KAAa,CAAjD,IAAsD8B,MAAM,CAAC7B,CAAP,KAAa,CAAvE,EAA0E;AACxE,UAAMyB,EAAE,GAAG,KAAK5B,CAAhB;AACA,UAAM6B,EAAE,GAAG,KAAK3B,CAAhB;AAEA,WAAKF,CAAL,GAAS4B,EAAE,GAAGI,MAAM,CAAChC,CAAZ,GAAgB,KAAKC,CAAL,GAAS+B,MAAM,CAAC9B,CAAzC;AACA,WAAKD,CAAL,GAAS2B,EAAE,GAAGI,MAAM,CAAC/B,CAAZ,GAAgB,KAAKA,CAAL,GAAS+B,MAAM,CAAC7B,CAAzC;AACA,WAAKD,CAAL,GAAS2B,EAAE,GAAGG,MAAM,CAAChC,CAAZ,GAAgB,KAAKG,CAAL,GAAS6B,MAAM,CAAC9B,CAAzC;AACA,WAAKC,CAAL,GAAS0B,EAAE,GAAGG,MAAM,CAAC/B,CAAZ,GAAgB,KAAKE,CAAL,GAAS6B,MAAM,CAAC7B,CAAzC;AACD;;AAED,SAAKC,EAAL,GAAU0B,GAAG,GAAGE,MAAM,CAAChC,CAAb,GAAiB,KAAKK,EAAL,GAAU2B,MAAM,CAAC9B,CAAlC,GAAsC8B,MAAM,CAAC5B,EAAvD;AACA,SAAKC,EAAL,GAAUyB,GAAG,GAAGE,MAAM,CAAC/B,CAAb,GAAiB,KAAKI,EAAL,GAAU2B,MAAM,CAAC7B,CAAlC,GAAsC6B,MAAM,CAAC3B,EAAvD;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEuC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACnB;AACA,QAAM7C,CAAC,GAAG,KAAKA,CAAf;AACA,QAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,QAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,QAAMC,CAAC,GAAG,KAAKA,CAAf;AAEA,QAAMsC,KAAK,GAAG,CAACf,IAAI,CAACoB,KAAL,CAAW,CAAC5C,CAAZ,EAAeC,CAAf,CAAf;AACA,QAAMuC,KAAK,GAAGhB,IAAI,CAACoB,KAAL,CAAW7C,CAAX,EAAcD,CAAd,CAAd;AAEA,QAAM+C,KAAK,GAAGrB,IAAI,CAACsB,GAAL,CAASP,KAAK,GAAGC,KAAjB,CAAd;;AAEA,QAAIK,KAAK,GAAG,OAAR,IAAmBrB,IAAI,CAACsB,GAAL,CAASC,cAAOF,KAAhB,IAAyB,OAAhD,EAAyD;AACvDF,MAAAA,SAAS,CAACL,QAAV,GAAqBE,KAArB;AACAG,MAAAA,SAAS,CAACK,IAAV,CAAejC,CAAf,GAAmB4B,SAAS,CAACK,IAAV,CAAehC,CAAf,GAAmB,CAAtC;AACD,KAHD,MAGO;AACL2B,MAAAA,SAAS,CAACL,QAAV,GAAqB,CAArB;AACAK,MAAAA,SAAS,CAACK,IAAV,CAAejC,CAAf,GAAmBwB,KAAnB;AACAI,MAAAA,SAAS,CAACK,IAAV,CAAehC,CAAf,GAAmBwB,KAAnB;AACD,KAnBkB,CAqBnB;;;AACAG,IAAAA,SAAS,CAACvB,KAAV,CAAgBL,CAAhB,GAAoBS,IAAI,CAACyB,IAAL,CAAUnD,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAtB,CAApB;AACA4C,IAAAA,SAAS,CAACvB,KAAV,CAAgBJ,CAAhB,GAAoBQ,IAAI,CAACyB,IAAL,CAAUjD,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAtB,CAApB,CAvBmB,CAyBnB;;AACA0C,IAAAA,SAAS,CAACO,QAAV,CAAmBnC,CAAnB,GAAuB,KAAKb,EAA5B;AACAyC,IAAAA,SAAS,CAACO,QAAV,CAAmBlC,CAAnB,GAAuB,KAAKb,EAA5B;AAEA,WAAOwC,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEQ,EAAAA,MAAM,GAAG;AACP,QAAMzB,EAAE,GAAG,KAAK5B,CAAhB;AACA,QAAMiC,EAAE,GAAG,KAAKhC,CAAhB;AACA,QAAM4B,EAAE,GAAG,KAAK3B,CAAhB;AACA,QAAMgC,EAAE,GAAG,KAAK/B,CAAhB;AACA,QAAM2B,GAAG,GAAG,KAAK1B,EAAjB;AACA,QAAMkD,CAAC,GAAG1B,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGJ,EAAzB;AAEA,SAAK7B,CAAL,GAASkC,EAAE,GAAGoB,CAAd;AACA,SAAKrD,CAAL,GAAS,CAACgC,EAAD,GAAMqB,CAAf;AACA,SAAKpD,CAAL,GAAS,CAAC2B,EAAD,GAAMyB,CAAf;AACA,SAAKnD,CAAL,GAASyB,EAAE,GAAG0B,CAAd;AACA,SAAKlD,EAAL,GAAU,CAACyB,EAAE,GAAG,KAAKxB,EAAV,GAAe6B,EAAE,GAAGJ,GAArB,IAA4BwB,CAAtC;AACA,SAAKjD,EAAL,GAAU,EAAEuB,EAAE,GAAG,KAAKvB,EAAV,GAAe4B,EAAE,GAAGH,GAAtB,IAA6BwB,CAAvC;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,SAAKvD,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEmD,EAAAA,KAAK,GAAG;AACN,QAAMxB,MAAM,GAAG,IAAIlC,MAAJ,EAAf;AAEAkC,IAAAA,MAAM,CAAChC,CAAP,GAAW,KAAKA,CAAhB;AACAgC,IAAAA,MAAM,CAAC/B,CAAP,GAAW,KAAKA,CAAhB;AACA+B,IAAAA,MAAM,CAAC9B,CAAP,GAAW,KAAKA,CAAhB;AACA8B,IAAAA,MAAM,CAAC7B,CAAP,GAAW,KAAKA,CAAhB;AACA6B,IAAAA,MAAM,CAAC5B,EAAP,GAAY,KAAKA,EAAjB;AACA4B,IAAAA,MAAM,CAAC3B,EAAP,GAAY,KAAKA,EAAjB;AAEA,WAAO2B,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEyB,EAAAA,IAAI,CAACzB,MAAD,EAAS;AACXA,IAAAA,MAAM,CAAChC,CAAP,GAAW,KAAKA,CAAhB;AACAgC,IAAAA,MAAM,CAAC/B,CAAP,GAAW,KAAKA,CAAhB;AACA+B,IAAAA,MAAM,CAAC9B,CAAP,GAAW,KAAKA,CAAhB;AACA8B,IAAAA,MAAM,CAAC7B,CAAP,GAAW,KAAKA,CAAhB;AACA6B,IAAAA,MAAM,CAAC5B,EAAP,GAAY,KAAKA,EAAjB;AACA4B,IAAAA,MAAM,CAAC3B,EAAP,GAAY,KAAKA,EAAjB;AAEA,WAAO2B,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACqB,aAAR0B,QAAQ,GAAG;AACpB,WAAO,IAAI5D,MAAJ,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACwB,aAAX6D,WAAW,GAAG;AACvB,WAAO,IAAI7D,MAAJ,EAAP;AACD;;AAvayB","sourcesContent":["import Point from \"./Point\";\nimport { PI_2 } from \"../const\";\n\nexport default class Matrix {\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.a = a;\n    this.b = b;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.c = c;\n\n    /**\n     * @member {number}\n     * @default 1\n     */\n    this.d = d;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.tx = tx;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.ty = ty;\n\n    this.array = null;\n  }\n\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   *\n   * @param {number[]} array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n\n  /**\n   * sets the matrix properties\n   *\n   * @param {number} a - Matrix component\n   * @param {number} b - Matrix component\n   * @param {number} c - Matrix component\n   * @param {number} d - Matrix component\n   * @param {number} tx - Matrix component\n   * @param {number} ty - Matrix component\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n\n    return this;\n  }\n\n  /**\n   * Creates an array from the current Matrix object.\n   *\n   * @param {boolean} transpose - Whether we need to transpose the matrix or not\n   * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @return {number[]} the newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n\n    const array = out || this.array;\n\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n\n    return array;\n  }\n\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   *\n   * @param {InkPaint.Point} pos - The origin\n   * @param {InkPaint.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {InkPaint.Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n\n    const x = pos.x;\n    const y = pos.y;\n\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n\n    return newPos;\n  }\n\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   *\n   * @param {InkPaint.Point} pos - The origin\n   * @param {InkPaint.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {InkPaint.Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n\n    const id = 1 / (this.a * this.d + this.c * -this.b);\n\n    const x = pos.x;\n    const y = pos.y;\n\n    newPos.x =\n      this.d * id * x +\n      -this.c * id * y +\n      (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y =\n      this.a * id * y +\n      -this.b * id * x +\n      (-this.ty * this.a + this.tx * this.b) * id;\n\n    return newPos;\n  }\n\n  /**\n   * Translates the matrix on the x and y.\n   *\n   * @param {number} x How much to translate x by\n   * @param {number} y How much to translate y by\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n\n    return this;\n  }\n\n  /**\n   * Applies a scale transformation to the matrix.\n   *\n   * @param {number} x The amount to scale horizontally\n   * @param {number} y The amount to scale vertically\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n\n    return this;\n  }\n\n  /**\n   * Applies a rotation transformation to the matrix.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n\n    return this;\n  }\n\n  /**\n   * Appends the given Matrix to this Matrix.\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to append.\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n\n    return this;\n  }\n\n  /**\n   * Sets the matrix based on all the available properties\n   *\n   * @param {number} x - Position on the x axis\n   * @param {number} y - Position on the y axis\n   * @param {number} pivotX - Pivot on the x axis\n   * @param {number} pivotY - Pivot on the y axis\n   * @param {number} scaleX - Scale on the x axis\n   * @param {number} scaleY - Scale on the y axis\n   * @param {number} rotation - Rotation in radians\n   * @param {number} skewX - Skew on the x axis\n   * @param {number} skewY - Skew on the y axis\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n\n    return this;\n  }\n\n  /**\n   * Prepends the given Matrix to this Matrix.\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to prepend\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n\n    return this;\n  }\n\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   *\n   * @param {InkPaint.Transform|InkPaint.TransformStatic} transform - The transform to apply the properties to.\n   * @return {InkPaint.Transform|InkPaint.TransformStatic} The transform with the newly applied properties\n   */\n  decompose(transform) {\n    // sort out rotation / skew..\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    const delta = Math.abs(skewX + skewY);\n\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n\n    // next set scale\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n\n    // next set position\n    transform.position.x = this.tx;\n    transform.position.y = this.ty;\n\n    return transform;\n  }\n\n  /**\n   * Inverts this matrix\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n\n    return this;\n  }\n\n  /**\n   * Resets this Matix to an identity (default) matrix.\n   *\n   * @return {InkPaint.Matrix} This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n\n    return this;\n  }\n\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   *\n   * @return {InkPaint.Matrix} A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n\n    return matrix;\n  }\n\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   *\n   * @param {InkPaint.Matrix} matrix - The matrix to copy from.\n   * @return {InkPaint.Matrix} The matrix given in parameter with its values updated.\n   */\n  copy(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n\n    return matrix;\n  }\n\n  /**\n   * A default (identity) matrix\n   *\n   * @static\n   * @const\n   */\n  static get IDENTITY() {\n    return new Matrix();\n  }\n\n  /**\n   * A temp matrix\n   *\n   * @static\n   * @const\n   */\n  static get TEMP_MATRIX() {\n    return new Matrix();\n  }\n}\n"],"file":"Matrix.js"}