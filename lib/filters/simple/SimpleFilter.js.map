{"version":3,"sources":["../../../src/filters/simple/SimpleFilter.js"],"names":["SimpleFilter","Filter","constructor","opt","key","vert","frag","render","vars","uniforms","val","Object","entries","type","Array","isArray","length","push","replace","join","glShaderKey","_maskMatrix","Matrix","apply","filterManager","input","output","clear","uFrameSize","sourceFrame","width","height","filterMatrix","undefined","_mask","calculateSpriteMatrix","_vars","mask","uMask","tex","texture","transform","TextureMatrix","update","uMaskAnchor","x","y","uMaskSize","uMaskRotation","rotation","useMask","useBinaryMask","binaryMask","useReverseMask","reverseMask","maskClamp","uClampFrame"],"mappings":"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","sourcesContent":["import Filter from \"../../renderers/webgl/filters/Filter\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport Matrix from \"../../math/Matrix\";\nimport { default as TextureMatrix } from \"../../textures/TextureMatrix\";\n\nexport default class SimpleFilter extends Filter {\n  constructor(opt) {\n    let { key, vert, frag, render, vars } = opt || {};\n\n    if (!render) render = `vec4 render(sampler2D tex, vec2 uv, vec4 bg, vec4 mask, float alpha) { return bg; }`;\n    if (!vert) vert = readFileSync(join(__dirname, \"../fragments/default-filter-matrix.vert\"), \"utf8\");\n    if (!frag) {\n      const uniforms = [];\n      if (vars) {\n        for (const [key, val] of Object.entries(vars)) {\n          if (!key) continue;\n          const type = Array.isArray(val) ? `vec${val.length}` : 'float';\n          uniforms.push(`uniform ${type} ${key};`);\n        }\n      }\n      frag = readFileSync(join(__dirname, \"./render.frag\"), \"utf8\");\n      frag = frag.replace('${uniforms}', uniforms.join(\"\\n\")).replace('${render}', render);\n    }\n\n    super(vert, frag);\n    if (key) this.glShaderKey = key;\n    this.vars = vars;\n    this._maskMatrix = new Matrix();\n  }\n\n  apply(filterManager, input, output, clear) {\n    if (this.uniforms.uFrameSize) {\n      this.uniforms.uFrameSize[0] = input.sourceFrame.width;\n      this.uniforms.uFrameSize[1] = input.sourceFrame.height;\n    }\n    if (this.uniforms.filterMatrix !== undefined && this._mask) {\n      this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(\n        this._maskMatrix, this._mask\n      );\n    }\n    super.apply(filterManager, input, output, clear);\n  }\n\n  set vars(vars) {\n    this._vars = vars;\n    if (!vars) return;\n    for (const [key, val] of Object.entries(vars)) {\n      if (!key) continue;\n      this.uniforms[key] = val;\n    }\n  }\n\n  get vars() {\n    return this._vars;\n  }\n\n  get mask() {\n    return this._mask;\n  }\n\n  set mask(mask) {\n    this._mask = mask;\n    if (this.uniforms.uMask !== undefined) {\n      if (mask) {\n        const tex = mask.texture;\n        if (!tex.transform) {\n          // margin = 0.0, let it bleed a bit, shader code becomes easier\n          // assuming that atlas textures were made with 1-pixel padding\n          tex.transform = new TextureMatrix(tex, 0.0);\n        }\n        tex.transform.update();\n        this.uniforms.uMask = tex;\n        this.uniforms.uMaskAnchor = [mask.x, mask.y];\n        this.uniforms.uMaskSize = [mask.width, mask.height];\n        this.uniforms.uMaskRotation = mask.rotation;\n        this.uniforms.useMask = true;\n        this.uniforms.useBinaryMask = !!mask.binaryMask;\n        this.uniforms.useReverseMask = !!mask.reverseMask;\n        this.uniforms.maskClamp = tex.transform.uClampFrame;\n      } else {\n        this.uniforms.useMask = false;\n      }\n    }\n  }\n\n}\n"],"file":"SimpleFilter.js"}