{"version":3,"sources":["../../../src/filters/simple/SimpleFilter.js"],"names":["SimpleFilter","Filter","constructor","opt","key","vert","frag","render","vars","uniforms","val","Object","entries","type","Array","isArray","length","push","replace","join","glShaderKey","apply","filterManager","input","output","clear","uFrameSize","sourceFrame","width","height","_vars"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEe,MAAMA,YAAN,SAA2BC,eAA3B,CAAkC;AAC/CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,QAAI;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA;AAA3B,QAAoCL,GAAG,IAAI,EAA/C;AAEA,QAAI,CAACI,MAAL,EAAaA,MAAM,qDAAN;AACb,QAAI,CAACF,IAAL,EAAWA,IAAI,wRAAJ;;AACX,QAAI,CAACC,IAAL,EAAW;AACT,UAAMG,QAAQ,GAAG,EAAjB;;AACA,UAAID,IAAJ,EAAU;AACR,aAAK,IAAM,CAACJ,IAAD,EAAMM,GAAN,CAAX,IAAyBC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAAzB,EAA+C;AAC7C,cAAI,CAACJ,IAAL,EAAU;AACV,cAAMS,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcL,GAAd,YAA2BA,GAAG,CAACM,MAA/B,GAA0C,OAAvD;AACAP,UAAAA,QAAQ,CAACQ,IAAT,cAAyBJ,IAAzB,SAAiCT,IAAjC;AACD;AACF;;AACDE,MAAAA,IAAI,4QAAJ;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACY,OAAL,CAAa,aAAb,EAA4BT,QAAQ,CAACU,IAAT,CAAc,IAAd,CAA5B,EAAiDD,OAAjD,CAAyD,WAAzD,EAAsEX,MAAtE,CAAP;AACD;;AAED,UAAMF,IAAN,EAAYC,IAAZ;AACA,QAAIF,GAAJ,EAAS,KAAKgB,WAAL,GAAmBhB,GAAnB;AACT,SAAKI,IAAL,GAAYA,IAAZ;AACD;;AAEDa,EAAAA,KAAK,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACzC,QAAI,KAAKhB,QAAL,CAAciB,UAAlB,EAA8B;AAC5B,WAAKjB,QAAL,CAAciB,UAAd,CAAyB,CAAzB,IAA8BH,KAAK,CAACI,WAAN,CAAkBC,KAAhD;AACA,WAAKnB,QAAL,CAAciB,UAAd,CAAyB,CAAzB,IAA8BH,KAAK,CAACI,WAAN,CAAkBE,MAAhD;AACD;;AACD,UAAMR,KAAN,CAAYC,aAAZ,EAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,KAA1C;AACD;;AAEO,MAAJjB,IAAI,CAACA,IAAD,EAAO;AACb,SAAKsB,KAAL,GAAatB,IAAb;AACA,QAAI,CAACA,IAAL,EAAW;;AACX,SAAK,IAAM,CAACJ,GAAD,EAAMM,GAAN,CAAX,IAAyBC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAAzB,EAA+C;AAC7C,UAAI,CAACJ,GAAL,EAAU;AACV,WAAKK,QAAL,CAAcL,GAAd,IAAqBM,GAArB;AACD;AACF;;AAEO,MAAJF,IAAI,GAAG;AACT,WAAO,KAAKsB,KAAZ;AACD;;AA3C8C","sourcesContent":["import Filter from \"../../renderers/webgl/filters/Filter\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nexport default class SimpleFilter extends Filter {\n  constructor(opt) {\n    let { key, vert, frag, render, vars } = opt || {};\n\n    if (!render) render = `vec4 render(vec4 rgba, vec2 uv) { return rgba; }`;\n    if (!vert) vert = readFileSync(join(__dirname, \"../fragments/default.vert\"), \"utf8\");\n    if (!frag) {\n      const uniforms = [];\n      if (vars) {\n        for (const [key, val] of Object.entries(vars)) {\n          if (!key) continue;\n          const type = Array.isArray(val) ? `vec${val.length}` : 'float';\n          uniforms.push(`uniform ${type} ${key}`);\n        }\n      }\n      frag = readFileSync(join(__dirname, \"./render.frag\"), \"utf8\");\n      frag = frag.replace('${uniforms}', uniforms.join(\"\\n\")).replace('${render}', render);\n    }\n\n    super(vert, frag);\n    if (key) this.glShaderKey = key;\n    this.vars = vars;\n  }\n\n  apply(filterManager, input, output, clear) {\n    if (this.uniforms.uFrameSize) {\n      this.uniforms.uFrameSize[0] = input.sourceFrame.width;\n      this.uniforms.uFrameSize[1] = input.sourceFrame.height;\n    }\n    super.apply(filterManager, input, output, clear);\n  }\n\n  set vars(vars) {\n    this._vars = vars;\n    if (!vars) return;\n    for (const [key, val] of Object.entries(vars)) {\n      if (!key) continue;\n      this.uniforms[key] = val;\n    }\n  }\n\n  get vars() {\n    return this._vars;\n  }\n}\n"],"file":"SimpleFilter.js"}