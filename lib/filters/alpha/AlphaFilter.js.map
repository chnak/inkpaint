{"version":3,"sources":["../../../src/filters/alpha/AlphaFilter.js"],"names":["AlphaFilter","Filter","constructor","alpha","glShaderKey","uniforms","uAlpha","value"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;AACe,MAAMA,WAAN,SAA0BC,eAA1B,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAc;AAAA,QAAbA,KAAa;AAAbA,MAAAA,KAAa,GAAL,GAAK;AAAA;;AACvB,WACE;AADF,2RAGE;AAHF;AAOA,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,WAAL,GAAmB,OAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACW,MAALD,KAAK,GAAG;AACV,WAAO,KAAKE,QAAL,CAAcC,MAArB;AACD;;AAEQ,MAALH,KAAK,CAACI,KAAD,EAAQ;AACf,SAAKF,QAAL,CAAcC,MAAd,GAAuBC,KAAvB;AACD;;AAzB6C","sourcesContent":["import settings from \"../../settings\";\nimport Filter from \"../../renderers/webgl/filters/Filter\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nexport default class AlphaFilter extends Filter {\n  constructor(alpha = 1.0) {\n    super(\n      // vertex shader\n      readFileSync(join(__dirname, \"../fragments/default.vert\"), \"utf8\"),\n      // fragment shader\n      readFileSync(join(__dirname, \"./alpha.frag\"), \"utf8\")\n    );\n\n    this.alpha = alpha;\n    this.glShaderKey = \"alpha\";\n  }\n\n  /**\n   * Coefficient for alpha multiplication\n   *\n   * @member {number}\n   * @default 1\n   */\n  get alpha() {\n    return this.uniforms.uAlpha;\n  }\n\n  set alpha(value) {\n    this.uniforms.uAlpha = value;\n  }\n}\n"],"file":"AlphaFilter.js"}