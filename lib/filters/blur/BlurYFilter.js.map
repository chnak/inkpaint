{"version":3,"sources":["../../../src/filters/blur/BlurYFilter.js"],"names":["BlurYFilter","Filter","constructor","strength","quality","resolution","kernelSize","vertSrc","fragSrc","settings","RESOLUTION","_quality","firstRun","apply","filterManager","input","output","clear","gl","renderer","vertexSrc","fragmentSrc","uniforms","size","height","passes","applyFilter","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","blur","value","padding","Math","abs"],"mappings":"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","sourcesContent":["import * as settings from \"../../settings\";\nimport Filter from \"../../renderers/webgl/filters/Filter\";\nimport generateBlurVertSource from \"./generateBlurVertSource\";\nimport generateBlurFragSource from \"./generateBlurFragSource\";\nimport getMaxBlurKernelSize from \"./getMaxBlurKernelSize\";\n\nexport default class BlurYFilter extends Filter {\n  constructor(strength, quality, resolution, kernelSize) {\n    kernelSize = kernelSize || 5;\n    const vertSrc = generateBlurVertSource(kernelSize, false);\n    const fragSrc = generateBlurFragSource(kernelSize);\n\n    super(\n      // vertex shader\n      vertSrc,\n      // fragment shader\n      fragSrc\n    );\n\n    this.resolution = resolution || settings.RESOLUTION;\n\n    this._quality = 0;\n\n    this.quality = quality || 4;\n    this.strength = strength || 8;\n\n    this.firstRun = true;\n  }\n\n  apply(filterManager, input, output, clear) {\n    if (this.firstRun) {\n      const gl = filterManager.renderer.gl;\n      const kernelSize = getMaxBlurKernelSize(gl);\n\n      this.vertexSrc = generateBlurVertSource(kernelSize, false);\n      this.fragmentSrc = generateBlurFragSource(kernelSize);\n\n      this.firstRun = false;\n    }\n\n    this.uniforms.strength =\n      (1 / output.size.height) * (output.size.height / input.size.height);\n\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clear);\n    } else {\n      const renderTarget = filterManager.getRenderTarget(true);\n      let flip = input;\n      let flop = renderTarget;\n\n      for (let i = 0; i < this.passes - 1; i++) {\n        filterManager.applyFilter(this, flip, flop, true);\n\n        const temp = flop;\n\n        flop = flip;\n        flip = temp;\n      }\n\n      filterManager.applyFilter(this, flip, output, clear);\n\n      filterManager.returnRenderTarget(renderTarget);\n    }\n  }\n\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @default 2\n   */\n  get blur() {\n    return this.strength;\n  }\n\n  set blur(value) {\n    this.padding = Math.abs(value) * 2;\n    this.strength = value;\n  }\n\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quaility bluring but the lower the performance.\n   *\n   * @member {number}\n   * @default 4\n   */\n  get quality() {\n    return this._quality;\n  }\n\n  set quality(value) {\n    this._quality = value;\n    this.passes = value;\n  }\n}\n"],"file":"BlurYFilter.js"}