{"version":3,"sources":["../../src/textures/Texture.js"],"names":["Texture","EventEmitter","constructor","baseTexture","frame","orig","trim","rotate","anchor","hasDefaultFrame","Rectangle","_uvs","_cache","valid","destroyed","requiresUpdate","cutout","cutoutColors","_frame","_rotate","Number","_updateID","transform","textureCacheIds","Error","id","initBaseTexture","defaultAnchor","Point","x","y","setCutoutToBaseTexture","addToCache","imageUrl","hasLoaded","width","height","on","onBaseTextureUpdated","adaptedNodeCanvas","once","onBaseTextureLoaded","onBaseTextureError","update","indexOf","push","updateSource","useCache","BaseTexture","fromImage","setCutoutColor","min","max","getImageUrl","emit","e","destroy","destroyBase","TextureCache","i","length","urlKey","off","clone","_updateUvs","TextureUvs","set","xNotFit","yNotFit","relationship","errorX","errorY","newEmpty","crossorigin","scaleMode","sourceScale","texture","fromFrame","frameId","fromCanvas","canvas","origin","from","source","HTMLImageElement","HTMLCanvasElement","settings","SCALE_MODE","fromLoader","name","undefined","removeAllHandlers","tex","EMPTY"],"mappings":"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","sourcesContent":["import BaseTexture from \"./BaseTexture\";\nimport settings from \"../settings\";\nimport TextureUvs from \"./TextureUvs\";\nimport EventEmitter from \"eventemitter3\";\nimport { Rectangle, Point } from \"../math\";\nimport { getResolutionOfUrl, uuidvx } from \"../utils\";\nimport {\n  TextureCache,\n  addToTextureCache,\n  removeFromTextureCache,\n  addToBaseTextureCache,\n  destroyBaseTextureCache\n} from \"../utils/cache\";\n\nexport default class Texture extends EventEmitter {\n  constructor(baseTexture, frame, orig, trim, rotate, anchor) {\n    super();\n\n    if (frame) {\n      this.hasDefaultFrame = true;\n    } else {\n      this.hasDefaultFrame = false;\n      frame = new Rectangle(0, 0, 1, 1);\n    }\n\n    this._uvs = null;\n    this._cache = [];\n    this.valid = false;\n    this.destroyed = false;\n    this.requiresUpdate = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n\n    this.trim = trim;\n    this.orig = orig || frame;\n    this._frame = frame;\n    this._rotate = Number(rotate || 0);\n    this._updateID = 0;\n    this.transform = null;\n    this.textureCacheIds = [];\n\n    if (rotate === true) {\n      this._rotate = 2;\n    } else if (this._rotate % 2 !== 0) {\n      throw new Error(\"attempt to use diamond-shaped UVs.\");\n    }\n\n    this.id = uuidvx();\n    this.initBaseTexture(baseTexture, frame);\n    this.defaultAnchor = anchor\n      ? new Point(anchor.x, anchor.y)\n      : new Point(0, 0);\n  }\n\n  initBaseTexture(baseTexture, frame) {\n    if (baseTexture instanceof Texture) baseTexture = baseTexture.baseTexture;\n\n    this.baseTexture = baseTexture;\n    this.setCutoutToBaseTexture();\n    this.addToCache(baseTexture.imageUrl);\n\n    if (baseTexture.hasLoaded) {\n      if (!this.hasDefaultFrame) {\n        // from 1,1 -> w,h\n        const { width, height } = baseTexture;\n        this.frame = new Rectangle(0, 0, width, height);\n        baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n      } else {\n        this.frame = frame;\n      }\n\n      baseTexture.adaptedNodeCanvas();\n    } else {\n      baseTexture.once(\"loaded\", this.onBaseTextureLoaded, this);\n    }\n\n    baseTexture.on(\"error\", this.onBaseTextureError, this);\n  }\n\n  update() {\n    this.baseTexture.update();\n  }\n\n  addToCache(imageUrl) {\n    if (!imageUrl) return;\n    if (this._cache.indexOf(imageUrl) < 0) this._cache.push(imageUrl);\n  }\n\n  updateSource(imageUrl, useCache = false) {\n    if (this.baseTexture.imageUrl === imageUrl) return;\n\n    if (useCache) {\n      this.addToCache(imageUrl);\n      this.baseTexture = BaseTexture.fromImage(imageUrl);\n      this.setCutoutToBaseTexture();\n      this.baseTexture.adaptedNodeCanvas();\n    } else {\n      this.baseTexture.updateSource(imageUrl);\n    }\n  }\n\n  setCutoutColor(min, max) {\n    this.cutout = true;\n    this.cutoutColors = { min, max };\n    this.setCutoutToBaseTexture();\n  }\n\n  setCutoutToBaseTexture() {\n    if (!this.baseTexture) return;\n\n    this.baseTexture.cutout = this.cutout;\n    this.baseTexture.cutoutColors = this.cutoutColors;\n  }\n\n  getImageUrl() {\n    return this.baseTexture.imageUrl;\n  }\n\n  onBaseTextureLoaded(baseTexture) {\n    this._updateID++;\n\n    if (!this.hasDefaultFrame) {\n      // from 1,1 -> w,h\n      const { width, height } = baseTexture;\n      this.frame = new Rectangle(0, 0, width, height);\n    } else {\n      this.frame = this._frame;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n    this.emit(\"update\", this);\n  }\n\n  onBaseTextureError(e) {\n    this.emit(\"error\", e);\n  }\n\n  onBaseTextureUpdated(baseTexture) {\n    this._updateID++;\n    if (!this.hasDefaultFrame) {\n      this._frame.width = baseTexture.width;\n      this._frame.height = baseTexture.height;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.emit(\"update\", this);\n  }\n\n  destroy(destroyBase) {\n    if (this.destroyed) return;\n\n    if (this.baseTexture) {\n      if (destroyBase) {\n        const { imageUrl } = this.baseTexture;\n        if (TextureCache[imageUrl]) {\n          removeFromTextureCache(imageUrl);\n        }\n\n        for (let i = 0; i < this._cache.length; i++) {\n          const urlKey = this._cache[i];\n          destroyBaseTextureCache(urlKey);\n        }\n        this.baseTexture.destroy();\n      }\n\n      this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this);\n      this.baseTexture.off(\"loaded\", this.onBaseTextureLoaded, this);\n      this.baseTexture.off(\"error\", this.onBaseTextureError, this);\n      this.baseTexture = null;\n    }\n\n    this._cache.length = 0;\n    this._cache = null;\n    this._frame = null;\n    this._uvs = null;\n    this.trim = null;\n    this.orig = null;\n    this.valid = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n    this.destroyed = true;\n\n    removeFromTextureCache(this);\n    this.textureCacheIds = null;\n  }\n\n  clone() {\n    return new Texture(\n      this.baseTexture,\n      this.frame,\n      this.orig,\n      this.trim,\n      this.rotate,\n      this.defaultAnchor\n    );\n  }\n\n  _updateUvs() {\n    if (!this._uvs) this._uvs = new TextureUvs();\n    this._uvs.set(this._frame, this.baseTexture, this.rotate);\n    this._updateID++;\n  }\n\n  get frame() {\n    return this._frame;\n  }\n\n  set frame(frame) {\n    this._frame = frame;\n    this.hasDefaultFrame = true;\n    const { x, y, width, height } = frame;\n    const xNotFit = x + width > this.baseTexture.width;\n    const yNotFit = y + height > this.baseTexture.height;\n\n    if (xNotFit || yNotFit) {\n      const relationship = xNotFit && yNotFit ? \"and\" : \"or\";\n      const errorX = `X: ${x} + ${width} = ${x + width} > ${\n        this.baseTexture.width\n      }`;\n      const errorY = `Y: ${y} + ${height} = ${y + height} > ${\n        this.baseTexture.height\n      }`;\n\n      throw new Error(\n        \"Texture Error: frame does not fit inside the base Texture dimensions: \" +\n          `${errorX} ${relationship} ${errorY}`\n      );\n    }\n\n    this.valid = width && height && this.baseTexture.hasLoaded;\n    if (!this.trim && !this.rotate) {\n      this.orig = frame;\n    }\n\n    if (this.valid) this._updateUvs();\n  }\n\n  get rotate() {\n    return this._rotate;\n  }\n\n  set rotate(rotate) {\n    this._rotate = rotate;\n    if (this.valid) this._updateUvs();\n  }\n\n  get width() {\n    return this.orig.width;\n  }\n\n  get height() {\n    return this.orig.height;\n  }\n\n  static newEmpty() {\n    return new Texture(new BaseTexture());\n  }\n\n  static fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    let texture = TextureCache[imageUrl];\n    if (texture) return texture;\n\n    if (crossorigin instanceof Rectangle) {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl),\n        crossorigin,\n        scaleMode,\n        sourceScale\n      );\n    } else {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n      );\n    }\n\n    addToTextureCache(texture, imageUrl);\n    return texture;\n  }\n\n  static fromFrame(frameId) {\n    const texture = TextureCache[frameId];\n    if (!texture) {\n      throw new Error(`The frameId \"${frameId}\" does not exist in cache`);\n    }\n\n    return texture;\n  }\n\n  static fromCanvas(canvas, scaleMode, origin = \"canvas\") {\n    return new Texture(BaseTexture.fromCanvas(canvas, scaleMode, origin));\n  }\n\n  static from(source) {\n    if (typeof source === \"string\") {\n      const texture = TextureCache[source];\n      if (texture) return texture;\n      return Texture.fromImage(source);\n    } else if (source instanceof Texture) {\n      return source;\n    } else if (source instanceof HTMLImageElement) {\n      return new Texture(BaseTexture.from(source));\n    } else if (source instanceof HTMLCanvasElement) {\n      return Texture.fromCanvas(\n        source,\n        settings.SCALE_MODE,\n        \"HTMLCanvasElement\"\n      );\n    } else if (source instanceof BaseTexture) {\n      return new Texture(source);\n    }\n\n    return source;\n  }\n\n  static fromLoader(source, imageUrl, name) {\n    const baseTexture = new BaseTexture(\n      source,\n      undefined,\n      getResolutionOfUrl(imageUrl)\n    );\n\n    const texture = new Texture(baseTexture);\n    baseTexture.imageUrl = imageUrl;\n    if (!name) name = imageUrl;\n\n    addToBaseTextureCache(texture.baseTexture, name);\n    addToTextureCache(texture, name);\n\n    if (name !== imageUrl) {\n      addToBaseTextureCache(texture.baseTexture, imageUrl);\n      addToTextureCache(texture, imageUrl);\n    }\n    return texture;\n  }\n}\n\nfunction removeAllHandlers(tex) {\n  tex.destroy = () => {};\n  tex.on = () => {};\n  tex.once = () => {};\n  tex.emit = () => {};\n}\n\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n"],"file":"Texture.js"}