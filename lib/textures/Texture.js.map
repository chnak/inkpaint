{"version":3,"sources":["../../src/textures/Texture.js"],"names":["Texture","EventEmitter","constructor","baseTexture","frame","orig","trim","rotate","anchor","hasDefaultFrame","Rectangle","_uvs","_cache","valid","destroyed","requiresUpdate","cutout","cutoutColors","_frame","_rotate","Number","_updateID","transform","textureCacheIds","Error","id","initBaseTexture","defaultAnchor","Point","x","y","addToCache","imageUrl","hasLoaded","width","height","on","onBaseTextureUpdated","adaptedNodeCanvas","once","onBaseTextureLoaded","onBaseTextureError","update","indexOf","push","updateSource","useCache","BaseTexture","fromImage","getImageUrl","emit","e","destroy","destroyBase","TextureCache","i","length","urlKey","off","clone","_updateUvs","TextureUvs","set","xNotFit","yNotFit","relationship","errorX","errorY","newEmpty","crossorigin","scaleMode","sourceScale","texture","fromFrame","frameId","fromCanvas","canvas","origin","from","source","HTMLImageElement","HTMLCanvasElement","settings","SCALE_MODE","fromLoader","name","undefined","removeAllHandlers","tex","EMPTY"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAQe,MAAMA,OAAN,SAAsBC,qBAAtB,CAAmC;AAChDC,EAAAA,WAAW,CAACC,WAAD,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiD;AAC1D;;AAEA,QAAIJ,KAAJ,EAAW;AACT,WAAKK,eAAL,GAAuB,IAAvB;AACD,KAFD,MAEO;AACL,WAAKA,eAAL,GAAuB,KAAvB;AACAL,MAAAA,KAAK,GAAG,IAAIM,eAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAR;AACD;;AAED,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,YAAL,GAAoB,IAApB;AAEA,SAAKX,IAAL,GAAYA,IAAZ;AACA,SAAKD,IAAL,GAAYA,IAAI,IAAID,KAApB;AACA,SAAKc,MAAL,GAAcd,KAAd;AACA,SAAKe,OAAL,GAAeC,MAAM,CAACb,MAAM,IAAI,CAAX,CAArB;AACA,SAAKc,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AAEA,QAAIhB,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAKY,OAAL,GAAe,CAAf;AACD,KAFD,MAEO,IAAI,KAAKA,OAAL,GAAe,CAAf,KAAqB,CAAzB,EAA4B;AACjC,YAAM,IAAIK,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,SAAKC,EAAL,GAAU,oBAAV;AACA,SAAKC,eAAL,CAAqBvB,WAArB,EAAkCC,KAAlC;AACA,SAAKuB,aAAL,GAAqBnB,MAAM,GACvB,IAAIoB,WAAJ,CAAUpB,MAAM,CAACqB,CAAjB,EAAoBrB,MAAM,CAACsB,CAA3B,CADuB,GAEvB,IAAIF,WAAJ,CAAU,CAAV,EAAa,CAAb,CAFJ;AAGD;;AAEDF,EAAAA,eAAe,CAACvB,WAAD,EAAcC,KAAd,EAAqB;AAClC,QAAID,WAAW,YAAYH,OAA3B,EAAoCG,WAAW,GAAGA,WAAW,CAACA,WAA1B;AAEpC,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAK4B,UAAL,CAAgB5B,WAAW,CAAC6B,QAA5B;;AAEA,QAAI7B,WAAW,CAAC8B,SAAhB,EAA2B;AACzB,UAAI,CAAC,KAAKxB,eAAV,EAA2B;AACzB;AACA,YAAM;AAAEyB,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAoBhC,WAA1B;AACA,aAAKC,KAAL,GAAa,IAAIM,eAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBwB,KAApB,EAA2BC,MAA3B,CAAb;AACAhC,QAAAA,WAAW,CAACiC,EAAZ,CAAe,QAAf,EAAyB,KAAKC,oBAA9B,EAAoD,IAApD;AACD,OALD,MAKO;AACL,aAAKjC,KAAL,GAAaA,KAAb;AACD;;AAEDD,MAAAA,WAAW,CAACmC,iBAAZ;AACD,KAXD,MAWO;AACLnC,MAAAA,WAAW,CAACoC,IAAZ,CAAiB,QAAjB,EAA2B,KAAKC,mBAAhC,EAAqD,IAArD;AACD;;AAEDrC,IAAAA,WAAW,CAACiC,EAAZ,CAAe,OAAf,EAAwB,KAAKK,kBAA7B,EAAiD,IAAjD;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKvC,WAAL,CAAiBuC,MAAjB;AACD;;AAEDX,EAAAA,UAAU,CAACC,QAAD,EAAW;AACnB,QAAI,CAACA,QAAL,EAAe;AACf,QAAI,KAAKpB,MAAL,CAAY+B,OAAZ,CAAoBX,QAApB,IAAgC,CAApC,EAAuC,KAAKpB,MAAL,CAAYgC,IAAZ,CAAiBZ,QAAjB;AACxC;;AAEDa,EAAAA,YAAY,CAACb,QAAD,EAAWc,QAAX,EAA6B;AAAA,QAAlBA,QAAkB;AAAlBA,MAAAA,QAAkB,GAAP,KAAO;AAAA;;AACvC,QAAI,KAAK3C,WAAL,CAAiB6B,QAAjB,KAA8BA,QAAlC,EAA4C;;AAE5C,QAAIc,QAAJ,EAAc;AACZ,WAAKf,UAAL,CAAgBC,QAAhB;AACA,WAAK7B,WAAL,GAAmB4C,qBAAYC,SAAZ,CAAsBhB,QAAtB,CAAnB;AACA,WAAK7B,WAAL,CAAiBmC,iBAAjB;AACD,KAJD,MAIO;AACL,WAAKnC,WAAL,CAAiB0C,YAAjB,CAA8Bb,QAA9B;AACD;AACF;;AAEDiB,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAK9C,WAAL,CAAiB6B,QAAxB;AACD;;AAEDQ,EAAAA,mBAAmB,CAACrC,WAAD,EAAc;AAC/B,SAAKkB,SAAL;;AAEA,QAAI,CAAC,KAAKZ,eAAV,EAA2B;AACzB;AACA,UAAM;AAAEyB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBhC,WAA1B;AACA,WAAKC,KAAL,GAAa,IAAIM,eAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBwB,KAApB,EAA2BC,MAA3B,CAAb;AACD,KAJD,MAIO;AACL,WAAK/B,KAAL,GAAa,KAAKc,MAAlB;AACD;;AAEDf,IAAAA,WAAW,CAACmC,iBAAZ;AACA,SAAKnC,WAAL,CAAiBiC,EAAjB,CAAoB,QAApB,EAA8B,KAAKC,oBAAnC,EAAyD,IAAzD;AACA,SAAKa,IAAL,CAAU,QAAV,EAAoB,IAApB;AACD;;AAEDT,EAAAA,kBAAkB,CAACU,CAAD,EAAI;AACpB,SAAKD,IAAL,CAAU,OAAV,EAAmBC,CAAnB;AACD;;AAEDd,EAAAA,oBAAoB,CAAClC,WAAD,EAAc;AAChC,SAAKkB,SAAL;;AACA,QAAI,CAAC,KAAKZ,eAAV,EAA2B;AACzB,WAAKS,MAAL,CAAYgB,KAAZ,GAAoB/B,WAAW,CAAC+B,KAAhC;AACA,WAAKhB,MAAL,CAAYiB,MAAZ,GAAqBhC,WAAW,CAACgC,MAAjC;AACD;;AAEDhC,IAAAA,WAAW,CAACmC,iBAAZ;AACA,SAAKY,IAAL,CAAU,QAAV,EAAoB,IAApB;AACD;;AAEDE,EAAAA,OAAO,CAACC,WAAD,EAAc;AACnB,QAAI,KAAKvC,SAAT,EAAoB;;AAEpB,QAAI,KAAKX,WAAT,EAAsB;AACpB,UAAIkD,WAAJ,EAAiB;AACf,YAAM;AAAErB,UAAAA;AAAF,YAAe,KAAK7B,WAA1B;;AACA,YAAImD,oBAAatB,QAAb,CAAJ,EAA4B;AAC1B,6CAAuBA,QAAvB;AACD;;AAED,aAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3C,MAAL,CAAY4C,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,cAAME,MAAM,GAAG,KAAK7C,MAAL,CAAY2C,CAAZ,CAAf;AACA,8CAAwBE,MAAxB;AACD;;AACD,aAAKtD,WAAL,CAAiBiD,OAAjB;AACD;;AAED,WAAKjD,WAAL,CAAiBuD,GAAjB,CAAqB,QAArB,EAA+B,KAAKrB,oBAApC,EAA0D,IAA1D;AACA,WAAKlC,WAAL,CAAiBuD,GAAjB,CAAqB,QAArB,EAA+B,KAAKlB,mBAApC,EAAyD,IAAzD;AACA,WAAKrC,WAAL,CAAiBuD,GAAjB,CAAqB,OAArB,EAA8B,KAAKjB,kBAAnC,EAAuD,IAAvD;AACA,WAAKtC,WAAL,GAAmB,IAAnB;AACD;;AAED,SAAKS,MAAL,CAAY4C,MAAZ,GAAqB,CAArB;AACA,SAAK5C,MAAL,GAAc,IAAd;AACA,SAAKM,MAAL,GAAc,IAAd;AACA,SAAKP,IAAL,GAAY,IAAZ;AACA,SAAKL,IAAL,GAAY,IAAZ;AACA,SAAKD,IAAL,GAAY,IAAZ;AACA,SAAKQ,KAAL,GAAa,KAAb;AACA,SAAKG,MAAL,GAAc,KAAd;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKH,SAAL,GAAiB,IAAjB;AAEA,uCAAuB,IAAvB;AACA,SAAKS,eAAL,GAAuB,IAAvB;AACD;;AAEDoC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAI3D,OAAJ,CACL,KAAKG,WADA,EAEL,KAAKC,KAFA,EAGL,KAAKC,IAHA,EAIL,KAAKC,IAJA,EAKL,KAAKC,MALA,EAML,KAAKoB,aANA,CAAP;AAQD;;AAEDiC,EAAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAKjD,IAAV,EAAgB,KAAKA,IAAL,GAAY,IAAIkD,mBAAJ,EAAZ;;AAChB,SAAKlD,IAAL,CAAUmD,GAAV,CAAc,KAAK5C,MAAnB,EAA2B,KAAKf,WAAhC,EAA6C,KAAKI,MAAlD;;AACA,SAAKc,SAAL;AACD;;AAEQ,MAALjB,KAAK,GAAG;AACV,WAAO,KAAKc,MAAZ;AACD;;AAEQ,MAALd,KAAK,CAACA,KAAD,EAAQ;AACf,SAAKc,MAAL,GAAcd,KAAd;AACA,SAAKK,eAAL,GAAuB,IAAvB;AACA,QAAM;AAAEoB,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQI,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA0B/B,KAAhC;AACA,QAAM2D,OAAO,GAAGlC,CAAC,GAAGK,KAAJ,GAAY,KAAK/B,WAAL,CAAiB+B,KAA7C;AACA,QAAM8B,OAAO,GAAGlC,CAAC,GAAGK,MAAJ,GAAa,KAAKhC,WAAL,CAAiBgC,MAA9C;;AAEA,QAAI4B,OAAO,IAAIC,OAAf,EAAwB;AACtB,UAAMC,YAAY,GAAGF,OAAO,IAAIC,OAAX,GAAqB,KAArB,GAA6B,IAAlD;AACA,UAAME,MAAM,WAASrC,CAAT,WAAgBK,KAAhB,YAA2BL,CAAC,GAAGK,KAA/B,YACV,KAAK/B,WAAL,CAAiB+B,KADnB;AAGA,UAAMiC,MAAM,WAASrC,CAAT,WAAgBK,MAAhB,YAA4BL,CAAC,GAAGK,MAAhC,YACV,KAAKhC,WAAL,CAAiBgC,MADnB;AAIA,YAAM,IAAIX,KAAJ,CACJ,4EACK0C,MADL,SACeD,YADf,SAC+BE,MAD/B,CADI,CAAN;AAID;;AAED,SAAKtD,KAAL,GAAaqB,KAAK,IAAIC,MAAT,IAAmB,KAAKhC,WAAL,CAAiB8B,SAAjD;;AACA,QAAI,CAAC,KAAK3B,IAAN,IAAc,CAAC,KAAKC,MAAxB,EAAgC;AAC9B,WAAKF,IAAL,GAAYD,KAAZ;AACD;;AAED,QAAI,KAAKS,KAAT,EAAgB,KAAK+C,UAAL;AACjB;;AAES,MAANrD,MAAM,GAAG;AACX,WAAO,KAAKY,OAAZ;AACD;;AAES,MAANZ,MAAM,CAACA,MAAD,EAAS;AACjB,SAAKY,OAAL,GAAeZ,MAAf;AACA,QAAI,KAAKM,KAAT,EAAgB,KAAK+C,UAAL;AACjB;;AAEQ,MAAL1B,KAAK,GAAG;AACV,WAAO,KAAK7B,IAAL,CAAU6B,KAAjB;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO,KAAK9B,IAAL,CAAU8B,MAAjB;AACD;;AAEc,SAARiC,QAAQ,GAAG;AAChB,WAAO,IAAIpE,OAAJ,CAAY,IAAI+C,oBAAJ,EAAZ,CAAP;AACD;;AAEe,SAATC,SAAS,CAAChB,QAAD,EAAWqC,WAAX,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgD;AAC9D,QAAIC,OAAO,GAAGlB,oBAAatB,QAAb,CAAd;AACA,QAAIwC,OAAJ,EAAa,OAAOA,OAAP;;AAEb,QAAIH,WAAW,YAAY3D,eAA3B,EAAsC;AACpC8D,MAAAA,OAAO,GAAG,IAAIxE,OAAJ,CACR+C,qBAAYC,SAAZ,CAAsBhB,QAAtB,CADQ,EAERqC,WAFQ,EAGRC,SAHQ,EAIRC,WAJQ,CAAV;AAMD,KAPD,MAOO;AACLC,MAAAA,OAAO,GAAG,IAAIxE,OAAJ,CACR+C,qBAAYC,SAAZ,CAAsBhB,QAAtB,EAAgCqC,WAAhC,EAA6CC,SAA7C,EAAwDC,WAAxD,CADQ,CAAV;AAGD;;AAED,kCAAkBC,OAAlB,EAA2BxC,QAA3B;AACA,WAAOwC,OAAP;AACD;;AAEe,SAATC,SAAS,CAACC,OAAD,EAAU;AACxB,QAAMF,OAAO,GAAGlB,oBAAaoB,OAAb,CAAhB;;AACA,QAAI,CAACF,OAAL,EAAc;AACZ,YAAM,IAAIhD,KAAJ,oBAA0BkD,OAA1B,gCAAN;AACD;;AAED,WAAOF,OAAP;AACD;;AAEgB,SAAVG,UAAU,CAACC,MAAD,EAASN,SAAT,EAAoBO,MAApB,EAAuC;AAAA,QAAnBA,MAAmB;AAAnBA,MAAAA,MAAmB,GAAV,QAAU;AAAA;;AACtD,WAAO,IAAI7E,OAAJ,CAAY+C,qBAAY4B,UAAZ,CAAuBC,MAAvB,EAA+BN,SAA/B,EAA0CO,MAA1C,CAAZ,CAAP;AACD;;AAEU,SAAJC,IAAI,CAACC,MAAD,EAAS;AAClB,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAMP,OAAO,GAAGlB,oBAAayB,MAAb,CAAhB;AACA,UAAIP,OAAJ,EAAa,OAAOA,OAAP;AACb,aAAOxE,OAAO,CAACgD,SAAR,CAAkB+B,MAAlB,CAAP;AACD,KAJD,MAIO,IAAIA,MAAM,YAAY/E,OAAtB,EAA+B;AACpC,aAAO+E,MAAP;AACD,KAFM,MAEA,IAAIA,MAAM,YAAYC,gBAAtB,EAAwC;AAC7C,aAAO,IAAIhF,OAAJ,CAAY+C,qBAAY+B,IAAZ,CAAiBC,MAAjB,CAAZ,CAAP;AACD,KAFM,MAEA,IAAIA,MAAM,YAAYE,iBAAtB,EAAyC;AAC9C,aAAOjF,OAAO,CAAC2E,UAAR,CACLI,MADK,EAELG,kBAASC,UAFJ,EAGL,mBAHK,CAAP;AAKD,KANM,MAMA,IAAIJ,MAAM,YAAYhC,oBAAtB,EAAmC;AACxC,aAAO,IAAI/C,OAAJ,CAAY+E,MAAZ,CAAP;AACD;;AAED,WAAOA,MAAP;AACD;;AAEgB,SAAVK,UAAU,CAACL,MAAD,EAAS/C,QAAT,EAAmBqD,IAAnB,EAAyB;AACxC,QAAMlF,WAAW,GAAG,IAAI4C,oBAAJ,CAClBgC,MADkB,EAElBO,SAFkB,EAGlB,+BAAmBtD,QAAnB,CAHkB,CAApB;AAMA,QAAMwC,OAAO,GAAG,IAAIxE,OAAJ,CAAYG,WAAZ,CAAhB;AACAA,IAAAA,WAAW,CAAC6B,QAAZ,GAAuBA,QAAvB;AACA,QAAI,CAACqD,IAAL,EAAWA,IAAI,GAAGrD,QAAP;AAEX,sCAAsBwC,OAAO,CAACrE,WAA9B,EAA2CkF,IAA3C;AACA,kCAAkBb,OAAlB,EAA2Ba,IAA3B;;AAEA,QAAIA,IAAI,KAAKrD,QAAb,EAAuB;AACrB,wCAAsBwC,OAAO,CAACrE,WAA9B,EAA2C6B,QAA3C;AACA,oCAAkBwC,OAAlB,EAA2BxC,QAA3B;AACD;;AACD,WAAOwC,OAAP;AACD;;AAjT+C;;;;AAoTlD,SAASe,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9BA,EAAAA,GAAG,CAACpC,OAAJ,GAAc,MAAM,CAAE,CAAtB;;AACAoC,EAAAA,GAAG,CAACpD,EAAJ,GAAS,MAAM,CAAE,CAAjB;;AACAoD,EAAAA,GAAG,CAACjD,IAAJ,GAAW,MAAM,CAAE,CAAnB;;AACAiD,EAAAA,GAAG,CAACtC,IAAJ,GAAW,MAAM,CAAE,CAAnB;AACD;;AAEDlD,OAAO,CAACyF,KAAR,GAAgB,IAAIzF,OAAJ,CAAY,IAAI+C,oBAAJ,EAAZ,CAAhB;AACAwC,iBAAiB,CAACvF,OAAO,CAACyF,KAAT,CAAjB;AACAF,iBAAiB,CAACvF,OAAO,CAACyF,KAAR,CAActF,WAAf,CAAjB","sourcesContent":["import BaseTexture from \"./BaseTexture\";\nimport settings from \"../settings\";\nimport TextureUvs from \"./TextureUvs\";\nimport EventEmitter from \"eventemitter3\";\nimport { Rectangle, Point } from \"../math\";\nimport { getResolutionOfUrl, uuidvx } from \"../utils\";\nimport {\n  TextureCache,\n  addToTextureCache,\n  removeFromTextureCache,\n  addToBaseTextureCache,\n  destroyBaseTextureCache\n} from \"../utils/cache\";\n\nexport default class Texture extends EventEmitter {\n  constructor(baseTexture, frame, orig, trim, rotate, anchor) {\n    super();\n\n    if (frame) {\n      this.hasDefaultFrame = true;\n    } else {\n      this.hasDefaultFrame = false;\n      frame = new Rectangle(0, 0, 1, 1);\n    }\n\n    this._uvs = null;\n    this._cache = [];\n    this.valid = false;\n    this.destroyed = false;\n    this.requiresUpdate = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n\n    this.trim = trim;\n    this.orig = orig || frame;\n    this._frame = frame;\n    this._rotate = Number(rotate || 0);\n    this._updateID = 0;\n    this.transform = null;\n    this.textureCacheIds = [];\n\n    if (rotate === true) {\n      this._rotate = 2;\n    } else if (this._rotate % 2 !== 0) {\n      throw new Error(\"attempt to use diamond-shaped UVs.\");\n    }\n\n    this.id = uuidvx();\n    this.initBaseTexture(baseTexture, frame);\n    this.defaultAnchor = anchor\n      ? new Point(anchor.x, anchor.y)\n      : new Point(0, 0);\n  }\n\n  initBaseTexture(baseTexture, frame) {\n    if (baseTexture instanceof Texture) baseTexture = baseTexture.baseTexture;\n\n    this.baseTexture = baseTexture;\n    this.addToCache(baseTexture.imageUrl);\n\n    if (baseTexture.hasLoaded) {\n      if (!this.hasDefaultFrame) {\n        // from 1,1 -> w,h\n        const { width, height } = baseTexture;\n        this.frame = new Rectangle(0, 0, width, height);\n        baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n      } else {\n        this.frame = frame;\n      }\n\n      baseTexture.adaptedNodeCanvas();\n    } else {\n      baseTexture.once(\"loaded\", this.onBaseTextureLoaded, this);\n    }\n\n    baseTexture.on(\"error\", this.onBaseTextureError, this);\n  }\n\n  update() {\n    this.baseTexture.update();\n  }\n\n  addToCache(imageUrl) {\n    if (!imageUrl) return;\n    if (this._cache.indexOf(imageUrl) < 0) this._cache.push(imageUrl);\n  }\n\n  updateSource(imageUrl, useCache = false) {\n    if (this.baseTexture.imageUrl === imageUrl) return;\n\n    if (useCache) {\n      this.addToCache(imageUrl);\n      this.baseTexture = BaseTexture.fromImage(imageUrl);\n      this.baseTexture.adaptedNodeCanvas();\n    } else {\n      this.baseTexture.updateSource(imageUrl);\n    }\n  }\n\n  getImageUrl() {\n    return this.baseTexture.imageUrl;\n  }\n\n  onBaseTextureLoaded(baseTexture) {\n    this._updateID++;\n\n    if (!this.hasDefaultFrame) {\n      // from 1,1 -> w,h\n      const { width, height } = baseTexture;\n      this.frame = new Rectangle(0, 0, width, height);\n    } else {\n      this.frame = this._frame;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n    this.emit(\"update\", this);\n  }\n\n  onBaseTextureError(e) {\n    this.emit(\"error\", e);\n  }\n\n  onBaseTextureUpdated(baseTexture) {\n    this._updateID++;\n    if (!this.hasDefaultFrame) {\n      this._frame.width = baseTexture.width;\n      this._frame.height = baseTexture.height;\n    }\n\n    baseTexture.adaptedNodeCanvas();\n    this.emit(\"update\", this);\n  }\n\n  destroy(destroyBase) {\n    if (this.destroyed) return;\n\n    if (this.baseTexture) {\n      if (destroyBase) {\n        const { imageUrl } = this.baseTexture;\n        if (TextureCache[imageUrl]) {\n          removeFromTextureCache(imageUrl);\n        }\n\n        for (let i = 0; i < this._cache.length; i++) {\n          const urlKey = this._cache[i];\n          destroyBaseTextureCache(urlKey);\n        }\n        this.baseTexture.destroy();\n      }\n\n      this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this);\n      this.baseTexture.off(\"loaded\", this.onBaseTextureLoaded, this);\n      this.baseTexture.off(\"error\", this.onBaseTextureError, this);\n      this.baseTexture = null;\n    }\n\n    this._cache.length = 0;\n    this._cache = null;\n    this._frame = null;\n    this._uvs = null;\n    this.trim = null;\n    this.orig = null;\n    this.valid = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n    this.destroyed = true;\n\n    removeFromTextureCache(this);\n    this.textureCacheIds = null;\n  }\n\n  clone() {\n    return new Texture(\n      this.baseTexture,\n      this.frame,\n      this.orig,\n      this.trim,\n      this.rotate,\n      this.defaultAnchor\n    );\n  }\n\n  _updateUvs() {\n    if (!this._uvs) this._uvs = new TextureUvs();\n    this._uvs.set(this._frame, this.baseTexture, this.rotate);\n    this._updateID++;\n  }\n\n  get frame() {\n    return this._frame;\n  }\n\n  set frame(frame) {\n    this._frame = frame;\n    this.hasDefaultFrame = true;\n    const { x, y, width, height } = frame;\n    const xNotFit = x + width > this.baseTexture.width;\n    const yNotFit = y + height > this.baseTexture.height;\n\n    if (xNotFit || yNotFit) {\n      const relationship = xNotFit && yNotFit ? \"and\" : \"or\";\n      const errorX = `X: ${x} + ${width} = ${x + width} > ${\n        this.baseTexture.width\n      }`;\n      const errorY = `Y: ${y} + ${height} = ${y + height} > ${\n        this.baseTexture.height\n      }`;\n\n      throw new Error(\n        \"Texture Error: frame does not fit inside the base Texture dimensions: \" +\n          `${errorX} ${relationship} ${errorY}`\n      );\n    }\n\n    this.valid = width && height && this.baseTexture.hasLoaded;\n    if (!this.trim && !this.rotate) {\n      this.orig = frame;\n    }\n\n    if (this.valid) this._updateUvs();\n  }\n\n  get rotate() {\n    return this._rotate;\n  }\n\n  set rotate(rotate) {\n    this._rotate = rotate;\n    if (this.valid) this._updateUvs();\n  }\n\n  get width() {\n    return this.orig.width;\n  }\n\n  get height() {\n    return this.orig.height;\n  }\n\n  static newEmpty() {\n    return new Texture(new BaseTexture());\n  }\n\n  static fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    let texture = TextureCache[imageUrl];\n    if (texture) return texture;\n\n    if (crossorigin instanceof Rectangle) {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl),\n        crossorigin,\n        scaleMode,\n        sourceScale\n      );\n    } else {\n      texture = new Texture(\n        BaseTexture.fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n      );\n    }\n\n    addToTextureCache(texture, imageUrl);\n    return texture;\n  }\n\n  static fromFrame(frameId) {\n    const texture = TextureCache[frameId];\n    if (!texture) {\n      throw new Error(`The frameId \"${frameId}\" does not exist in cache`);\n    }\n\n    return texture;\n  }\n\n  static fromCanvas(canvas, scaleMode, origin = \"canvas\") {\n    return new Texture(BaseTexture.fromCanvas(canvas, scaleMode, origin));\n  }\n\n  static from(source) {\n    if (typeof source === \"string\") {\n      const texture = TextureCache[source];\n      if (texture) return texture;\n      return Texture.fromImage(source);\n    } else if (source instanceof Texture) {\n      return source;\n    } else if (source instanceof HTMLImageElement) {\n      return new Texture(BaseTexture.from(source));\n    } else if (source instanceof HTMLCanvasElement) {\n      return Texture.fromCanvas(\n        source,\n        settings.SCALE_MODE,\n        \"HTMLCanvasElement\"\n      );\n    } else if (source instanceof BaseTexture) {\n      return new Texture(source);\n    }\n\n    return source;\n  }\n\n  static fromLoader(source, imageUrl, name) {\n    const baseTexture = new BaseTexture(\n      source,\n      undefined,\n      getResolutionOfUrl(imageUrl)\n    );\n\n    const texture = new Texture(baseTexture);\n    baseTexture.imageUrl = imageUrl;\n    if (!name) name = imageUrl;\n\n    addToBaseTextureCache(texture.baseTexture, name);\n    addToTextureCache(texture, name);\n\n    if (name !== imageUrl) {\n      addToBaseTextureCache(texture.baseTexture, imageUrl);\n      addToTextureCache(texture, imageUrl);\n    }\n    return texture;\n  }\n}\n\nfunction removeAllHandlers(tex) {\n  tex.destroy = () => {};\n  tex.on = () => {};\n  tex.once = () => {};\n  tex.emit = () => {};\n}\n\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n"],"file":"Texture.js"}