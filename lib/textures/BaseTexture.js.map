{"version":3,"sources":["../../src/textures/BaseTexture.js"],"names":["BaseTexture","EventEmitter","constructor","source","scaleMode","resolution","uid","touched","width","height","realWidth","realHeight","settings","RESOLUTION","undefined","SCALE_MODE","hasLoaded","isLoading","image","imageType","sourceScale","premultipliedAlpha","imageUrl","isPowerOfTwo","cutout","cutoutColors","mipmap","MIPMAP_TEXTURES","wrapMode","WRAP_MODE","_glTextures","_enabled","_virtalBoundId","destroyed","textureCacheIds","loadSource","updateSource","PsImage","resetImage","src","wasLoading","removeHandler","firstLoaded","complete","getContext","network","hasSize","_updateImageType","_sourceLoaded","emit","onload","onerror","adaptedNodeCanvas","isPsImage","convertToImageData","update","naturalWidth","videoWidth","naturalHeight","videoHeight","_updateDimensions","bitTwiddle","isPow2","dataUri","mediaType","firstSubType","subType","split","destroy","TextureCache","dispose","fromImage","crossorigin","baseTexture","BaseTextureCache","fromCanvas","canvas","origin","__paintId","from","HTMLImageElement","HTMLCanvasElement"],"mappings":"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","sourcesContent":["import PsImage from \"../polyfill/Image\";\nimport settings from \"../settings\";\nimport bitTwiddle from \"bit-twiddle\";\nimport EventEmitter from \"eventemitter3\";\nimport {\n  uid,\n  rgb2hsl,\n  getUrlFileExt,\n  decomposeDataUri,\n  getResolutionOfUrl\n} from \"../utils\";\nimport {\n  TextureCache,\n  BaseTextureCache,\n  addToBaseTextureCache,\n  removeFromBaseTextureCache\n} from \"../utils/cache\";\nimport { createCanvas } from \"canvas\";\n\nexport default class BaseTexture extends EventEmitter {\n  constructor(source, scaleMode, resolution) {\n    super();\n\n    this.uid = uid();\n    this.touched = 0;\n    this.width = 100;\n    this.height = 100;\n    this.realWidth = 100;\n    this.realHeight = 100;\n\n    this.resolution = resolution || settings.RESOLUTION;\n    this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n    this.hasLoaded = false;\n    this.isLoading = false;\n    this.image = null;\n    this.source = null;\n    this.imageType = null;\n    this.sourceScale = 1.0;\n    this.premultipliedAlpha = true;\n    this.imageUrl = null;\n    this.isPowerOfTwo = false;\n    this.cutout = false;\n    this.cutoutColors = null;\n\n    this.mipmap = settings.MIPMAP_TEXTURES;\n    this.wrapMode = settings.WRAP_MODE;\n\n    this._glTextures = {};\n    this._enabled = 0;\n    this._virtalBoundId = -1;\n    this.destroyed = false;\n    this.textureCacheIds = [];\n\n    this.loadSource(source);\n  }\n\n  updateSource(imageUrl) {\n    if (!this.image) this.image = new PsImage();\n\n    this.resetImage(this.image);\n    this.loadSource(this.image);\n    this.image.src = imageUrl;\n    this.imageUrl = imageUrl;\n    this.resolution = getResolutionOfUrl(imageUrl);\n  }\n\n  loadSource(source) {\n    if (!source) return;\n\n    const wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n    if (wasLoading && this.source) this.removeHandler(this.source);\n\n    const firstLoaded = !this.source;\n    this.source = source;\n\n    // source resources loaded\n    const { src, width, height, complete, getContext, network } = source;\n    const hasSize = width && height;\n\n    if (((src && complete) || (network && complete) || getContext) && hasSize) {\n      this._updateImageType();\n      this._sourceLoaded();\n      if (firstLoaded) this.emit(\"loaded\", this);\n    }\n\n    // the resource is not loaded\n    else if (!getContext) {\n      this.isLoading = true;\n      source.onload = () => {\n        this._updateImageType();\n        this.removeHandler(source);\n\n        if (!this.isLoading) return;\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit(\"loaded\", this);\n      };\n\n      source.onerror = () => {\n        this.removeHandler(source);\n        if (!this.isLoading) return;\n        this.isLoading = false;\n        this.emit(\"error\", this);\n      };\n\n      if (complete && src) {\n        this.removeHandler(source);\n        this.isLoading = false;\n\n        if (width && height) {\n          this._sourceLoaded();\n          if (wasLoading) this.emit(\"loaded\", this);\n        } else if (wasLoading) {\n          this.emit(\"error\", this);\n        }\n      }\n    }\n  }\n\n  removeHandler(source) {\n    source.onload = null;\n    source.onerror = null;\n  }\n\n  resetImage(image) {\n    image.src = \"\";\n    image.width = 0;\n    image.height = 0;\n  }\n\n  adaptedNodeCanvas() {\n    const { source, cutout, cutoutColors } = this;\n    if (source && source instanceof PsImage && source.isPsImage) {\n      this.source = PsImage.convertToImageData(source);\n    }\n  }\n\n  update() {\n    if (this.imageType !== \"svg\") {\n      this.realWidth =\n        this.source.naturalWidth || this.source.videoWidth || this.source.width;\n\n      this.realHeight =\n        this.source.naturalHeight ||\n        this.source.videoHeight ||\n        this.source.height;\n\n      // update width and height\n      this._updateDimensions();\n    }\n\n    this.emit(\"update\", this);\n  }\n\n  _updateDimensions() {\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n\n    this.isPowerOfTwo =\n      bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n  }\n\n  _updateImageType() {\n    if (!this.imageUrl) return;\n\n    const dataUri = decomposeDataUri(this.imageUrl);\n    let imageType;\n\n    if (dataUri && dataUri.mediaType === \"image\") {\n      const firstSubType = dataUri.subType.split(\"+\")[0];\n      imageType = getUrlFileExt(`.${firstSubType}`);\n    } else {\n      imageType = getUrlFileExt(this.imageUrl);\n    }\n\n    this.imageType = imageType || \"png\";\n  }\n\n  _sourceLoaded() {\n    this.hasLoaded = true;\n    this.update();\n  }\n\n  destroy() {\n    if (this.imageUrl) {\n      delete TextureCache[this.imageUrl];\n      this.imageUrl = null;\n      this.source.src = \"\";\n      this.removeHandler(this.source);\n    }\n\n    if (this.image) {\n      this.image.src = \"\";\n      this.image = null;\n    }\n\n    this.source = null;\n    this.dispose();\n\n    removeFromBaseTextureCache(this);\n    this.textureCacheIds = null;\n    this.destroyed = true;\n    this.cutout = false;\n    this.cutoutColors = null;\n  }\n\n  dispose() {\n    this.emit(\"dispose\", this);\n  }\n\n  static fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    let baseTexture = BaseTextureCache[imageUrl];\n\n    if (!baseTexture) {\n      const image = new PsImage();\n      baseTexture = new BaseTexture(image, scaleMode);\n      baseTexture.imageUrl = imageUrl;\n\n      if (sourceScale) baseTexture.sourceScale = sourceScale;\n      baseTexture.resolution = getResolutionOfUrl(imageUrl);\n      image.src = imageUrl;\n\n      addToBaseTextureCache(baseTexture, imageUrl);\n    }\n\n    return baseTexture;\n  }\n\n  static fromCanvas(canvas, scaleMode, origin = \"canvas\") {\n    if (!canvas.__paintId) canvas.__paintId = `${origin}_${uid()}`;\n\n    let baseTexture = BaseTextureCache[canvas.__paintId];\n    if (!baseTexture) {\n      baseTexture = new BaseTexture(canvas, scaleMode);\n      addToBaseTextureCache(baseTexture, canvas.__paintId);\n    }\n\n    return baseTexture;\n  }\n\n  static from(source, scaleMode, sourceScale) {\n    if (typeof source === \"string\") {\n      return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n    } else if (source instanceof HTMLImageElement) {\n      const imageUrl = source.src;\n      let baseTexture = BaseTextureCache[imageUrl];\n\n      if (!baseTexture) {\n        baseTexture = new BaseTexture(source, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n\n        if (sourceScale) {\n          baseTexture.sourceScale = sourceScale;\n        }\n\n        baseTexture.resolution = getResolutionOfUrl(imageUrl);\n        addToBaseTextureCache(baseTexture, imageUrl);\n      }\n\n      return baseTexture;\n    } else if (source instanceof HTMLCanvasElement) {\n      return BaseTexture.fromCanvas(source, scaleMode);\n    }\n\n    return source;\n  }\n}\n"],"file":"BaseTexture.js"}