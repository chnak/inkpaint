{"version":3,"sources":["../../src/textures/TextureMatrix.js"],"names":["tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","_texture","mapCoord","uClampFrame","Float32Array","uClampOffset","_lastTextureID","clampOffset","value","multiplyUvs","uvs","out","undefined","mat","i","length","x","y","a","c","tx","b","d","ty","update","forceUpdate","tex","valid","_updateID","_uvs","set","x1","x0","y1","y0","x3","y3","orig","trim","width","height","append","texBase","baseTexture","frame","margin","resolution","offset","_frame","realWidth","realHeight"],"mappings":"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","sourcesContent":["import { default as Matrix } from \"../math/Matrix\";\n\nconst tempMat = new Matrix();\n\nexport default class TextureMatrix {\n  constructor(texture, clampMargin) {\n    this._texture = texture;\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._lastTextureID = -1;\n    this.clampOffset = 0;\n    this.clampMargin = typeof clampMargin === \"undefined\" ? 0.5 : clampMargin;\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set texture(value) {\n    this._texture = value;\n    this._lastTextureID = -1;\n  }\n\n  multiplyUvs(uvs, out) {\n    if (out === undefined) {\n      out = uvs;\n    }\n\n    const mat = this.mapCoord;\n\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n\n    return out;\n  }\n\n  update(forceUpdate) {\n    const tex = this._texture;\n\n    if (!tex || !tex.valid) {\n      return false;\n    }\n\n    if (!forceUpdate && this._lastTextureID === tex._updateID) {\n      return false;\n    }\n\n    this._lastTextureID = tex._updateID;\n\n    const uvs = tex._uvs;\n\n    this.mapCoord.set(\n      uvs.x1 - uvs.x0,\n      uvs.y1 - uvs.y0,\n      uvs.x3 - uvs.x0,\n      uvs.y3 - uvs.y0,\n      uvs.x0,\n      uvs.y0\n    );\n\n    const orig = tex.orig;\n    const trim = tex.trim;\n\n    if (trim) {\n      tempMat.set(\n        orig.width / trim.width,\n        0,\n        0,\n        orig.height / trim.height,\n        -trim.x / trim.width,\n        -trim.y / trim.height\n      );\n      this.mapCoord.append(tempMat);\n    }\n\n    const texBase = tex.baseTexture;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase.resolution;\n    const offset = this.clampOffset;\n\n    frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n    frame[2] =\n      (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n    frame[3] =\n      (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = offset / texBase.realWidth;\n    this.uClampOffset[1] = offset / texBase.realHeight;\n\n    return true;\n  }\n}\n"],"file":"TextureMatrix.js"}