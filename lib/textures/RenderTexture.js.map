{"version":3,"sources":["../../src/textures/RenderTexture.js"],"names":["RenderTexture","Texture","constructor","baseRenderTexture","frame","_legacyRenderer","BaseRenderTexture","width","arguments","height","scaleMode","resolution","console","warn","legacyRenderer","valid","_updateUvs","resize","doNotResizeBaseTexture","Math","ceil","_frame","orig","baseTexture","create"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,aAAN,SAA4BC,gBAA5B,CAAoC;AACjDC,EAAAA,WAAW,CAACC,iBAAD,EAAoBC,KAApB,EAA2B;AACpC;AACA,QAAIC,eAAe,GAAG,IAAtB;;AAEA,QAAI,EAAEF,iBAAiB,YAAYG,0BAA/B,CAAJ,EAAuD;AACrD;AACA,UAAMC,KAAK,GAAGC,SAAS,CAAC,CAAD,CAAvB;AACA,UAAMC,MAAM,GAAGD,SAAS,CAAC,CAAD,CAAxB;AACA,UAAME,SAAS,GAAGF,SAAS,CAAC,CAAD,CAA3B;AACA,UAAMG,UAAU,GAAGH,SAAS,CAAC,CAAD,CAA5B,CALqD,CAOrD;;AACAI,MAAAA,OAAO,CAACC,IAAR,sCACqCN,KADrC,UAC+CE,MAD/C;AAGAJ,MAAAA,eAAe,GAAGG,SAAS,CAAC,CAAD,CAA3B;AACAJ,MAAAA,KAAK,GAAG,IAAR;AACAD,MAAAA,iBAAiB,GAAG,IAAIG,0BAAJ,CAClBC,KADkB,EAElBE,MAFkB,EAGlBC,SAHkB,EAIlBC,UAJkB,CAApB;AAMD;;AAED,UAAMR,iBAAN,EAAyBC,KAAzB;AACA,SAAKU,cAAL,GAAsBT,eAAtB;AACA,SAAKU,KAAL,GAAa,IAAb;;AACA,SAAKC,UAAL;AACD;;AAEDC,EAAAA,MAAM,CAACV,KAAD,EAAQE,MAAR,EAAgBS,sBAAhB,EAAwC;AAC5CX,IAAAA,KAAK,GAAGY,IAAI,CAACC,IAAL,CAAUb,KAAV,CAAR;AACAE,IAAAA,MAAM,GAAGU,IAAI,CAACC,IAAL,CAAUX,MAAV,CAAT,CAF4C,CAI5C;;AACA,SAAKM,KAAL,GAAaR,KAAK,GAAG,CAAR,IAAaE,MAAM,GAAG,CAAnC;AACA,SAAKY,MAAL,CAAYd,KAAZ,GAAoB,KAAKe,IAAL,CAAUf,KAAV,GAAkBA,KAAtC;AACA,SAAKc,MAAL,CAAYZ,MAAZ,GAAqB,KAAKa,IAAL,CAAUb,MAAV,GAAmBA,MAAxC;;AAEA,QAAI,CAACS,sBAAL,EAA6B;AAC3B,WAAKK,WAAL,CAAiBN,MAAjB,CAAwBV,KAAxB,EAA+BE,MAA/B;AACD;;AAED,SAAKO,UAAL;AACD;;AAEY,SAANQ,MAAM,CAACjB,KAAD,EAAQE,MAAR,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuC;AAClD,WAAO,IAAIX,aAAJ,CACL,IAAIM,0BAAJ,CAAsBC,KAAtB,EAA6BE,MAA7B,EAAqCC,SAArC,EAAgDC,UAAhD,CADK,CAAP;AAGD;;AApDgD","sourcesContent":["import BaseRenderTexture from \"./BaseRenderTexture\";\nimport Texture from \"./Texture\";\n\nexport default class RenderTexture extends Texture {\n  constructor(baseRenderTexture, frame) {\n    // support for legacy..\n    let _legacyRenderer = null;\n\n    if (!(baseRenderTexture instanceof BaseRenderTexture)) {\n      /* eslint-disable prefer-rest-params, no-console */\n      const width = arguments[1];\n      const height = arguments[2];\n      const scaleMode = arguments[3];\n      const resolution = arguments[4];\n\n      // we have an old render texture..\n      console.warn(\n        `Please use RenderTexture.create(${width}, ${height}) instead of the ctor directly.`\n      );\n      _legacyRenderer = arguments[0];\n      frame = null;\n      baseRenderTexture = new BaseRenderTexture(\n        width,\n        height,\n        scaleMode,\n        resolution\n      );\n    }\n\n    super(baseRenderTexture, frame);\n    this.legacyRenderer = _legacyRenderer;\n    this.valid = true;\n    this._updateUvs();\n  }\n\n  resize(width, height, doNotResizeBaseTexture) {\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n\n    // TODO - could be not required..\n    this.valid = width > 0 && height > 0;\n    this._frame.width = this.orig.width = width;\n    this._frame.height = this.orig.height = height;\n\n    if (!doNotResizeBaseTexture) {\n      this.baseTexture.resize(width, height);\n    }\n\n    this._updateUvs();\n  }\n\n  static create(width, height, scaleMode, resolution) {\n    return new RenderTexture(\n      new BaseRenderTexture(width, height, scaleMode, resolution)\n    );\n  }\n}\n"],"file":"RenderTexture.js"}