{"version":3,"sources":["../../src/textures/Spritesheet.js"],"names":["Spritesheet","BATCH_SIZE","constructor","baseTexture","data","resolutionFilename","textures","animations","resolution","_updateResolution","imageUrl","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","scale","meta","undefined","parseFloat","update","parse","callback","length","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","sourceScale","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","Texture","anchor","animName","frameName","push","call","setTimeout","destroy","destroyBase"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEe,MAAMA,WAAN,CAAkB;AACV,aAAVC,UAAU,GAAG;AACtB,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,CAACC,WAAD,EAAcC,IAAd,EAAoBC,kBAApB,EAA+C;AAAA,QAA3BA,kBAA2B;AAA3BA,MAAAA,kBAA2B,GAAN,IAAM;AAAA;;AACxD,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKI,UAAL,GAAkB,KAAKC,iBAAL,CAChBJ,kBAAkB,IAAI,KAAKF,WAAL,CAAiBO,QADvB,CAAlB;AAIA,SAAKC,OAAL,GAAe,KAAKP,IAAL,CAAUQ,MAAzB;AACA,SAAKC,UAAL,GAAkBC,MAAM,CAACC,IAAP,CAAY,KAAKJ,OAAjB,CAAlB;AACA,SAAKK,WAAL,GAAmB,CAAnB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACD;;AAEDR,EAAAA,iBAAiB,CAACJ,kBAAD,EAAqB;AACpC,QAAMa,KAAK,GAAG,KAAKd,IAAL,CAAUe,IAAV,CAAeD,KAA7B,CADoC,CAGpC;;AACA,QAAIV,UAAU,GAAG,+BAAmBH,kBAAnB,EAAuC,IAAvC,CAAjB,CAJoC,CAMpC;;AACA,QAAIG,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACAA,MAAAA,UAAU,GAAGU,KAAK,KAAKE,SAAV,GAAsBC,UAAU,CAACH,KAAD,CAAhC,GAA0C,CAAvD;AACD,KAVmC,CAYpC;;;AACA,QAAIV,UAAU,KAAK,CAAnB,EAAsB;AACpB,WAAKL,WAAL,CAAiBK,UAAjB,GAA8BA,UAA9B;AACA,WAAKL,WAAL,CAAiBmB,MAAjB;AACD;;AAED,WAAOd,UAAP;AACD;;AAEDe,EAAAA,KAAK,CAACC,QAAD,EAAW;AACd,SAAKR,WAAL,GAAmB,CAAnB;AACA,SAAKC,SAAL,GAAiBO,QAAjB;;AAEA,QAAI,KAAKX,UAAL,CAAgBY,MAAhB,IAA0BzB,WAAW,CAACC,UAA1C,EAAsD;AACpD,WAAKyB,cAAL,CAAoB,CAApB;;AACA,WAAKC,kBAAL;;AACA,WAAKC,cAAL;AACD,KAJD,MAIO;AACL,WAAKC,UAAL;AACD;AACF;;AAEDH,EAAAA,cAAc,CAACI,iBAAD,EAAoB;AAChC,QAAIC,UAAU,GAAGD,iBAAjB;AACA,QAAME,SAAS,GAAGhC,WAAW,CAACC,UAA9B;AACA,QAAMgC,WAAW,GAAG,KAAK9B,WAAL,CAAiB8B,WAArC;;AAEA,WACEF,UAAU,GAAGD,iBAAb,GAAiCE,SAAjC,IACAD,UAAU,GAAG,KAAKlB,UAAL,CAAgBY,MAF/B,EAGE;AACA,UAAMS,CAAC,GAAG,KAAKrB,UAAL,CAAgBkB,UAAhB,CAAV;AACA,UAAM3B,IAAI,GAAG,KAAKO,OAAL,CAAauB,CAAb,CAAb;AACA,UAAMC,IAAI,GAAG/B,IAAI,CAACgC,KAAlB;;AAEA,UAAID,IAAJ,EAAU;AACR,YAAIC,KAAK,GAAG,IAAZ;AACA,YAAIC,IAAI,GAAG,IAAX;AACA,YAAMC,UAAU,GACdlC,IAAI,CAACmC,OAAL,KAAiB,KAAjB,IAA0BnC,IAAI,CAACkC,UAA/B,GACIlC,IAAI,CAACkC,UADT,GAEIlC,IAAI,CAACgC,KAHX;AAKA,YAAMI,IAAI,GAAG,IAAIC,eAAJ,CACX,CADW,EAEX,CAFW,EAGXC,IAAI,CAACC,KAAL,CAAWL,UAAU,CAACM,CAAX,GAAeX,WAA1B,IAAyC,KAAKzB,UAHnC,EAIXkC,IAAI,CAACC,KAAL,CAAWL,UAAU,CAACO,CAAX,GAAeZ,WAA1B,IAAyC,KAAKzB,UAJnC,CAAb;;AAOA,YAAIJ,IAAI,CAAC0C,OAAT,EAAkB;AAChBV,UAAAA,KAAK,GAAG,IAAIK,eAAJ,CACNC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACY,CAAL,GAASd,WAApB,IAAmC,KAAKzB,UADlC,EAENkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACa,CAAL,GAASf,WAApB,IAAmC,KAAKzB,UAFlC,EAGNkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACU,CAAL,GAASZ,WAApB,IAAmC,KAAKzB,UAHlC,EAINkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACS,CAAL,GAASX,WAApB,IAAmC,KAAKzB,UAJlC,CAAR;AAMD,SAPD,MAOO;AACL4B,UAAAA,KAAK,GAAG,IAAIK,eAAJ,CACNC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACY,CAAL,GAASd,WAApB,IAAmC,KAAKzB,UADlC,EAENkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACa,CAAL,GAASf,WAApB,IAAmC,KAAKzB,UAFlC,EAGNkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACS,CAAL,GAASX,WAApB,IAAmC,KAAKzB,UAHlC,EAINkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACU,CAAL,GAASZ,WAApB,IAAmC,KAAKzB,UAJlC,CAAR;AAMD,SA7BO,CA+BR;;;AACA,YAAIJ,IAAI,CAACmC,OAAL,KAAiB,KAAjB,IAA0BnC,IAAI,CAAC6C,gBAAnC,EAAqD;AACnDZ,UAAAA,IAAI,GAAG,IAAII,eAAJ,CACLC,IAAI,CAACC,KAAL,CAAWvC,IAAI,CAAC6C,gBAAL,CAAsBF,CAAtB,GAA0Bd,WAArC,IAAoD,KAAKzB,UADpD,EAELkC,IAAI,CAACC,KAAL,CAAWvC,IAAI,CAAC6C,gBAAL,CAAsBD,CAAtB,GAA0Bf,WAArC,IAAoD,KAAKzB,UAFpD,EAGLkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACS,CAAL,GAASX,WAApB,IAAmC,KAAKzB,UAHnC,EAILkC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACU,CAAL,GAASZ,WAApB,IAAmC,KAAKzB,UAJnC,CAAP;AAMD;;AAED,aAAKF,QAAL,CAAc4B,CAAd,IAAmB,IAAIgB,aAAJ,CACjB,KAAK/C,WADY,EAEjBiC,KAFiB,EAGjBI,IAHiB,EAIjBH,IAJiB,EAKjBjC,IAAI,CAAC0C,OAAL,GAAe,CAAf,GAAmB,CALF,EAMjB1C,IAAI,CAAC+C,MANY,CAAnB;AASA,sCAAkB,KAAK7C,QAAL,CAAc4B,CAAd,CAAlB,EAAoCA,CAApC;AACD;;AAEDH,MAAAA,UAAU;AACX;AACF;;AAEDJ,EAAAA,kBAAkB,GAAG;AACnB,QAAMpB,UAAU,GAAG,KAAKH,IAAL,CAAUG,UAAV,IAAwB,EAA3C;;AAEA,SAAK,IAAM6C,QAAX,IAAuB7C,UAAvB,EAAmC;AACjC,WAAKA,UAAL,CAAgB6C,QAAhB,IAA4B,EAA5B;;AACA,WAAK,IAAMC,SAAX,IAAwB9C,UAAU,CAAC6C,QAAD,CAAlC,EAA8C;AAC5C,aAAK7C,UAAL,CAAgB6C,QAAhB,EAA0BE,IAA1B,CAA+B,KAAKhD,QAAL,CAAc+C,SAAd,CAA/B;AACD;AACF;AACF;;AAEDzB,EAAAA,cAAc,GAAG;AACf,QAAMJ,QAAQ,GAAG,KAAKP,SAAtB;AAEA,SAAKA,SAAL,GAAiB,IAAjB;AACA,SAAKD,WAAL,GAAmB,CAAnB;AACAQ,IAAAA,QAAQ,CAAC+B,IAAT,CAAc,IAAd,EAAoB,KAAKjD,QAAzB;AACD;;AAEDuB,EAAAA,UAAU,GAAG;AACX,SAAKH,cAAL,CAAoB,KAAKV,WAAL,GAAmBhB,WAAW,CAACC,UAAnD;;AACA,SAAKe,WAAL;AACAwC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,KAAKxC,WAAL,GAAmBhB,WAAW,CAACC,UAA/B,GAA4C,KAAKY,UAAL,CAAgBY,MAAhE,EAAwE;AACtE,aAAKI,UAAL;AACD,OAFD,MAEO;AACL,aAAKF,kBAAL;;AACA,aAAKC,cAAL;AACD;AACF,KAPS,EAOP,CAPO,CAAV;AAQD;;AAED6B,EAAAA,OAAO,CAACC,WAAD,EAAsB;AAAA,QAArBA,WAAqB;AAArBA,MAAAA,WAAqB,GAAP,KAAO;AAAA;;AAC3B,SAAK,IAAMxB,CAAX,IAAgB,KAAK5B,QAArB,EAA+B;AAC7B,WAAKA,QAAL,CAAc4B,CAAd,EAAiBuB,OAAjB;AACD;;AACD,SAAK9C,OAAL,GAAe,IAAf;AACA,SAAKE,UAAL,GAAkB,IAAlB;AACA,SAAKT,IAAL,GAAY,IAAZ;AACA,SAAKE,QAAL,GAAgB,IAAhB;;AACA,QAAIoD,WAAJ,EAAiB;AACf,WAAKvD,WAAL,CAAiBsD,OAAjB;AACD;;AACD,SAAKtD,WAAL,GAAmB,IAAnB;AACD;;AAxK8B","sourcesContent":["import { Rectangle, Texture } from \"../core\";\nimport { getResolutionOfUrl } from \"../utils\";\nimport { addToTextureCache } from \"../utils/cache\";\n\nexport default class Spritesheet {\n  static get BATCH_SIZE() {\n    return 1000;\n  }\n\n  constructor(baseTexture, data, resolutionFilename = null) {\n    this.baseTexture = baseTexture;\n    this.textures = {};\n    this.animations = {};\n    this.data = data;\n    this.resolution = this._updateResolution(\n      resolutionFilename || this.baseTexture.imageUrl\n    );\n\n    this._frames = this.data.frames;\n    this._frameKeys = Object.keys(this._frames);\n    this._batchIndex = 0;\n    this._callback = null;\n  }\n\n  _updateResolution(resolutionFilename) {\n    const scale = this.data.meta.scale;\n\n    // Use a defaultValue of `null` to check if a url-based resolution is set\n    let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n    // No resolution found via URL\n    if (resolution === null) {\n      // Use the scale value or default to 1\n      resolution = scale !== undefined ? parseFloat(scale) : 1;\n    }\n\n    // For non-1 resolutions, update baseTexture\n    if (resolution !== 1) {\n      this.baseTexture.resolution = resolution;\n      this.baseTexture.update();\n    }\n\n    return resolution;\n  }\n\n  parse(callback) {\n    this._batchIndex = 0;\n    this._callback = callback;\n\n    if (this._frameKeys.length <= Spritesheet.BATCH_SIZE) {\n      this._processFrames(0);\n      this._processAnimations();\n      this._parseComplete();\n    } else {\n      this._nextBatch();\n    }\n  }\n\n  _processFrames(initialFrameIndex) {\n    let frameIndex = initialFrameIndex;\n    const maxFrames = Spritesheet.BATCH_SIZE;\n    const sourceScale = this.baseTexture.sourceScale;\n\n    while (\n      frameIndex - initialFrameIndex < maxFrames &&\n      frameIndex < this._frameKeys.length\n    ) {\n      const i = this._frameKeys[frameIndex];\n      const data = this._frames[i];\n      const rect = data.frame;\n\n      if (rect) {\n        let frame = null;\n        let trim = null;\n        const sourceSize =\n          data.trimmed !== false && data.sourceSize\n            ? data.sourceSize\n            : data.frame;\n\n        const orig = new Rectangle(\n          0,\n          0,\n          Math.floor(sourceSize.w * sourceScale) / this.resolution,\n          Math.floor(sourceSize.h * sourceScale) / this.resolution\n        );\n\n        if (data.rotated) {\n          frame = new Rectangle(\n            Math.floor(rect.x * sourceScale) / this.resolution,\n            Math.floor(rect.y * sourceScale) / this.resolution,\n            Math.floor(rect.h * sourceScale) / this.resolution,\n            Math.floor(rect.w * sourceScale) / this.resolution\n          );\n        } else {\n          frame = new Rectangle(\n            Math.floor(rect.x * sourceScale) / this.resolution,\n            Math.floor(rect.y * sourceScale) / this.resolution,\n            Math.floor(rect.w * sourceScale) / this.resolution,\n            Math.floor(rect.h * sourceScale) / this.resolution\n          );\n        }\n\n        //  Check to see if the sprite is trimmed\n        if (data.trimmed !== false && data.spriteSourceSize) {\n          trim = new Rectangle(\n            Math.floor(data.spriteSourceSize.x * sourceScale) / this.resolution,\n            Math.floor(data.spriteSourceSize.y * sourceScale) / this.resolution,\n            Math.floor(rect.w * sourceScale) / this.resolution,\n            Math.floor(rect.h * sourceScale) / this.resolution\n          );\n        }\n\n        this.textures[i] = new Texture(\n          this.baseTexture,\n          frame,\n          orig,\n          trim,\n          data.rotated ? 2 : 0,\n          data.anchor\n        );\n\n        addToTextureCache(this.textures[i], i);\n      }\n\n      frameIndex++;\n    }\n  }\n\n  _processAnimations() {\n    const animations = this.data.animations || {};\n\n    for (const animName in animations) {\n      this.animations[animName] = [];\n      for (const frameName of animations[animName]) {\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  }\n\n  _parseComplete() {\n    const callback = this._callback;\n\n    this._callback = null;\n    this._batchIndex = 0;\n    callback.call(this, this.textures);\n  }\n\n  _nextBatch() {\n    this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n    this._batchIndex++;\n    setTimeout(() => {\n      if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length) {\n        this._nextBatch();\n      } else {\n        this._processAnimations();\n        this._parseComplete();\n      }\n    }, 0);\n  }\n\n  destroy(destroyBase = false) {\n    for (const i in this.textures) {\n      this.textures[i].destroy();\n    }\n    this._frames = null;\n    this._frameKeys = null;\n    this.data = null;\n    this.textures = null;\n    if (destroyBase) {\n      this.baseTexture.destroy();\n    }\n    this.baseTexture = null;\n  }\n}\n"],"file":"Spritesheet.js"}