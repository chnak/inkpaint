{"version":3,"sources":["../../src/ticker/Ticker.js"],"names":["Ticker","constructor","_head","TickerListener","Infinity","_requestId","_maxElapsedMS","autoStart","deltaTime","elapsedMS","settings","TARGET_FPMS","lastTime","speed","started","_tick","bind","time","update","next","requestAnimationFrame","_requestIfNeeded","performance","now","_cancelIfNeeded","cancelAnimationFrame","_startIfPossible","start","add","fn","context","priority","UPDATE_PRIORITY","NORMAL","_addListener","addOnce","listener","current","previous","connect","remove","match","destroy","stop","currentTime","head","emit","FPS","minFPS","fps","minFPMS","Math","min","max"],"mappings":"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","sourcesContent":["import settings from \"../settings\";\nimport { UPDATE_PRIORITY } from \"../const\";\nimport TickerListener from \"./TickerListener\";\n\nexport default class Ticker {\n  constructor() {\n    this._head = new TickerListener(null, null, Infinity);\n    this._requestId = null;\n    this._maxElapsedMS = 100;\n\n    this.autoStart = false;\n    this.deltaTime = 1;\n    this.elapsedMS = 1 / settings.TARGET_FPMS;\n    this.lastTime = -1;\n    this.speed = 1;\n    this.started = false;\n    this._tick = this._tick.bind(this);\n  }\n\n  _tick(time) {\n    this._requestId = null;\n    if (!this.started) return;\n\n    this.update(time);\n    if (this.started && this._requestId === null && this._head.next) {\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  }\n\n  _requestIfNeeded() {\n    if (this._requestId === null && this._head.next) {\n      this.lastTime = performance.now();\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  }\n\n  _cancelIfNeeded() {\n    if (this._requestId !== null) {\n      cancelAnimationFrame(this._requestId);\n      this._requestId = null;\n    }\n  }\n\n  _startIfPossible() {\n    if (this.started) {\n      this._requestIfNeeded();\n    } else if (this.autoStart) {\n      this.start();\n    }\n  }\n\n  add(fn, context, priority = UPDATE_PRIORITY.NORMAL) {\n    return this._addListener(new TickerListener(fn, context, priority));\n  }\n\n  addOnce(fn, context, priority = UPDATE_PRIORITY.NORMAL) {\n    return this._addListener(new TickerListener(fn, context, priority, true));\n  }\n\n  _addListener(listener) {\n    let current = this._head.next;\n    let previous = this._head;\n\n    if (!current) {\n      listener.connect(previous);\n    } else {\n      while (current) {\n        if (listener.priority > current.priority) {\n          listener.connect(previous);\n          break;\n        }\n        previous = current;\n        current = current.next;\n      }\n\n      if (!listener.previous) {\n        listener.connect(previous);\n      }\n    }\n\n    this._startIfPossible();\n    return this;\n  }\n\n  remove(fn, context) {\n    let listener = this._head.next;\n\n    while (listener) {\n      if (listener.match(fn, context)) {\n        listener = listener.destroy();\n      } else {\n        listener = listener.next;\n      }\n    }\n\n    if (!this._head.next) {\n      this._cancelIfNeeded();\n    }\n\n    return this;\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this._requestIfNeeded();\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this._cancelIfNeeded();\n    }\n  }\n\n  destroy() {\n    this.stop();\n    let listener = this._head.next;\n    while (listener) {\n      listener = listener.destroy(true);\n    }\n\n    this._head.destroy();\n    this._head = null;\n  }\n\n  update(currentTime = performance.now()) {\n    let elapsedMS;\n\n    if (currentTime > this.lastTime) {\n      elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n      if (elapsedMS > this._maxElapsedMS) {\n        elapsedMS = this._maxElapsedMS;\n      }\n\n      this.deltaTime = elapsedMS * settings.TARGET_FPMS * this.speed;\n      const head = this._head;\n      let listener = head.next;\n\n      while (listener) {\n        listener = listener.emit(this.deltaTime);\n      }\n\n      if (!head.next) {\n        this._cancelIfNeeded();\n      }\n    } else {\n      this.deltaTime = this.elapsedMS = 0;\n    }\n\n    this.lastTime = currentTime;\n  }\n\n  get FPS() {\n    return 1000 / this.elapsedMS;\n  }\n\n  get minFPS() {\n    return 1000 / this._maxElapsedMS;\n  }\n\n  set minFPS(fps) {\n    const minFPMS = Math.min(Math.max(0, fps) / 1000, settings.TARGET_FPMS);\n    this._maxElapsedMS = 1 / minFPMS;\n  }\n}\n"],"file":"Ticker.js"}