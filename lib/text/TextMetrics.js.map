{"version":3,"sources":["../../src/text/TextMetrics.js"],"names":["TextMetrics","constructor","text","style","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","measureText","wordWrap","canvas","_canvas","undefined","font","toFontString","measureFont","context","getContext","split","map","line","after","lastLine","length","endsWith","before","Array","from","l","console","error","i","mText","substring","lineWidth","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","fontSize","leading","cache","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","tokenize","token","isNewline","push","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","breakWords","characters","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","filter","x","tag","newLine","key","spacing","trimRight","slice","_newlines","indexOf","charCodeAt","_breakingSpaces","index","_fonts","properties","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","textBaseline","fillText","imagedata","getImageData","data","pixels","idx","stop","ascent","descent","clearMetrics","Doc","createElement"],"mappings":"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","sourcesContent":["import Doc from \"../polyfill/Doc\";\n\nexport default class TextMetrics {\n  constructor(\n    text,\n    style,\n    width,\n    height,\n    lines,\n    lineWidths,\n    lineHeight,\n    maxLineWidth,\n    fontProperties\n  ) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n\n  static measureText(text, style, wordWrap, canvas = TextMetrics._canvas) {\n    wordWrap =\n      wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n    const font = style.toFontString();\n    const fontProperties = TextMetrics.measureFont(font);\n    const context = canvas.getContext(\"2d\");\n\n    context.font = font;\n\n    // const outputText = wordWrap\n    //   ? TextMetrics.wordWrap(text, style, canvas)\n    //   : text;\n    // console.log({text, wordWrap, outputText});\n    // const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n\n    let lines;\n    if (wordWrap) {\n      lines = TextMetrics.wordWrap(text, style, canvas);\n      // console.log('measureText', text, lines);\n    } else {\n      lines = text.split(/(?:\\r\\n|\\r|\\n)/).map(line => `${line}\\n`);\n    }\n\n    let after = 0;\n    // 最后会多一个\\n，不去掉，但校验的时候不算\n    const lastLine = lines[lines.length - 1];\n    if (lastLine.endsWith('\\n')) {\n      after = -1;\n      //lines[lines.length - 1] = lastLine.substring(0, lastLine.length - 1);\n    }\n\n    const before = Array.from(text).length;\n    lines.map((l) => after += Array.from(l).length);\n    if (before !== after) {\n      console.error('text parse err!!!', {before, after}, lines);\n    } else {\n      // console.log('text parse ok', {before, after}, lines);\n    }\n\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n      const mText = lines[i];\n      // 计算宽度的时候不考虑\\n, 避免影响视觉居中\n      if (mText.endsWith('\\n')) mText = mText.substring(0, mText.length - 1);\n      const lineWidth =\n        context.measureText(mText).width +\n        (Array.from(mText).length - 1) * style.letterSpacing;\n\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    let width = maxLineWidth + style.strokeThickness;\n\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n\n    const lineHeight =\n      style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    let height =\n      Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) +\n      (lines.length - 1) * (lineHeight + style.leading);\n\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n\n    return new TextMetrics(\n      text,\n      style,\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight + style.leading,\n      maxLineWidth,\n      fontProperties\n    );\n  }\n\n  static wordWrap(text, style, canvas = TextMetrics._canvas) {\n    const context = canvas.getContext(\"2d\");\n\n    let width = 0;\n    let line = \"\";\n    let lines = [];\n\n    const cache = {};\n    const { letterSpacing, whiteSpace } = style;\n\n    // How to handle whitespaces\n    const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n    const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n    // whether or not spaces may be added to the beginning of lines\n    let canPrependSpaces = !collapseSpaces;\n\n    // There is letterSpacing after every char except the last one\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n    // so for convenience the above needs to be compared to width + 1 extra letterSpace\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n    // ________________________________________________\n    // And then the final space is simply no appended to each line\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n    // break text into words, spaces and newline chars\n    const tokens = TextMetrics.tokenize(text);\n    // tokens是完整text, 一个字符都不少的\n    // console.log('tokens', tokens);\n\n    for (let i = 0; i < tokens.length; i++) {\n      // get the word, space or newlineChar\n      let token = tokens[i];\n      // console.log('-----token', {i, token});\n\n      // if word is a new line\n      if (TextMetrics.isNewline(token)) {\n        // keep the new line\n        if (!collapseNewlines) {\n          lines.push(TextMetrics.addLine(line, 'T0'));\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n\n        // if we should collapse new lines\n        // we simply convert it into a space\n        token = \" \";\n      }\n\n      // if we should collapse repeated whitespaces\n      if (collapseSpaces) {\n        // check both this and the last tokens for spaces\n        const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = TextMetrics.isBreakingSpace(\n          line[line.length - 1]\n        );\n\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n\n      // get word width from cache if possible\n      const tokenWidth = TextMetrics.getFromCache(\n        token,\n        letterSpacing,\n        cache,\n        context\n      );\n\n      // word is longer than desired bounds\n      if (tokenWidth > wordWrapWidth) {\n        // if we are not already at the beginning of a line\n        if (line !== \"\") {\n          // start newlines for overflow words\n          lines.push(TextMetrics.addLine(line, 'T1', false));\n          line = \"\";\n          width = 0;\n        }\n\n        // break large word over multiple lines\n        if (TextMetrics.canBreakWords(token, style.breakWords)) {\n          // break word into characters\n          const characters = Array.from(token);\n          // console.log('characters', characters);\n\n          // loop the characters\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n\n            let k = 1;\n            // we are not at the end of the token\n\n            // always break, not effect\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              const lastChar = char[char.length - 1];\n\n              // should not split chars\n              if (\n                !TextMetrics.canBreakChars(\n                  lastChar,\n                  nextChar,\n                  token,\n                  j,\n                  style.breakWords\n                )\n              ) {\n                // combine chars & move forward one\n                char += nextChar;\n              } else {\n                break;\n              }\n\n              k++;\n              j++;\n            }\n\n            const characterWidth = TextMetrics.getFromCache(\n              char,\n              letterSpacing,\n              cache,\n              context\n            );\n\n            if (characterWidth + width > wordWrapWidth) {\n              lines.push(TextMetrics.addLine(line, 'T2', false)); // 行内强制换行，不加\\n\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n\n            line += char;\n            // console.log('333 line += token', {line, token});\n            width += characterWidth;\n          }\n        }\n\n        // run word out of the bounds\n        else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines.push(TextMetrics.addLine(line, 'T3', false));\n            line = \"\";\n            width = 0;\n          }\n\n          const isLastToken = i === tokens.length - 1;\n\n          // give it its own line if it's not the end\n          lines.push(TextMetrics.addLine(token, 'T4', isLastToken));\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      }\n\n      // word could fit\n      else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false;\n\n          // 一行末尾的空格，这里不加的话，下一行的开头也会丢弃\n          while (TextMetrics.isBreakingSpace(token)) {\n            line += token;\n            // console.log('444 line += token', {line, token});\n            token = tokens[++i];\n            if (token === undefined) {\n              token = '';\n              break;\n            }\n          }\n\n          // add a new line\n          lines.push(TextMetrics.addLine(line, 'T5', false)); // 行内强制换行，不加\\n\n\n          // start a new line\n          line = \"\";\n          width = 0;\n        }\n\n        // don't add spaces to the beginning of lines\n        if (\n          line.length > 0 ||\n          !TextMetrics.isBreakingSpace(token) ||\n          canPrependSpaces\n        ) {\n          // add the word to the current line\n          line += token;\n          // console.log('555 line += token', {line, token});\n\n          // update width counter\n          width += tokenWidth;\n        }\n      }\n    }\n\n    // console.log('line', line);\n    lines.push(TextMetrics.addLine(line, 'T6'));\n\n    // 把单个\\n跟上一行结尾无\\n的合并\n    for (let i = 0; i < lines.length - 1; i++) {\n      if (lines[i].endsWith('\\n') || lines[i+1] !== '\\n') continue;\n      lines[i] += lines[i+1];\n      lines[i+1] = '';\n    }\n\n    return lines.filter(x => x.length > 0);\n  }\n\n  static addLine(line, tag, newLine=true) {\n    // console.log('addLine', tag, {line, newLine});\n    line = newLine ? `${line}\\n` : line;\n    return line;\n  }\n\n  static getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n\n    if (width === undefined) {\n      const spacing = key.length * letterSpacing;\n\n      width = context.measureText(key).width + spacing;\n      cache[key] = width;\n    }\n\n    return width;\n  }\n\n  static collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n\n  static collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n\n  static trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n\n      if (!TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n\n      text = text.slice(0, -1);\n    }\n\n    return text;\n  }\n\n  static isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n\n    return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n  }\n\n  static isBreakingSpace(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n\n    return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n  }\n\n  static tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n\n      if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n\n        tokens.push(char);\n\n        continue;\n      }\n\n      token += char;\n    }\n\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n\n    return tokens;\n  }\n\n  static canBreakWords(token, breakWords) {\n    return breakWords;\n  }\n\n  static canBreakChars(\n    char,\n    nextChar,\n    token,\n    index,\n    breakWords // eslint-disable-line no-unused-vars\n  ) {\n    return true;\n  }\n\n  static measureFont(font) {\n    // as this method is used for preparing assets, don't recalculate things if we don't need to\n    if (TextMetrics._fonts[font]) {\n      return TextMetrics._fonts[font];\n    }\n\n    const properties = {};\n\n    const canvas = TextMetrics._canvas;\n    const context = TextMetrics._context;\n\n    context.font = font;\n\n    const metricsString =\n      TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n    const width = Math.ceil(context.measureText(metricsString).width);\n    let baseline = Math.ceil(\n      context.measureText(TextMetrics.BASELINE_SYMBOL).width\n    );\n    const height = 2 * baseline;\n\n    baseline = (baseline * TextMetrics.BASELINE_MULTIPLIER) | 0;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    context.fillStyle = \"#f00\";\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = \"alphabetic\";\n    context.fillStyle = \"#000\";\n    context.fillText(metricsString, 0, baseline);\n\n    const imagedata = context.getImageData(0, 0, width, height).data;\n    const pixels = imagedata.length;\n    const line = width * 4;\n\n    let i = 0;\n    let idx = 0;\n    let stop = false;\n\n    // ascent. scan from top to bottom until we find a non red pixel\n    for (i = 0; i < baseline; ++i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n\n    properties.ascent = baseline - i;\n\n    idx = pixels - line;\n    stop = false;\n\n    // descent. scan from bottom to top until we find a non red pixel\n    for (i = height; i > baseline; --i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n\n    TextMetrics._fonts[font] = properties;\n\n    return properties;\n  }\n\n  static clearMetrics(font = \"\") {\n    if (font) {\n      delete TextMetrics._fonts[font];\n    } else {\n      TextMetrics._fonts = {};\n    }\n  }\n}\n\nconst canvas = Doc.createElement(\"canvas\");\ncanvas.width = canvas.height = 10;\nTextMetrics._canvas = canvas;\nTextMetrics._context = canvas.getContext(\"2d\");\nTextMetrics._fonts = {};\nTextMetrics.METRICS_STRING = \"|Éq\";\nTextMetrics.BASELINE_SYMBOL = \"M\";\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\nTextMetrics._newlines = [\n  0x000a, // line feed\n  0x000d // carriage return\n];\nTextMetrics._breakingSpaces = [\n  0x0009, // character tabulation\n  0x0020, // space\n  0x2000, // en quad\n  0x2001, // em quad\n  0x2002, // en space\n  0x2003, // em space\n  0x2004, // three-per-em space\n  0x2005, // four-per-em space\n  0x2006, // six-per-em space\n  0x2008, // punctuation space\n  0x2009, // thin space\n  0x200a, // hair space\n  0x205f, // medium mathematical space\n  0x3000 // ideographic space\n];\n"],"file":"TextMetrics.js"}