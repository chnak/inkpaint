{"version":3,"sources":["../../src/graphics/Graphics.js"],"names":["canvasRenderer","tempMatrix","Matrix","tempPoint","Point","tempColor1","Float32Array","tempColor2","Graphics","Container","constructor","nativeLines","fillAlpha","lineWidth","lineColor","lineAlignment","graphicsData","tint","_prevTint","blendMode","BLEND_MODES","NORMAL","currentPath","_webGL","isMask","boundsPadding","_localBounds","Bounds","dirty","fastRectDirty","clearDirty","boundsDirty","cachedSpriteDirty","_spriteRect","_fastRect","_prevRectTint","_prevRectFillColor","clone","renderable","i","length","push","updateLocalBounds","_quadraticCurveLength","fromX","fromY","cpX","cpY","toX","toY","ax","ay","bx","by","a","b","c","s","Math","sqrt","a2","a32","c2","ba","log","_bezierCurveLength","cpX2","cpY2","n","result","t","t2","t3","nt","nt2","nt3","x","y","dx","dy","prevX","prevY","_segmentsCount","ceil","CURVES","maxLength","minSegments","maxSegments","lineStyle","color","alpha","alignment","lineAlpha","shape","points","Polygon","slice","closed","drawShape","moveTo","lineTo","quadraticCurveTo","xa","ya","adaptive","j","bezierCurveTo","arcTo","x1","y1","x2","y2","radius","a1","b1","b2","mm","abs","dd","cc","tt","k1","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","arc","anticlockwise","PI_2","sweep","segs","startX","cos","startY","sin","xDiff","yDiff","theta","theta2","cTheta","sTheta","segMinus","remainder","real","angle","beginFill","filling","fillColor","fill","endFill","drawRect","width","height","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","path","Array","isArray","arguments","drawStar","innerRadius","rotation","PI","len","delta","polygon","r","clear","canvasTintDirty","isFastRect","type","SHAPES","RECT","_renderWebGL","renderer","_renderSpriteRect","setObjectRenderer","plugins","graphics","render","rect","Sprite","Texture","EMPTY","sprite","t1","worldAlpha","_texture","_frame","transform","worldTransform","anchor","set","_onAnchorUpdate","_renderCanvas","_calculateBounds","lb","_bounds","addFrame","minX","minY","maxX","maxY","containsPoint","point","applyInverse","data","contains","hitHole","holes","hole","Infinity","w","h","lineOffset","RREC","CIRC","ELIP","rw","rh","padding","pop","GraphicsData","POLY","generateCanvasTexture","scaleMode","resolution","bounds","getLocalBounds","canvasBuffer","RenderTexture","create","CanvasRenderer","updateLocalTransform","localTransform","copy","invert","tx","ty","texture","fromCanvas","baseTexture","_canvasRenderTarget","canvas","update","closePath","close","addHole","destroy","options","id","_SPRITE_TEXTURE"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AASA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,cAAJ;AACA,IAAMC,UAAU,GAAG,IAAIC,YAAJ,EAAnB;AACA,IAAMC,SAAS,GAAG,IAAIC,WAAJ,EAAlB;AACA,IAAMC,UAAU,GAAG,IAAIC,YAAJ,CAAiB,CAAjB,CAAnB;AACA,IAAMC,UAAU,GAAG,IAAID,YAAJ,CAAiB,CAAjB,CAAnB;;AAEe,MAAME,QAAN,SAAuBC,kBAAvB,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,WAAD,EAAsB;AAAA,QAArBA,WAAqB;AAArBA,MAAAA,WAAqB,GAAP,KAAO;AAAA;;AAC/B;AAEA,SAAKC,SAAL,GAAiB,CAAjB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,CAAjB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKF,WAAL,GAAmBA,WAAnB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKG,SAAL,GAAiB,CAAjB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,GAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,YAAL,GAAoB,EAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,IAAL,GAAY,QAAZ;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,QAAjB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBC,mBAAYC,MAA7B;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,WAAL,GAAmB,IAAnB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACI;;AACA,SAAKC,MAAL,GAAc,EAAd;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,KAAd;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,CAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,YAAL,GAAoB,IAAIC,eAAJ,EAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,KAAL,GAAa,CAAb;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,CAAC,CAAtB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkB,CAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,WAAL,GAAmB,CAAC,CAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,iBAAL,GAAyB,KAAzB;AAEA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,QAAMA,KAAK,GAAG,IAAI7B,QAAJ,EAAd;AAEA6B,IAAAA,KAAK,CAACC,UAAN,GAAmB,KAAKA,UAAxB;AACAD,IAAAA,KAAK,CAACzB,SAAN,GAAkB,KAAKA,SAAvB;AACAyB,IAAAA,KAAK,CAACxB,SAAN,GAAkB,KAAKA,SAAvB;AACAwB,IAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAKA,SAAvB;AACAuB,IAAAA,KAAK,CAACtB,aAAN,GAAsB,KAAKA,aAA3B;AACAsB,IAAAA,KAAK,CAACpB,IAAN,GAAa,KAAKA,IAAlB;AACAoB,IAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAKA,SAAvB;AACAkB,IAAAA,KAAK,CAACb,MAAN,GAAe,KAAKA,MAApB;AACAa,IAAAA,KAAK,CAACZ,aAAN,GAAsB,KAAKA,aAA3B;AACAY,IAAAA,KAAK,CAACT,KAAN,GAAc,CAAd;AACAS,IAAAA,KAAK,CAACL,iBAAN,GAA0B,KAAKA,iBAA/B,CAbM,CAeN;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvB,YAAL,CAAkBwB,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AACjDF,MAAAA,KAAK,CAACrB,YAAN,CAAmByB,IAAnB,CAAwB,KAAKzB,YAAL,CAAkBuB,CAAlB,EAAqBF,KAArB,EAAxB;AACD;;AAEDA,IAAAA,KAAK,CAACf,WAAN,GAAoBe,KAAK,CAACrB,YAAN,CAAmBqB,KAAK,CAACrB,YAAN,CAAmBwB,MAAnB,GAA4B,CAA/C,CAApB;AAEAH,IAAAA,KAAK,CAACK,iBAAN;AAEA,WAAOL,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,qBAAqB,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AACtD,QAAMC,EAAE,GAAGN,KAAK,GAAG,MAAME,GAAd,GAAoBE,GAA/B;AACA,QAAMG,EAAE,GAAGN,KAAK,GAAG,MAAME,GAAd,GAAoBE,GAA/B;AACA,QAAMG,EAAE,GAAG,MAAMN,GAAN,GAAY,MAAMF,KAA7B;AACA,QAAMS,EAAE,GAAG,MAAMN,GAAN,GAAY,MAAMF,KAA7B;AACA,QAAMS,CAAC,GAAG,OAAOJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAtB,CAAV;AACA,QAAMI,CAAC,GAAG,OAAOL,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGE,EAAtB,CAAV;AACA,QAAMG,CAAC,GAAGJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB;AAEA,QAAMI,CAAC,GAAG,MAAMC,IAAI,CAACC,IAAL,CAAUL,CAAC,GAAGC,CAAJ,GAAQC,CAAlB,CAAhB;AACA,QAAMI,EAAE,GAAGF,IAAI,CAACC,IAAL,CAAUL,CAAV,CAAX;AACA,QAAMO,GAAG,GAAG,MAAMP,CAAN,GAAUM,EAAtB;AACA,QAAME,EAAE,GAAG,MAAMJ,IAAI,CAACC,IAAL,CAAUH,CAAV,CAAjB;AACA,QAAMO,EAAE,GAAGR,CAAC,GAAGK,EAAf;AAEA,WACE,CAACC,GAAG,GAAGJ,CAAN,GACCG,EAAE,GAAGL,CAAL,IAAUE,CAAC,GAAGK,EAAd,CADD,GAEC,CAAC,MAAMN,CAAN,GAAUF,CAAV,GAAcC,CAAC,GAAGA,CAAnB,IAAwBG,IAAI,CAACM,GAAL,CAAS,CAAC,MAAMJ,EAAN,GAAWG,EAAX,GAAgBN,CAAjB,KAAuBM,EAAE,GAAGD,EAA5B,CAAT,CAF1B,KAGC,MAAMD,GAHP,CADF;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,kBAAkB,CAACrB,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,GAApB,EAAyBmB,IAAzB,EAA+BC,IAA/B,EAAqCnB,GAArC,EAA0CC,GAA1C,EAA+C;AAC/D,QAAMmB,CAAC,GAAG,EAAV;AACA,QAAIC,MAAM,GAAG,GAAb;AACA,QAAIC,CAAC,GAAG,GAAR;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,GAAG,GAAG,GAAV;AACA,QAAIC,GAAG,GAAG,GAAV;AACA,QAAIC,CAAC,GAAG,GAAR;AACA,QAAIC,CAAC,GAAG,GAAR;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,EAAE,GAAG,GAAT;AACA,QAAIC,KAAK,GAAGpC,KAAZ;AACA,QAAIqC,KAAK,GAAGpC,KAAZ;;AAEA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI6B,CAArB,EAAwB,EAAE7B,CAA1B,EAA6B;AAC3B+B,MAAAA,CAAC,GAAG/B,CAAC,GAAG6B,CAAR;AACAG,MAAAA,EAAE,GAAGD,CAAC,GAAGA,CAAT;AACAE,MAAAA,EAAE,GAAGD,EAAE,GAAGD,CAAV;AACAG,MAAAA,EAAE,GAAG,MAAMH,CAAX;AACAI,MAAAA,GAAG,GAAGD,EAAE,GAAGA,EAAX;AACAE,MAAAA,GAAG,GAAGD,GAAG,GAAGD,EAAZ;AAEAG,MAAAA,CAAC,GAAGD,GAAG,GAAG/B,KAAN,GAAc,MAAM8B,GAAN,GAAYJ,CAAZ,GAAgBxB,GAA9B,GAAoC,MAAM2B,EAAN,GAAWF,EAAX,GAAgBL,IAApD,GAA2DM,EAAE,GAAGxB,GAApE;AACA6B,MAAAA,CAAC,GAAGF,GAAG,GAAG9B,KAAN,GAAc,MAAM6B,GAAN,GAAYJ,CAAZ,GAAgBvB,GAA9B,GAAoC,IAAI0B,EAAJ,GAASF,EAAT,GAAcJ,IAAlD,GAAyDK,EAAE,GAAGvB,GAAlE;AACA6B,MAAAA,EAAE,GAAGE,KAAK,GAAGJ,CAAb;AACAG,MAAAA,EAAE,GAAGE,KAAK,GAAGJ,CAAb;AACAG,MAAAA,KAAK,GAAGJ,CAAR;AACAK,MAAAA,KAAK,GAAGJ,CAAR;AAEAR,MAAAA,MAAM,IAAIX,IAAI,CAACC,IAAL,CAAUmB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAV;AACD;;AAED,WAAOV,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEa,EAAAA,cAAc,CAAC1C,MAAD,EAAS;AACrB,QAAI6B,MAAM,GAAGX,IAAI,CAACyB,IAAL,CAAU3C,MAAM,GAAGhC,QAAQ,CAAC4E,MAAT,CAAgBC,SAAnC,CAAb;;AAEA,QAAIhB,MAAM,GAAG7D,QAAQ,CAAC4E,MAAT,CAAgBE,WAA7B,EAA0C;AACxCjB,MAAAA,MAAM,GAAG7D,QAAQ,CAAC4E,MAAT,CAAgBE,WAAzB;AACD,KAFD,MAEO,IAAIjB,MAAM,GAAG7D,QAAQ,CAAC4E,MAAT,CAAgBG,WAA7B,EAA0C;AAC/ClB,MAAAA,MAAM,GAAG7D,QAAQ,CAAC4E,MAAT,CAAgBG,WAAzB;AACD;;AAED,WAAOlB,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEmB,EAAAA,SAAS,CAAC3E,SAAD,EAAgB4E,KAAhB,EAA2BC,KAA3B,EAAsCC,SAAtC,EAAuD;AAAA,QAAtD9E,SAAsD;AAAtDA,MAAAA,SAAsD,GAA1C,CAA0C;AAAA;;AAAA,QAAvC4E,KAAuC;AAAvCA,MAAAA,KAAuC,GAA/B,CAA+B;AAAA;;AAAA,QAA5BC,KAA4B;AAA5BA,MAAAA,KAA4B,GAApB,CAAoB;AAAA;;AAAA,QAAjBC,SAAiB;AAAjBA,MAAAA,SAAiB,GAAL,GAAK;AAAA;;AAC9D,SAAK9E,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiB2E,KAAjB;AACA,SAAKG,SAAL,GAAiBF,KAAjB;AACA,SAAK3E,aAAL,GAAqB4E,SAArB;;AAEA,QAAI,KAAKrE,WAAT,EAAsB;AACpB,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAAlC,EAA0C;AACxC;AACA,YAAMqD,KAAK,GAAG,IAAIE,aAAJ,CAAY,KAAKzE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BE,KAA9B,CAAoC,CAAC,CAArC,CAAZ,CAAd;AAEAH,QAAAA,KAAK,CAACI,MAAN,GAAe,KAAf;AAEA,aAAKC,SAAL,CAAeL,KAAf;AACD,OAPD,MAOO;AACL;AACA,aAAKvE,WAAL,CAAiBT,SAAjB,GAA6B,KAAKA,SAAlC;AACA,aAAKS,WAAL,CAAiBR,SAAjB,GAA6B,KAAKA,SAAlC;AACA,aAAKQ,WAAL,CAAiBsE,SAAjB,GAA6B,KAAKA,SAAlC;AACA,aAAKtE,WAAL,CAAiBP,aAAjB,GAAiC,KAAKA,aAAtC;AACD;AACF;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEoF,EAAAA,MAAM,CAACvB,CAAD,EAAIC,CAAJ,EAAO;AACX,QAAMgB,KAAK,GAAG,IAAIE,aAAJ,CAAY,CAACnB,CAAD,EAAIC,CAAJ,CAAZ,CAAd;AAEAgB,IAAAA,KAAK,CAACI,MAAN,GAAe,KAAf;AACA,SAAKC,SAAL,CAAeL,KAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,MAAM,CAACxB,CAAD,EAAIC,CAAJ,EAAO;AACX,QAAMiB,MAAM,GAAG,KAAKxE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAtC;AAEA,QAAMlD,KAAK,GAAGkD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAMK,KAAK,GAAGiD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;;AAEA,QAAII,KAAK,KAAKgC,CAAV,IAAe/B,KAAK,KAAKgC,CAA7B,EAAgC;AAC9BiB,MAAAA,MAAM,CAACrD,IAAP,CAAYmC,CAAZ,EAAeC,CAAf;AACA,WAAKjD,KAAL;AACD;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEyE,EAAAA,gBAAgB,CAACvD,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqB;AACnC,QAAI,KAAK3B,WAAT,EAAsB;AACpB,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,aAAKlB,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,GAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC;AACD;AACF,KAJD,MAIO;AACL,WAAKK,MAAL,CAAY,CAAZ,EAAe,CAAf;AACD;;AAED,QAAML,MAAM,GAAG,KAAKxE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAtC;AACA,QAAIQ,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;;AAEA,QAAIT,MAAM,CAACtD,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAK2D,MAAL,CAAY,CAAZ,EAAe,CAAf;AACD;;AAED,QAAMvD,KAAK,GAAGkD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAMK,KAAK,GAAGiD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAM4B,CAAC,GAAG5D,QAAQ,CAAC4E,MAAT,CAAgBoB,QAAhB,GACN,KAAKtB,cAAL,CACE,KAAKvC,qBAAL,CAA2BC,KAA3B,EAAkCC,KAAlC,EAAyCC,GAAzC,EAA8CC,GAA9C,EAAmDC,GAAnD,EAAwDC,GAAxD,CADF,CADM,GAIN,EAJJ;;AAMA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI6B,CAArB,EAAwB,EAAE7B,CAA1B,EAA6B;AAC3B,UAAMkE,CAAC,GAAGlE,CAAC,GAAG6B,CAAd;AAEAkC,MAAAA,EAAE,GAAG1D,KAAK,GAAG,CAACE,GAAG,GAAGF,KAAP,IAAgB6D,CAA7B;AACAF,MAAAA,EAAE,GAAG1D,KAAK,GAAG,CAACE,GAAG,GAAGF,KAAP,IAAgB4D,CAA7B;AAEAX,MAAAA,MAAM,CAACrD,IAAP,CACE6D,EAAE,GAAG,CAACxD,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAP,IAAc2D,CAApB,GAAwBH,EAAzB,IAA+BG,CADtC,EAEEF,EAAE,GAAG,CAACxD,GAAG,GAAG,CAACE,GAAG,GAAGF,GAAP,IAAc0D,CAApB,GAAwBF,EAAzB,IAA+BE,CAFtC;AAID;;AAED,SAAK7E,KAAL;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE8E,EAAAA,aAAa,CAAC5D,GAAD,EAAMC,GAAN,EAAWmB,IAAX,EAAiBC,IAAjB,EAAuBnB,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAI,KAAK3B,WAAT,EAAsB;AACpB,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,aAAKlB,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,GAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC;AACD;AACF,KAJD,MAIO;AACL,WAAKK,MAAL,CAAY,CAAZ,EAAe,CAAf;AACD;;AAED,QAAML,MAAM,GAAG,KAAKxE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAtC;AAEA,QAAMlD,KAAK,GAAGkD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAMK,KAAK,GAAGiD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AAEAsD,IAAAA,MAAM,CAACtD,MAAP,IAAiB,CAAjB;AAEA,QAAM4B,CAAC,GAAG5D,QAAQ,CAAC4E,MAAT,CAAgBoB,QAAhB,GACN,KAAKtB,cAAL,CACE,KAAKjB,kBAAL,CAAwBrB,KAAxB,EAA+BC,KAA/B,EAAsCC,GAAtC,EAA2CC,GAA3C,EAAgDmB,IAAhD,EAAsDC,IAAtD,EAA4DnB,GAA5D,EAAiEC,GAAjE,CADF,CADM,GAIN,EAJJ;AAMA,gCAAcL,KAAd,EAAqBC,KAArB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCmB,IAAtC,EAA4CC,IAA5C,EAAkDnB,GAAlD,EAAuDC,GAAvD,EAA4DmB,CAA5D,EAA+D0B,MAA/D;AAEA,SAAKlE,KAAL;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE+E,EAAAA,KAAK,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,MAAjB,EAAyB;AAC5B,QAAI,KAAK1F,WAAT,EAAsB;AACpB,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,aAAKlB,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BrD,IAA9B,CAAmCmE,EAAnC,EAAuCC,EAAvC;AACD;AACF,KAJD,MAIO;AACL,WAAKV,MAAL,CAAYS,EAAZ,EAAgBC,EAAhB;AACD;;AAED,QAAMf,MAAM,GAAG,KAAKxE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAtC;AACA,QAAMlD,KAAK,GAAGkD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAMK,KAAK,GAAGiD,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAApB;AACA,QAAMyE,EAAE,GAAGpE,KAAK,GAAGgE,EAAnB;AACA,QAAMK,EAAE,GAAGtE,KAAK,GAAGgE,EAAnB;AACA,QAAMhD,EAAE,GAAGmD,EAAE,GAAGF,EAAhB;AACA,QAAMM,EAAE,GAAGL,EAAE,GAAGF,EAAhB;AACA,QAAMQ,EAAE,GAAG1D,IAAI,CAAC2D,GAAL,CAASJ,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGtD,EAAxB,CAAX;;AAEA,QAAIwD,EAAE,GAAG,MAAL,IAAeJ,MAAM,KAAK,CAA9B,EAAiC;AAC/B,UACElB,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAAN,KAA8BoE,EAA9B,IACAd,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAAN,KAA8BqE,EAFhC,EAGE;AACAf,QAAAA,MAAM,CAACrD,IAAP,CAAYmE,EAAZ,EAAgBC,EAAhB;AACD;AACF,KAPD,MAOO;AACL,UAAMS,EAAE,GAAGL,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,UAAMK,EAAE,GAAG3D,EAAE,GAAGA,EAAL,GAAUuD,EAAE,GAAGA,EAA1B;AACA,UAAMK,EAAE,GAAGP,EAAE,GAAGrD,EAAL,GAAUsD,EAAE,GAAGC,EAA1B;AACA,UAAMM,EAAE,GAAIT,MAAM,GAAGtD,IAAI,CAACC,IAAL,CAAU2D,EAAV,CAAV,GAA2BF,EAAtC;AACA,UAAMM,EAAE,GAAIV,MAAM,GAAGtD,IAAI,CAACC,IAAL,CAAU4D,EAAV,CAAV,GAA2BH,EAAtC;AACA,UAAMO,EAAE,GAAIF,EAAE,GAAGD,EAAN,GAAYF,EAAvB;AACA,UAAMM,EAAE,GAAIF,EAAE,GAAGF,EAAN,GAAYD,EAAvB;AACA,UAAMM,EAAE,GAAGJ,EAAE,GAAGN,EAAL,GAAUO,EAAE,GAAGR,EAA1B;AACA,UAAMY,EAAE,GAAGL,EAAE,GAAG7D,EAAL,GAAU8D,EAAE,GAAGT,EAA1B;AACA,UAAMc,EAAE,GAAGb,EAAE,IAAIQ,EAAE,GAAGC,EAAT,CAAb;AACA,UAAMK,EAAE,GAAGf,EAAE,IAAIS,EAAE,GAAGC,EAAT,CAAb;AACA,UAAMM,EAAE,GAAGd,EAAE,IAAIM,EAAE,GAAGG,EAAT,CAAb;AACA,UAAMM,EAAE,GAAGtE,EAAE,IAAI6D,EAAE,GAAGG,EAAT,CAAb;AACA,UAAMO,UAAU,GAAGzE,IAAI,CAAC0E,KAAL,CAAWJ,EAAE,GAAGF,EAAhB,EAAoBC,EAAE,GAAGF,EAAzB,CAAnB;AACA,UAAMQ,QAAQ,GAAG3E,IAAI,CAAC0E,KAAL,CAAWF,EAAE,GAAGJ,EAAhB,EAAoBG,EAAE,GAAGJ,EAAzB,CAAjB;AAEA,WAAKS,GAAL,CACET,EAAE,GAAGjB,EADP,EAEEkB,EAAE,GAAGjB,EAFP,EAGEG,MAHF,EAIEmB,UAJF,EAKEE,QALF,EAMEnB,EAAE,GAAGtD,EAAL,GAAUuD,EAAE,GAAGF,EANjB;AAQD;;AAED,SAAKrF,KAAL;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE0G,EAAAA,GAAG,CAACT,EAAD,EAAKC,EAAL,EAASd,MAAT,EAAiBmB,UAAjB,EAA6BE,QAA7B,EAAuCE,aAAvC,EAA8D;AAAA,QAAvBA,aAAuB;AAAvBA,MAAAA,aAAuB,GAAP,KAAO;AAAA;;AAC/D,QAAIJ,UAAU,KAAKE,QAAnB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,QAAI,CAACE,aAAD,IAAkBF,QAAQ,IAAIF,UAAlC,EAA8C;AAC5CE,MAAAA,QAAQ,IAAIG,WAAZ;AACD,KAFD,MAEO,IAAID,aAAa,IAAIJ,UAAU,IAAIE,QAAnC,EAA6C;AAClDF,MAAAA,UAAU,IAAIK,WAAd;AACD;;AAED,QAAMC,KAAK,GAAGJ,QAAQ,GAAGF,UAAzB;AACA,QAAMO,IAAI,GAAGlI,QAAQ,CAAC4E,MAAT,CAAgBoB,QAAhB,GACT,KAAKtB,cAAL,CAAoBxB,IAAI,CAAC2D,GAAL,CAASoB,KAAT,IAAkBzB,MAAtC,CADS,GAETtD,IAAI,CAACyB,IAAL,CAAUzB,IAAI,CAAC2D,GAAL,CAASoB,KAAT,IAAkBD,WAA5B,IAAoC,EAFxC;;AAIA,QAAIC,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,QAAME,MAAM,GAAGd,EAAE,GAAGnE,IAAI,CAACkF,GAAL,CAAST,UAAT,IAAuBnB,MAA3C;AACA,QAAM6B,MAAM,GAAGf,EAAE,GAAGpE,IAAI,CAACoF,GAAL,CAASX,UAAT,IAAuBnB,MAA3C,CArB+D,CAuB/D;;AACA,QAAIlB,MAAM,GAAG,KAAKxE,WAAL,GAAmB,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAA1C,GAAmD,IAAhE;;AAEA,QAAIA,MAAJ,EAAY;AACV;AACA,UAAMiD,KAAK,GAAGrF,IAAI,CAAC2D,GAAL,CAASvB,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAAN,GAA4BmG,MAArC,CAAd;AACA,UAAMK,KAAK,GAAGtF,IAAI,CAAC2D,GAAL,CAASvB,MAAM,CAACA,MAAM,CAACtD,MAAP,GAAgB,CAAjB,CAAN,GAA4BqG,MAArC,CAAd;;AAEA,UAAIE,KAAK,GAAG,KAAR,IAAiBC,KAAK,GAAG,KAA7B,EAAoC,CAClC;AACA;AACD,OAHD,MAGO;AACLlD,QAAAA,MAAM,CAACrD,IAAP,CAAYkG,MAAZ,EAAoBE,MAApB;AACD;AACF,KAXD,MAWO;AACL,WAAK1C,MAAL,CAAYwC,MAAZ,EAAoBE,MAApB;AACA/C,MAAAA,MAAM,GAAG,KAAKxE,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAhC;AACD;;AAED,QAAMmD,KAAK,GAAGR,KAAK,IAAIC,IAAI,GAAG,CAAX,CAAnB;AACA,QAAMQ,MAAM,GAAGD,KAAK,GAAG,CAAvB;AAEA,QAAME,MAAM,GAAGzF,IAAI,CAACkF,GAAL,CAASK,KAAT,CAAf;AACA,QAAMG,MAAM,GAAG1F,IAAI,CAACoF,GAAL,CAASG,KAAT,CAAf;AAEA,QAAMI,QAAQ,GAAGX,IAAI,GAAG,CAAxB;AAEA,QAAMY,SAAS,GAAID,QAAQ,GAAG,CAAZ,GAAiBA,QAAnC;;AAEA,SAAK,IAAI9G,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI8G,QAArB,EAA+B,EAAE9G,CAAjC,EAAoC;AAClC,UAAMgH,IAAI,GAAGhH,CAAC,GAAG+G,SAAS,GAAG/G,CAA7B;AAEA,UAAMiH,KAAK,GAAGP,KAAK,GAAGd,UAAR,GAAqBe,MAAM,GAAGK,IAA5C;AAEA,UAAM/F,CAAC,GAAGE,IAAI,CAACkF,GAAL,CAASY,KAAT,CAAV;AACA,UAAM/F,CAAC,GAAG,CAACC,IAAI,CAACoF,GAAL,CAASU,KAAT,CAAX;AAEA1D,MAAAA,MAAM,CAACrD,IAAP,CACE,CAAC0G,MAAM,GAAG3F,CAAT,GAAa4F,MAAM,GAAG3F,CAAvB,IAA4BuD,MAA5B,GAAqCa,EADvC,EAEE,CAACsB,MAAM,GAAG,CAAC1F,CAAV,GAAc2F,MAAM,GAAG5F,CAAxB,IAA6BwD,MAA7B,GAAsCc,EAFxC;AAID;;AAED,SAAKlG,KAAL;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE6H,EAAAA,SAAS,CAAChE,KAAD,EAAYC,KAAZ,EAAuB;AAAA,QAAtBD,KAAsB;AAAtBA,MAAAA,KAAsB,GAAd,CAAc;AAAA;;AAAA,QAAXC,KAAW;AAAXA,MAAAA,KAAW,GAAH,CAAG;AAAA;;AAC9B,SAAKgE,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiBlE,KAAjB;AACA,SAAK7E,SAAL,GAAiB8E,KAAjB;;AAEA,QAAI,KAAKpE,WAAT,EAAsB;AACpB,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAA9B,IAAwC,CAA5C,EAA+C;AAC7C,aAAKlB,WAAL,CAAiBsI,IAAjB,GAAwB,KAAKF,OAA7B;AACA,aAAKpI,WAAL,CAAiBqI,SAAjB,GAA6B,KAAKA,SAAlC;AACA,aAAKrI,WAAL,CAAiBV,SAAjB,GAA6B,KAAKA,SAAlC;AACD;AACF;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEiJ,EAAAA,OAAO,GAAG;AACR,SAAKH,OAAL,GAAe,KAAf;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAK/I,SAAL,GAAiB,CAAjB;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEkJ,EAAAA,QAAQ,CAAClF,CAAD,EAAIC,CAAJ,EAAOkF,KAAP,EAAcC,MAAd,EAAsB;AAC5B,SAAK9D,SAAL,CAAe,IAAI+D,eAAJ,CAAcrF,CAAd,EAAiBC,CAAjB,EAAoBkF,KAApB,EAA2BC,MAA3B,CAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,eAAe,CAACtF,CAAD,EAAIC,CAAJ,EAAOkF,KAAP,EAAcC,MAAd,EAAsBhD,MAAtB,EAA8B;AAC3C,SAAKd,SAAL,CAAe,IAAIiE,sBAAJ,CAAqBvF,CAArB,EAAwBC,CAAxB,EAA2BkF,KAA3B,EAAkCC,MAAlC,EAA0ChD,MAA1C,CAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEoD,EAAAA,UAAU,CAACxF,CAAD,EAAIC,CAAJ,EAAOmC,MAAP,EAAe;AACvB,SAAKd,SAAL,CAAe,IAAImE,YAAJ,CAAWzF,CAAX,EAAcC,CAAd,EAAiBmC,MAAjB,CAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEsD,EAAAA,WAAW,CAAC1F,CAAD,EAAIC,CAAJ,EAAOkF,KAAP,EAAcC,MAAd,EAAsB;AAC/B,SAAK9D,SAAL,CAAe,IAAIqE,aAAJ,CAAY3F,CAAZ,EAAeC,CAAf,EAAkBkF,KAAlB,EAAyBC,MAAzB,CAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEQ,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA;AACA,QAAI3E,MAAM,GAAG2E,IAAb;AAEA,QAAIxE,MAAM,GAAG,IAAb;;AAEA,QAAIH,MAAM,YAAYC,aAAtB,EAA+B;AAC7BE,MAAAA,MAAM,GAAGH,MAAM,CAACG,MAAhB;AACAH,MAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AAED,QAAI,CAAC4E,KAAK,CAACC,OAAN,CAAc7E,MAAd,CAAL,EAA4B;AAC1B;AACA;AACAA,MAAAA,MAAM,GAAG,IAAI4E,KAAJ,CAAUE,SAAS,CAACpI,MAApB,CAAT;;AAEA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,MAAM,CAACtD,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCuD,QAAAA,MAAM,CAACvD,CAAD,CAAN,GAAYqI,SAAS,CAACrI,CAAD,CAArB,CADsC,CACZ;AAC3B;AACF;;AAED,QAAMsD,KAAK,GAAG,IAAIE,aAAJ,CAAYD,MAAZ,CAAd;AAEAD,IAAAA,KAAK,CAACI,MAAN,GAAeA,MAAf;AAEA,SAAKC,SAAL,CAAeL,KAAf;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEgF,EAAAA,QAAQ,CAACjG,CAAD,EAAIC,CAAJ,EAAOiB,MAAP,EAAekB,MAAf,EAAuB8D,WAAvB,EAAoCC,QAApC,EAAkD;AAAA,QAAdA,QAAc;AAAdA,MAAAA,QAAc,GAAH,CAAG;AAAA;;AACxDD,IAAAA,WAAW,GAAGA,WAAW,IAAI9D,MAAM,GAAG,CAAtC;AAEA,QAAMmB,UAAU,GAAI,CAAC,CAAD,GAAKzE,IAAI,CAACsH,EAAX,GAAiB,CAAjB,GAAqBD,QAAxC;AACA,QAAME,GAAG,GAAGnF,MAAM,GAAG,CAArB;AACA,QAAMoF,KAAK,GAAG1C,cAAOyC,GAArB;AACA,QAAME,OAAO,GAAG,EAAhB;;AAEA,SAAK,IAAI5I,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0I,GAApB,EAAyB1I,CAAC,EAA1B,EAA8B;AAC5B,UAAM6I,CAAC,GAAG7I,CAAC,GAAG,CAAJ,GAAQuI,WAAR,GAAsB9D,MAAhC;AACA,UAAMwC,KAAK,GAAGjH,CAAC,GAAG2I,KAAJ,GAAY/C,UAA1B;AAEAgD,MAAAA,OAAO,CAAC1I,IAAR,CAAamC,CAAC,GAAGwG,CAAC,GAAG1H,IAAI,CAACkF,GAAL,CAASY,KAAT,CAArB,EAAsC3E,CAAC,GAAGuG,CAAC,GAAG1H,IAAI,CAACoF,GAAL,CAASU,KAAT,CAA9C;AACD;;AAED,WAAO,KAAKgB,WAAL,CAAiBW,OAAjB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKxK,SAAL,IAAkB,KAAK6I,OAAvB,IAAkC,KAAK1I,YAAL,CAAkBwB,MAAlB,GAA2B,CAAjE,EAAoE;AAClE,WAAK3B,SAAL,GAAiB,CAAjB;AACA,WAAKE,aAAL,GAAqB,GAArB;AAEA,WAAK2I,OAAL,GAAe,KAAf;AAEA,WAAK3H,WAAL,GAAmB,CAAC,CAApB;AACA,WAAKuJ,eAAL,GAAuB,CAAC,CAAxB;AACA,WAAK1J,KAAL;AACA,WAAKE,UAAL;AACA,WAAKd,YAAL,CAAkBwB,MAAlB,GAA2B,CAA3B;AACD;;AAED,SAAKlB,WAAL,GAAmB,IAAnB;AACA,SAAKW,WAAL,GAAmB,IAAnB;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEsJ,EAAAA,UAAU,GAAG;AACX,WACE,KAAKvK,YAAL,CAAkBwB,MAAlB,KAA6B,CAA7B,IACA,KAAKxB,YAAL,CAAkB,CAAlB,EAAqB6E,KAArB,CAA2B2F,IAA3B,KAAoCC,cAAOC,IAD3C,IAEA,CAAC,KAAK1K,YAAL,CAAkB,CAAlB,EAAqBH,SAHxB;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE8K,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB;AACA,QAAI,KAAKhK,KAAL,KAAe,KAAKC,aAAxB,EAAuC;AACrC,WAAKA,aAAL,GAAqB,KAAKD,KAA1B;AACA,WAAKM,SAAL,GAAiB,KAAKqJ,UAAL,EAAjB;AACD,KALoB,CAOrB;;;AACA,QAAI,KAAKrJ,SAAT,EAAoB;AAClB,WAAK2J,iBAAL,CAAuBD,QAAvB;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAACE,iBAAT,CAA2BF,QAAQ,CAACG,OAAT,CAAiBC,QAA5C;AACAJ,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,QAAjB,CAA0BC,MAA1B,CAAiC,IAAjC;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEJ,EAAAA,iBAAiB,CAACD,QAAD,EAAW;AAC1B,QAAMM,IAAI,GAAG,KAAKlL,YAAL,CAAkB,CAAlB,EAAqB6E,KAAlC;;AAEA,QAAI,CAAC,KAAK5D,WAAV,EAAuB;AACrB,WAAKA,WAAL,GAAmB,IAAIkK,eAAJ,CAAW,IAAIC,gBAAJ,CAAYA,iBAAQC,KAApB,CAAX,CAAnB;AACD;;AAED,QAAMC,MAAM,GAAG,KAAKrK,WAApB;AACA,QAAM0H,SAAS,GAAG,KAAK3I,YAAL,CAAkB,CAAlB,EAAqB2I,SAAvC;;AAEA,QAAI,KAAK1I,IAAL,KAAc,QAAlB,EAA4B;AAC1BqL,MAAAA,MAAM,CAACrL,IAAP,GAAc0I,SAAd;AACD,KAFD,MAEO,IACL,KAAK1I,IAAL,KAAc,KAAKkB,aAAnB,IACAwH,SAAS,KAAK,KAAKvH,kBAFd,EAGL;AACA,UAAMmK,EAAE,GAAGlM,UAAX;AACA,UAAMkE,EAAE,GAAGhE,UAAX;AAEA,0BAAQoJ,SAAR,EAAmB4C,EAAnB;AACA,0BAAQ,KAAKtL,IAAb,EAAmBsD,EAAnB;AAEAgI,MAAAA,EAAE,CAAC,CAAD,CAAF,IAAShI,EAAE,CAAC,CAAD,CAAX;AACAgI,MAAAA,EAAE,CAAC,CAAD,CAAF,IAAShI,EAAE,CAAC,CAAD,CAAX;AACAgI,MAAAA,EAAE,CAAC,CAAD,CAAF,IAAShI,EAAE,CAAC,CAAD,CAAX;AAEA+H,MAAAA,MAAM,CAACrL,IAAP,GAAc,oBAAQsL,EAAR,CAAd;AAEA,WAAKpK,aAAL,GAAqB,KAAKlB,IAA1B;AACA,WAAKmB,kBAAL,GAA0BuH,SAA1B;AACD;;AAED2C,IAAAA,MAAM,CAAC5G,KAAP,GAAe,KAAK1E,YAAL,CAAkB,CAAlB,EAAqBJ,SAApC;AACA0L,IAAAA,MAAM,CAACE,UAAP,GAAoB,KAAKA,UAAL,GAAkBF,MAAM,CAAC5G,KAA7C;AACA4G,IAAAA,MAAM,CAACnL,SAAP,GAAmB,KAAKA,SAAxB;AAEAmL,IAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB,CAAuB3C,KAAvB,GAA+BmC,IAAI,CAACnC,KAApC;AACAuC,IAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB,CAAuB1C,MAAvB,GAAgCkC,IAAI,CAAClC,MAArC;AAEAsC,IAAAA,MAAM,CAACK,SAAP,CAAiBC,cAAjB,GAAkC,KAAKD,SAAL,CAAeC,cAAjD;AAEAN,IAAAA,MAAM,CAACO,MAAP,CAAcC,GAAd,CAAkB,CAACZ,IAAI,CAACtH,CAAN,GAAUsH,IAAI,CAACnC,KAAjC,EAAwC,CAACmC,IAAI,CAACrH,CAAN,GAAUqH,IAAI,CAAClC,MAAvD;;AACAsC,IAAAA,MAAM,CAACS,eAAP;;AAEAT,IAAAA,MAAM,CAACX,YAAP,CAAoBC,QAApB;AACD;;AAEDoB,EAAAA,aAAa,CAACpB,QAAD,EAAW;AACtB,QAAI,KAAKpK,MAAL,KAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDoK,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,QAAjB,CAA0BC,MAA1B,CAAiC,IAAjC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEgB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKlL,WAAL,KAAqB,KAAKH,KAA9B,EAAqC;AACnC,WAAKG,WAAL,GAAmB,KAAKH,KAAxB;AACA,WAAKc,iBAAL;AAEA,WAAKV,iBAAL,GAAyB,IAAzB;AACD;;AAED,QAAMkL,EAAE,GAAG,KAAKxL,YAAhB;;AAEA,SAAKyL,OAAL,CAAaC,QAAb,CAAsB,KAAKT,SAA3B,EAAsCO,EAAE,CAACG,IAAzC,EAA+CH,EAAE,CAACI,IAAlD,EAAwDJ,EAAE,CAACK,IAA3D,EAAiEL,EAAE,CAACM,IAApE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKd,cAAL,CAAoBe,YAApB,CAAiCD,KAAjC,EAAwCvN,SAAxC;AAEA,QAAMa,YAAY,GAAG,KAAKA,YAA1B;;AAEA,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,YAAY,CAACwB,MAAjC,EAAyC,EAAED,CAA3C,EAA8C;AAC5C,UAAMqL,IAAI,GAAG5M,YAAY,CAACuB,CAAD,CAAzB;;AAEA,UAAI,CAACqL,IAAI,CAAChE,IAAV,EAAgB;AACd;AACD,OAL2C,CAO5C;;;AACA,UAAIgE,IAAI,CAAC/H,KAAT,EAAgB;AACd,YAAI+H,IAAI,CAAC/H,KAAL,CAAWgI,QAAX,CAAoB1N,SAAS,CAACyE,CAA9B,EAAiCzE,SAAS,CAAC0E,CAA3C,CAAJ,EAAmD;AACjD,cAAIiJ,OAAO,GAAG,KAAd;;AAEA,cAAIF,IAAI,CAACG,KAAT,EAAgB;AACd,iBAAK,IAAIxL,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGqL,IAAI,CAACG,KAAL,CAAWvL,MAA/B,EAAuCD,EAAC,EAAxC,EAA4C;AAC1C,kBAAMyL,IAAI,GAAGJ,IAAI,CAACG,KAAL,CAAWxL,EAAX,CAAb;;AAEA,kBAAIyL,IAAI,CAACH,QAAL,CAAc1N,SAAS,CAACyE,CAAxB,EAA2BzE,SAAS,CAAC0E,CAArC,CAAJ,EAA6C;AAC3CiJ,gBAAAA,OAAO,GAAG,IAAV;AACA;AACD;AACF;AACF;;AAED,cAAI,CAACA,OAAL,EAAc;AACZ,mBAAO,IAAP;AACD;AACF;AACF;AACF;;AAED,WAAO,KAAP;AACD;AAED;AACF;AACA;AACA;;;AACEpL,EAAAA,iBAAiB,GAAG;AAClB,QAAI2K,IAAI,GAAGY,QAAX;AACA,QAAIV,IAAI,GAAG,CAACU,QAAZ;AAEA,QAAIX,IAAI,GAAGW,QAAX;AACA,QAAIT,IAAI,GAAG,CAACS,QAAZ;;AAEA,QAAI,KAAKjN,YAAL,CAAkBwB,MAAtB,EAA8B;AAC5B,UAAIqD,KAAK,GAAG,CAAZ;AACA,UAAIjB,CAAC,GAAG,CAAR;AACA,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIqJ,CAAC,GAAG,CAAR;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAK,IAAI5L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvB,YAAL,CAAkBwB,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,YAAMqL,IAAI,GAAG,KAAK5M,YAAL,CAAkBuB,CAAlB,CAAb;AACA,YAAMiJ,IAAI,GAAGoC,IAAI,CAACpC,IAAlB;AACA,YAAM3K,SAAS,GAAG+M,IAAI,CAAC/M,SAAvB;AACA,YAAME,aAAa,GAAG6M,IAAI,CAAC7M,aAA3B;AAEA,YAAMqN,UAAU,GAAGvN,SAAS,GAAGE,aAA/B;AAEA8E,QAAAA,KAAK,GAAG+H,IAAI,CAAC/H,KAAb;;AAEA,YAAI2F,IAAI,KAAKC,cAAOC,IAAhB,IAAwBF,IAAI,KAAKC,cAAO4C,IAA5C,EAAkD;AAChDzJ,UAAAA,CAAC,GAAGiB,KAAK,CAACjB,CAAN,GAAUwJ,UAAd;AACAvJ,UAAAA,CAAC,GAAGgB,KAAK,CAAChB,CAAN,GAAUuJ,UAAd;AACAF,UAAAA,CAAC,GAAGrI,KAAK,CAACkE,KAAN,GAAcqE,UAAU,GAAG,CAA/B;AACAD,UAAAA,CAAC,GAAGtI,KAAK,CAACmE,MAAN,GAAeoE,UAAU,GAAG,CAAhC;AAEAf,UAAAA,IAAI,GAAGzI,CAAC,GAAGyI,IAAJ,GAAWzI,CAAX,GAAeyI,IAAtB;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AAEAD,UAAAA,IAAI,GAAGzI,CAAC,GAAGyI,IAAJ,GAAWzI,CAAX,GAAeyI,IAAtB;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AACD,SAXD,MAWO,IAAIhC,IAAI,KAAKC,cAAO6C,IAApB,EAA0B;AAC/B1J,UAAAA,CAAC,GAAGiB,KAAK,CAACjB,CAAV;AACAC,UAAAA,CAAC,GAAGgB,KAAK,CAAChB,CAAV;AACAqJ,UAAAA,CAAC,GAAGrI,KAAK,CAACmB,MAAN,GAAeoH,UAAnB;AACAD,UAAAA,CAAC,GAAGtI,KAAK,CAACmB,MAAN,GAAeoH,UAAnB;AAEAf,UAAAA,IAAI,GAAGzI,CAAC,GAAGsJ,CAAJ,GAAQb,IAAR,GAAezI,CAAC,GAAGsJ,CAAnB,GAAuBb,IAA9B;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AAEAD,UAAAA,IAAI,GAAGzI,CAAC,GAAGsJ,CAAJ,GAAQb,IAAR,GAAezI,CAAC,GAAGsJ,CAAnB,GAAuBb,IAA9B;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AACD,SAXM,MAWA,IAAIhC,IAAI,KAAKC,cAAO8C,IAApB,EAA0B;AAC/B3J,UAAAA,CAAC,GAAGiB,KAAK,CAACjB,CAAV;AACAC,UAAAA,CAAC,GAAGgB,KAAK,CAAChB,CAAV;AACAqJ,UAAAA,CAAC,GAAGrI,KAAK,CAACkE,KAAN,GAAcqE,UAAlB;AACAD,UAAAA,CAAC,GAAGtI,KAAK,CAACmE,MAAN,GAAeoE,UAAnB;AAEAf,UAAAA,IAAI,GAAGzI,CAAC,GAAGsJ,CAAJ,GAAQb,IAAR,GAAezI,CAAC,GAAGsJ,CAAnB,GAAuBb,IAA9B;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AAEAD,UAAAA,IAAI,GAAGzI,CAAC,GAAGsJ,CAAJ,GAAQb,IAAR,GAAezI,CAAC,GAAGsJ,CAAnB,GAAuBb,IAA9B;AACAE,UAAAA,IAAI,GAAG3I,CAAC,GAAGsJ,CAAJ,GAAQX,IAAR,GAAe3I,CAAC,GAAGsJ,CAAnB,GAAuBX,IAA9B;AACD,SAXM,MAWA;AACL;AACA,cAAM1H,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,cAAIgB,EAAE,GAAG,CAAT;AACA,cAAIC,EAAE,GAAG,CAAT;AACA,cAAIjC,EAAE,GAAG,CAAT;AACA,cAAIC,EAAE,GAAG,CAAT;AACA,cAAIyJ,EAAE,GAAG,CAAT;AACA,cAAIC,EAAE,GAAG,CAAT;AACA,cAAI5G,EAAE,GAAG,CAAT;AACA,cAAIC,EAAE,GAAG,CAAT;;AAEA,eAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAAJ,GAAQX,MAAM,CAACtD,MAA/B,EAAuCiE,CAAC,IAAI,CAA5C,EAA+C;AAC7C7B,YAAAA,CAAC,GAAGkB,MAAM,CAACW,CAAD,CAAV;AACA5B,YAAAA,CAAC,GAAGiB,MAAM,CAACW,CAAC,GAAG,CAAL,CAAV;AACAK,YAAAA,EAAE,GAAGhB,MAAM,CAACW,CAAC,GAAG,CAAL,CAAX;AACAM,YAAAA,EAAE,GAAGjB,MAAM,CAACW,CAAC,GAAG,CAAL,CAAX;AACA3B,YAAAA,EAAE,GAAGpB,IAAI,CAAC2D,GAAL,CAASP,EAAE,GAAGlC,CAAd,CAAL;AACAG,YAAAA,EAAE,GAAGrB,IAAI,CAAC2D,GAAL,CAASN,EAAE,GAAGlC,CAAd,CAAL;AACAsJ,YAAAA,CAAC,GAAGC,UAAU,GAAG,CAAjB;AACAF,YAAAA,CAAC,GAAGxK,IAAI,CAACC,IAAL,CAAUmB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAJ;;AAEA,gBAAImJ,CAAC,GAAG,IAAR,EAAc;AACZ;AACD;;AAEDM,YAAAA,EAAE,GAAG,CAAEL,CAAC,GAAGD,CAAL,GAAUnJ,EAAV,GAAeD,EAAhB,IAAsB,CAA3B;AACA2J,YAAAA,EAAE,GAAG,CAAEN,CAAC,GAAGD,CAAL,GAAUpJ,EAAV,GAAeC,EAAhB,IAAsB,CAA3B;AACA8C,YAAAA,EAAE,GAAG,CAACf,EAAE,GAAGlC,CAAN,IAAW,CAAhB;AACAkD,YAAAA,EAAE,GAAG,CAACf,EAAE,GAAGlC,CAAN,IAAW,CAAhB;AAEAwI,YAAAA,IAAI,GAAGxF,EAAE,GAAG2G,EAAL,GAAUnB,IAAV,GAAiBxF,EAAE,GAAG2G,EAAtB,GAA2BnB,IAAlC;AACAE,YAAAA,IAAI,GAAG1F,EAAE,GAAG2G,EAAL,GAAUjB,IAAV,GAAiB1F,EAAE,GAAG2G,EAAtB,GAA2BjB,IAAlC;AAEAD,YAAAA,IAAI,GAAGxF,EAAE,GAAG2G,EAAL,GAAUnB,IAAV,GAAiBxF,EAAE,GAAG2G,EAAtB,GAA2BnB,IAAlC;AACAE,YAAAA,IAAI,GAAG1F,EAAE,GAAG2G,EAAL,GAAUjB,IAAV,GAAiB1F,EAAE,GAAG2G,EAAtB,GAA2BjB,IAAlC;AACD;AACF;AACF;AACF,KAzFD,MAyFO;AACLH,MAAAA,IAAI,GAAG,CAAP;AACAE,MAAAA,IAAI,GAAG,CAAP;AACAD,MAAAA,IAAI,GAAG,CAAP;AACAE,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,QAAMkB,OAAO,GAAG,KAAKjN,aAArB;AAEA,SAAKC,YAAL,CAAkB2L,IAAlB,GAAyBA,IAAI,GAAGqB,OAAhC;AACA,SAAKhN,YAAL,CAAkB6L,IAAlB,GAAyBA,IAAI,GAAGmB,OAAhC;AAEA,SAAKhN,YAAL,CAAkB4L,IAAlB,GAAyBA,IAAI,GAAGoB,OAAhC;AACA,SAAKhN,YAAL,CAAkB8L,IAAlB,GAAyBA,IAAI,GAAGkB,OAAhC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACExI,EAAAA,SAAS,CAACL,KAAD,EAAQ;AACf,QAAI,KAAKvE,WAAT,EAAsB;AACpB;AACA,UAAI,KAAKA,WAAL,CAAiBuE,KAAjB,CAAuBC,MAAvB,CAA8BtD,MAA9B,IAAwC,CAA5C,EAA+C;AAC7C,aAAKxB,YAAL,CAAkB2N,GAAlB;AACD;AACF;;AAED,SAAKrN,WAAL,GAAmB,IAAnB;AAEA,QAAMsM,IAAI,GAAG,IAAIgB,qBAAJ,CACX,KAAK/N,SADM,EAEX,KAAKC,SAFM,EAGX,KAAK8E,SAHM,EAIX,KAAK+D,SAJM,EAKX,KAAK/I,SALM,EAMX,KAAK8I,OANM,EAOX,KAAK/I,WAPM,EAQXkF,KARW,EASX,KAAK9E,aATM,CAAb;AAYA,SAAKC,YAAL,CAAkByB,IAAlB,CAAuBmL,IAAvB;;AAEA,QAAIA,IAAI,CAACpC,IAAL,KAAcC,cAAOoD,IAAzB,EAA+B;AAC7BjB,MAAAA,IAAI,CAAC/H,KAAL,CAAWI,MAAX,GAAoB2H,IAAI,CAAC/H,KAAL,CAAWI,MAA/B;AACA,WAAK3E,WAAL,GAAmBsM,IAAnB;AACD;;AAED,SAAKhM,KAAL;AAEA,WAAOgM,IAAP;AACD;;AAEDkB,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,UAAZ,EAA4B;AAAA,QAAhBA,UAAgB;AAAhBA,MAAAA,UAAgB,GAAH,CAAG;AAAA;;AAC/C,QAAMC,MAAM,GAAG,KAAKC,cAAL,EAAf;;AAEA,QAAMC,YAAY,GAAGC,uBAAcC,MAAd,CACnBJ,MAAM,CAAClF,KADY,EAEnBkF,MAAM,CAACjF,MAFY,EAGnB+E,SAHmB,EAInBC,UAJmB,CAArB;;AAOA,QAAI,CAAChP,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG,IAAIsP,uBAAJ,EAAjB;AACD;;AAED,SAAK3C,SAAL,CAAe4C,oBAAf;AACA,SAAK5C,SAAL,CAAe6C,cAAf,CAA8BC,IAA9B,CAAmCxP,UAAnC;AAEAA,IAAAA,UAAU,CAACyP,MAAX;AAEAzP,IAAAA,UAAU,CAAC0P,EAAX,IAAiBV,MAAM,CAACrK,CAAxB;AACA3E,IAAAA,UAAU,CAAC2P,EAAX,IAAiBX,MAAM,CAACpK,CAAxB;AAEA7E,IAAAA,cAAc,CAACiM,MAAf,CAAsB,IAAtB,EAA4BkD,YAA5B,EAA0C,IAA1C,EAAgDlP,UAAhD;;AAEA,QAAM4P,OAAO,GAAGzD,iBAAQ0D,UAAR,CACdX,YAAY,CAACY,WAAb,CAAyBC,mBAAzB,CAA6CC,MAD/B,EAEdlB,SAFc,EAGd,UAHc,CAAhB;;AAMAc,IAAAA,OAAO,CAACE,WAAR,CAAoBf,UAApB,GAAiCA,UAAjC;AACAa,IAAAA,OAAO,CAACE,WAAR,CAAoBG,MAApB;AAEA,WAAOL,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEM,EAAAA,SAAS,GAAG;AACV;AACA,QAAM7O,WAAW,GAAG,KAAKA,WAAzB;;AAEA,QAAIA,WAAW,IAAIA,WAAW,CAACuE,KAA/B,EAAsC;AACpCvE,MAAAA,WAAW,CAACuE,KAAZ,CAAkBuK,KAAlB;AACD;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR;AACA,QAAMrC,IAAI,GAAG,KAAKhN,YAAL,CAAkB2N,GAAlB,EAAb;AAEA,SAAKrN,WAAL,GAAmB,KAAKN,YAAL,CAAkB,KAAKA,YAAL,CAAkBwB,MAAlB,GAA2B,CAA7C,CAAnB;AAEA,SAAKlB,WAAL,CAAiB+O,OAAjB,CAAyBrC,IAAI,CAACnI,KAA9B;AACA,SAAKvE,WAAL,GAAmB,IAAnB;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEgP,EAAAA,OAAO,CAACC,OAAD,EAAU;AACf,UAAMD,OAAN,CAAcC,OAAd,EADe,CAGf;;AACA,SAAK,IAAIhO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvB,YAAL,CAAkBwB,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AACjD,WAAKvB,YAAL,CAAkBuB,CAAlB,EAAqB+N,OAArB;AACD,KANc,CAQf;;;AACA,SAAK,IAAME,EAAX,IAAiB,KAAKjP,MAAtB,EAA8B;AAC5B,WAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlF,MAAL,CAAYiP,EAAZ,EAAgB5C,IAAhB,CAAqBpL,MAAzC,EAAiD,EAAEiE,CAAnD,EAAsD;AACpD,aAAKlF,MAAL,CAAYiP,EAAZ,EAAgB5C,IAAhB,CAAqBnH,CAArB,EAAwB6J,OAAxB;AACD;AACF;;AAED,QAAI,KAAKrO,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBqO,OAAjB;AACD;;AAED,SAAKtP,YAAL,GAAoB,IAApB;AAEA,SAAKM,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKG,YAAL,GAAoB,IAApB;AACD;;AAjsC6C;;;AAosChDlB,QAAQ,CAACiQ,eAAT,GAA2B,IAA3B;AAEAjQ,QAAQ,CAAC4E,MAAT,GAAkB;AAChBoB,EAAAA,QAAQ,EAAE,KADM;AAEhBnB,EAAAA,SAAS,EAAE,EAFK;AAGhBC,EAAAA,WAAW,EAAE,CAHG;AAIhBC,EAAAA,WAAW,EAAE;AAJG,CAAlB","sourcesContent":["import Container from \"../display/Container\";\nimport RenderTexture from \"../textures/RenderTexture\";\nimport Texture from \"../textures/Texture\";\nimport GraphicsData from \"./GraphicsData\";\nimport Sprite from \"../sprites/Sprite\";\nimport {\n  Matrix,\n  Point,\n  Rectangle,\n  RoundedRectangle,\n  Ellipse,\n  Polygon,\n  Circle\n} from \"../math\";\nimport { hex2rgb, rgb2hex } from \"../utils\";\nimport { SHAPES, BLEND_MODES, PI_2 } from \"../const\";\nimport Bounds from \"../display/Bounds\";\nimport bezierCurveTo from \"./utils/bezierCurveTo\";\nimport CanvasRenderer from \"../renderers/canvas/CanvasRenderer\";\n\nlet canvasRenderer;\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempColor1 = new Float32Array(4);\nconst tempColor2 = new Float32Array(4);\n\nexport default class Graphics extends Container {\n  constructor(nativeLines = false) {\n    super();\n\n    this.fillAlpha = 1;\n\n    /**\n     * The width (thickness) of any lines drawn.\n     *\n     * @member {number}\n     * @default 0\n     */\n    this.lineWidth = 0;\n\n    /**\n     * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     *\n     * @member {boolean}\n     */\n    this.nativeLines = nativeLines;\n\n    /**\n     * The color of any lines drawn.\n     *\n     * @member {string}\n     * @default 0\n     */\n    this.lineColor = 0;\n\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    this.lineAlignment = 0.5;\n\n    /**\n     * Graphics data\n     *\n     * @member {InkPaint.GraphicsData[]}\n     * @private\n     */\n    this.graphicsData = [];\n\n    /**\n     * The tint applied to the graphic shape. This is a hex value. Apply a value of 0xFFFFFF to\n     * reset the tint.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    this.tint = 0xffffff;\n\n    /**\n     * The previous tint applied to the graphic shape. Used to compare to the current tint and\n     * check if theres change.\n     *\n     * @member {number}\n     * @private\n     * @default 0xFFFFFF\n     */\n    this._prevTint = 0xffffff;\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `InkPaint.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default InkPaint.BLEND_MODES.NORMAL;\n     * @see InkPaint.BLEND_MODES\n     */\n    this.blendMode = BLEND_MODES.NORMAL;\n\n    /**\n     * Current path\n     *\n     * @member {InkPaint.GraphicsData}\n     * @private\n     */\n    this.currentPath = null;\n\n    /**\n     * Array containing some WebGL-related properties used by the WebGL renderer.\n     *\n     * @member {object<number, object>}\n     * @private\n     */\n    // TODO - _webgl should use a prototype object, not a random undocumented object...\n    this._webGL = {};\n\n    /**\n     * Whether this shape is being used as a mask.\n     *\n     * @member {boolean}\n     */\n    this.isMask = false;\n\n    /**\n     * The bounds' padding used for bounds calculation.\n     *\n     * @member {number}\n     */\n    this.boundsPadding = 0;\n\n    /**\n     * A cache of the local bounds to prevent recalculation.\n     *\n     * @member {InkPaint.Rectangle}\n     * @private\n     */\n    this._localBounds = new Bounds();\n\n    /**\n     * Used to detect if the graphics object has changed. If this is set to true then the graphics\n     * object will be recalculated.\n     *\n     * @member {boolean}\n     * @private\n     */\n    this.dirty = 0;\n\n    /**\n     * Used to detect if we need to do a fast rect check using the id compare method\n     * @type {Number}\n     */\n    this.fastRectDirty = -1;\n\n    /**\n     * Used to detect if we clear the graphics webGL data\n     * @type {Number}\n     */\n    this.clearDirty = 0;\n\n    /**\n     * Used to detect if we we need to recalculate local bounds\n     * @type {Number}\n     */\n    this.boundsDirty = -1;\n\n    /**\n     * Used to detect if the cached sprite object needs to be updated.\n     *\n     * @member {boolean}\n     * @private\n     */\n    this.cachedSpriteDirty = false;\n\n    this._spriteRect = null;\n    this._fastRect = false;\n\n    this._prevRectTint = null;\n    this._prevRectFillColor = null;\n  }\n\n  clone() {\n    const clone = new Graphics();\n\n    clone.renderable = this.renderable;\n    clone.fillAlpha = this.fillAlpha;\n    clone.lineWidth = this.lineWidth;\n    clone.lineColor = this.lineColor;\n    clone.lineAlignment = this.lineAlignment;\n    clone.tint = this.tint;\n    clone.blendMode = this.blendMode;\n    clone.isMask = this.isMask;\n    clone.boundsPadding = this.boundsPadding;\n    clone.dirty = 0;\n    clone.cachedSpriteDirty = this.cachedSpriteDirty;\n\n    // copy graphics data\n    for (let i = 0; i < this.graphicsData.length; ++i) {\n      clone.graphicsData.push(this.graphicsData[i].clone());\n    }\n\n    clone.currentPath = clone.graphicsData[clone.graphicsData.length - 1];\n\n    clone.updateLocalBounds();\n\n    return clone;\n  }\n\n  /**\n   * Calculate length of quadratic curve\n   * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n   * for the detailed explanation of math behind this.\n   *\n   * @private\n   * @param {number} fromX - x-coordinate of curve start point\n   * @param {number} fromY - y-coordinate of curve start point\n   * @param {number} cpX - x-coordinate of curve control point\n   * @param {number} cpY - y-coordinate of curve control point\n   * @param {number} toX - x-coordinate of curve end point\n   * @param {number} toY - y-coordinate of curve end point\n   * @return {number} Length of quadratic curve\n   */\n  _quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY) {\n    const ax = fromX - 2.0 * cpX + toX;\n    const ay = fromY - 2.0 * cpY + toY;\n    const bx = 2.0 * cpX - 2.0 * fromX;\n    const by = 2.0 * cpY - 2.0 * fromY;\n    const a = 4.0 * (ax * ax + ay * ay);\n    const b = 4.0 * (ax * bx + ay * by);\n    const c = bx * bx + by * by;\n\n    const s = 2.0 * Math.sqrt(a + b + c);\n    const a2 = Math.sqrt(a);\n    const a32 = 2.0 * a * a2;\n    const c2 = 2.0 * Math.sqrt(c);\n    const ba = b / a2;\n\n    return (\n      (a32 * s +\n        a2 * b * (s - c2) +\n        (4.0 * c * a - b * b) * Math.log((2.0 * a2 + ba + s) / (ba + c2))) /\n      (4.0 * a32)\n    );\n  }\n\n  /**\n   * Calculate length of bezier curve.\n   * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n   * Therefore numerical solution is used.\n   *\n   * @private\n   * @param {number} fromX - Starting point x\n   * @param {number} fromY - Starting point y\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {number} Length of bezier curve\n   */\n  _bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n    const n = 10;\n    let result = 0.0;\n    let t = 0.0;\n    let t2 = 0.0;\n    let t3 = 0.0;\n    let nt = 0.0;\n    let nt2 = 0.0;\n    let nt3 = 0.0;\n    let x = 0.0;\n    let y = 0.0;\n    let dx = 0.0;\n    let dy = 0.0;\n    let prevX = fromX;\n    let prevY = fromY;\n\n    for (let i = 1; i <= n; ++i) {\n      t = i / n;\n      t2 = t * t;\n      t3 = t2 * t;\n      nt = 1.0 - t;\n      nt2 = nt * nt;\n      nt3 = nt2 * nt;\n\n      x = nt3 * fromX + 3.0 * nt2 * t * cpX + 3.0 * nt * t2 * cpX2 + t3 * toX;\n      y = nt3 * fromY + 3.0 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n      dx = prevX - x;\n      dy = prevY - y;\n      prevX = x;\n      prevY = y;\n\n      result += Math.sqrt(dx * dx + dy * dy);\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate number of segments for the curve based on its length to ensure its smoothness.\n   *\n   * @private\n   * @param {number} length - length of curve\n   * @return {number} Number of segments\n   */\n  _segmentsCount(length) {\n    let result = Math.ceil(length / Graphics.CURVES.maxLength);\n\n    if (result < Graphics.CURVES.minSegments) {\n      result = Graphics.CURVES.minSegments;\n    } else if (result > Graphics.CURVES.maxSegments) {\n      result = Graphics.CURVES.maxSegments;\n    }\n\n    return result;\n  }\n\n  /**\n   * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n   * method or the drawCircle() method.\n   *\n   * @param {number} [lineWidth=0] - width of the line to draw, will update the objects stored style\n   * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n   * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n   * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  lineStyle(lineWidth = 0, color = 0, alpha = 1, alignment = 0.5) {\n    this.lineWidth = lineWidth;\n    this.lineColor = color;\n    this.lineAlpha = alpha;\n    this.lineAlignment = alignment;\n\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length) {\n        // halfway through a line? start a new one!\n        const shape = new Polygon(this.currentPath.shape.points.slice(-2));\n\n        shape.closed = false;\n\n        this.drawShape(shape);\n      } else {\n        // otherwise its empty so lets just set the line properties\n        this.currentPath.lineWidth = this.lineWidth;\n        this.currentPath.lineColor = this.lineColor;\n        this.currentPath.lineAlpha = this.lineAlpha;\n        this.currentPath.lineAlignment = this.lineAlignment;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Moves the current drawing position to x, y.\n   *\n   * @param {number} x - the X coordinate to move to\n   * @param {number} y - the Y coordinate to move to\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  moveTo(x, y) {\n    const shape = new Polygon([x, y]);\n\n    shape.closed = false;\n    this.drawShape(shape);\n\n    return this;\n  }\n\n  /**\n   * Draws a line using the current line style from the current drawing position to (x, y);\n   * The current drawing position is then set to (x, y).\n   *\n   * @param {number} x - the X coordinate to draw to\n   * @param {number} y - the Y coordinate to draw to\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  lineTo(x, y) {\n    const points = this.currentPath.shape.points;\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n      this.dirty++;\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  quadraticCurveTo(cpX, cpY, toX, toY) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points = [0, 0];\n      }\n    } else {\n      this.moveTo(0, 0);\n    }\n\n    const points = this.currentPath.shape.points;\n    let xa = 0;\n    let ya = 0;\n\n    if (points.length === 0) {\n      this.moveTo(0, 0);\n    }\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const n = Graphics.CURVES.adaptive\n      ? this._segmentsCount(\n          this._quadraticCurveLength(fromX, fromY, cpX, cpY, toX, toY)\n        )\n      : 20;\n\n    for (let i = 1; i <= n; ++i) {\n      const j = i / n;\n\n      xa = fromX + (cpX - fromX) * j;\n      ya = fromY + (cpY - fromY) * j;\n\n      points.push(\n        xa + (cpX + (toX - cpX) * j - xa) * j,\n        ya + (cpY + (toY - cpY) * j - ya) * j\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * Calculate the points for a bezier curve and then draws it.\n   *\n   * @param {number} cpX - Control point x\n   * @param {number} cpY - Control point y\n   * @param {number} cpX2 - Second Control point x\n   * @param {number} cpY2 - Second Control point y\n   * @param {number} toX - Destination point x\n   * @param {number} toY - Destination point y\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points = [0, 0];\n      }\n    } else {\n      this.moveTo(0, 0);\n    }\n\n    const points = this.currentPath.shape.points;\n\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    points.length -= 2;\n\n    const n = Graphics.CURVES.adaptive\n      ? this._segmentsCount(\n          this._bezierCurveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        )\n      : 20;\n\n    bezierCurveTo(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY, n, points);\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * The arcTo() method creates an arc/curve between two tangents on the canvas.\n   *\n   * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n   *\n   * @param {number} x1 - The x-coordinate of the beginning of the arc\n   * @param {number} y1 - The y-coordinate of the beginning of the arc\n   * @param {number} x2 - The x-coordinate of the end of the arc\n   * @param {number} y2 - The y-coordinate of the end of the arc\n   * @param {number} radius - The radius of the arc\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length === 0) {\n        this.currentPath.shape.points.push(x1, y1);\n      }\n    } else {\n      this.moveTo(x1, y1);\n    }\n\n    const points = this.currentPath.shape.points;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs(a1 * b2 - b1 * a2);\n\n    if (mm < 1.0e-8 || radius === 0) {\n      if (\n        points[points.length - 2] !== x1 ||\n        points[points.length - 1] !== y1\n      ) {\n        points.push(x1, y1);\n      }\n    } else {\n      const dd = a1 * a1 + b1 * b1;\n      const cc = a2 * a2 + b2 * b2;\n      const tt = a1 * a2 + b1 * b2;\n      const k1 = (radius * Math.sqrt(dd)) / mm;\n      const k2 = (radius * Math.sqrt(cc)) / mm;\n      const j1 = (k1 * tt) / dd;\n      const j2 = (k2 * tt) / cc;\n      const cx = k1 * b2 + k2 * b1;\n      const cy = k1 * a2 + k2 * a1;\n      const px = b1 * (k2 + j1);\n      const py = a1 * (k2 + j1);\n      const qx = b2 * (k1 + j2);\n      const qy = a2 * (k1 + j2);\n      const startAngle = Math.atan2(py - cy, px - cx);\n      const endAngle = Math.atan2(qy - cy, qx - cx);\n\n      this.arc(\n        cx + x1,\n        cy + y1,\n        radius,\n        startAngle,\n        endAngle,\n        b1 * a2 > b2 * a1\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   *\n   * @param {number} cx - The x-coordinate of the center of the circle\n   * @param {number} cy - The y-coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param {number} endAngle - The ending angle, in radians\n   * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false) {\n    if (startAngle === endAngle) {\n      return this;\n    }\n\n    if (!anticlockwise && endAngle <= startAngle) {\n      endAngle += PI_2;\n    } else if (anticlockwise && startAngle <= endAngle) {\n      startAngle += PI_2;\n    }\n\n    const sweep = endAngle - startAngle;\n    const segs = Graphics.CURVES.adaptive\n      ? this._segmentsCount(Math.abs(sweep) * radius)\n      : Math.ceil(Math.abs(sweep) / PI_2) * 40;\n\n    if (sweep === 0) {\n      return this;\n    }\n\n    const startX = cx + Math.cos(startAngle) * radius;\n    const startY = cy + Math.sin(startAngle) * radius;\n\n    // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n    let points = this.currentPath ? this.currentPath.shape.points : null;\n\n    if (points) {\n      // We check how far our start is from the last existing point\n      const xDiff = Math.abs(points[points.length - 2] - startX);\n      const yDiff = Math.abs(points[points.length - 1] - startY);\n\n      if (xDiff < 0.001 && yDiff < 0.001) {\n        // If the point is very close, we don't add it, since this would lead to artifacts\n        // during tesselation due to floating point imprecision.\n      } else {\n        points.push(startX, startY);\n      }\n    } else {\n      this.moveTo(startX, startY);\n      points = this.currentPath.shape.points;\n    }\n\n    const theta = sweep / (segs * 2);\n    const theta2 = theta * 2;\n\n    const cTheta = Math.cos(theta);\n    const sTheta = Math.sin(theta);\n\n    const segMinus = segs - 1;\n\n    const remainder = (segMinus % 1) / segMinus;\n\n    for (let i = 0; i <= segMinus; ++i) {\n      const real = i + remainder * i;\n\n      const angle = theta + startAngle + theta2 * real;\n\n      const c = Math.cos(angle);\n      const s = -Math.sin(angle);\n\n      points.push(\n        (cTheta * c + sTheta * s) * radius + cx,\n        (cTheta * -s + sTheta * c) * radius + cy\n      );\n    }\n\n    this.dirty++;\n\n    return this;\n  }\n\n  /**\n   * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n   * (such as lineTo() or drawCircle()) use when drawing.\n   *\n   * @param {number} [color=0] - the color of the fill\n   * @param {number} [alpha=1] - the alpha of the fill\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  beginFill(color = 0, alpha = 1) {\n    this.filling = true;\n    this.fillColor = color;\n    this.fillAlpha = alpha;\n\n    if (this.currentPath) {\n      if (this.currentPath.shape.points.length <= 2) {\n        this.currentPath.fill = this.filling;\n        this.currentPath.fillColor = this.fillColor;\n        this.currentPath.fillAlpha = this.fillAlpha;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n   *\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  endFill() {\n    this.filling = false;\n    this.fillColor = null;\n    this.fillAlpha = 1;\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawRect(x, y, width, height) {\n    this.drawShape(new Rectangle(x, y, width, height));\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} x - The X coord of the top-left of the rectangle\n   * @param {number} y - The Y coord of the top-left of the rectangle\n   * @param {number} width - The width of the rectangle\n   * @param {number} height - The height of the rectangle\n   * @param {number} radius - Radius of the rectangle corners\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawRoundedRect(x, y, width, height, radius) {\n    this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n\n    return this;\n  }\n\n  /**\n   * Draws a circle.\n   *\n   * @param {number} x - The X coordinate of the center of the circle\n   * @param {number} y - The Y coordinate of the center of the circle\n   * @param {number} radius - The radius of the circle\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawCircle(x, y, radius) {\n    this.drawShape(new Circle(x, y, radius));\n\n    return this;\n  }\n\n  /**\n   * Draws an ellipse.\n   *\n   * @param {number} x - The X coordinate of the center of the ellipse\n   * @param {number} y - The Y coordinate of the center of the ellipse\n   * @param {number} width - The half width of the ellipse\n   * @param {number} height - The half height of the ellipse\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawEllipse(x, y, width, height) {\n    this.drawShape(new Ellipse(x, y, width, height));\n\n    return this;\n  }\n\n  /**\n   * Draws a polygon using the given path.\n   *\n   * @param {number[]|InkPaint.Point[]|InkPaint.Polygon} path - The path data used to construct the polygon.\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawPolygon(path) {\n    // prevents an argument assignment deopt\n    // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n    let points = path;\n\n    let closed = true;\n\n    if (points instanceof Polygon) {\n      closed = points.closed;\n      points = points.points;\n    }\n\n    if (!Array.isArray(points)) {\n      // prevents an argument leak deopt\n      // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n      points = new Array(arguments.length);\n\n      for (let i = 0; i < points.length; ++i) {\n        points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n      }\n    }\n\n    const shape = new Polygon(points);\n\n    shape.closed = closed;\n\n    this.drawShape(shape);\n\n    return this;\n  }\n\n  /**\n   * Draw a star shape with an abitrary number of points.\n   *\n   * @param {number} x - Center X position of the star\n   * @param {number} y - Center Y position of the star\n   * @param {number} points - The number of points of the star, must be > 1\n   * @param {number} radius - The outer radius of the star\n   * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n   * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  drawStar(x, y, points, radius, innerRadius, rotation = 0) {\n    innerRadius = innerRadius || radius / 2;\n\n    const startAngle = (-1 * Math.PI) / 2 + rotation;\n    const len = points * 2;\n    const delta = PI_2 / len;\n    const polygon = [];\n\n    for (let i = 0; i < len; i++) {\n      const r = i % 2 ? innerRadius : radius;\n      const angle = i * delta + startAngle;\n\n      polygon.push(x + r * Math.cos(angle), y + r * Math.sin(angle));\n    }\n\n    return this.drawPolygon(polygon);\n  }\n\n  /**\n   * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n   *\n   * @return {InkPaint.Graphics} This Graphics object. Good for chaining method calls\n   */\n  clear() {\n    if (this.lineWidth || this.filling || this.graphicsData.length > 0) {\n      this.lineWidth = 0;\n      this.lineAlignment = 0.5;\n\n      this.filling = false;\n\n      this.boundsDirty = -1;\n      this.canvasTintDirty = -1;\n      this.dirty++;\n      this.clearDirty++;\n      this.graphicsData.length = 0;\n    }\n\n    this.currentPath = null;\n    this._spriteRect = null;\n\n    return this;\n  }\n\n  /**\n   * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n   * masked with gl.scissor.\n   *\n   * @returns {boolean} True if only 1 rect.\n   */\n  isFastRect() {\n    return (\n      this.graphicsData.length === 1 &&\n      this.graphicsData[0].shape.type === SHAPES.RECT &&\n      !this.graphicsData[0].lineWidth\n    );\n  }\n\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @private\n   * @param {InkPaint.WebGLRenderer} renderer - The renderer\n   */\n  _renderWebGL(renderer) {\n    // if the sprite is not visible or the alpha is 0 then no need to render this element\n    if (this.dirty !== this.fastRectDirty) {\n      this.fastRectDirty = this.dirty;\n      this._fastRect = this.isFastRect();\n    }\n\n    // TODO this check can be moved to dirty?\n    if (this._fastRect) {\n      this._renderSpriteRect(renderer);\n    } else {\n      renderer.setObjectRenderer(renderer.plugins.graphics);\n      renderer.plugins.graphics.render(this);\n    }\n  }\n\n  /**\n   * Renders a sprite rectangle.\n   *\n   * @private\n   * @param {InkPaint.WebGLRenderer} renderer - The renderer\n   */\n  _renderSpriteRect(renderer) {\n    const rect = this.graphicsData[0].shape;\n\n    if (!this._spriteRect) {\n      this._spriteRect = new Sprite(new Texture(Texture.EMPTY));\n    }\n\n    const sprite = this._spriteRect;\n    const fillColor = this.graphicsData[0].fillColor;\n\n    if (this.tint === 0xffffff) {\n      sprite.tint = fillColor;\n    } else if (\n      this.tint !== this._prevRectTint ||\n      fillColor !== this._prevRectFillColor\n    ) {\n      const t1 = tempColor1;\n      const t2 = tempColor2;\n\n      hex2rgb(fillColor, t1);\n      hex2rgb(this.tint, t2);\n\n      t1[0] *= t2[0];\n      t1[1] *= t2[1];\n      t1[2] *= t2[2];\n\n      sprite.tint = rgb2hex(t1);\n\n      this._prevRectTint = this.tint;\n      this._prevRectFillColor = fillColor;\n    }\n\n    sprite.alpha = this.graphicsData[0].fillAlpha;\n    sprite.worldAlpha = this.worldAlpha * sprite.alpha;\n    sprite.blendMode = this.blendMode;\n\n    sprite._texture._frame.width = rect.width;\n    sprite._texture._frame.height = rect.height;\n\n    sprite.transform.worldTransform = this.transform.worldTransform;\n\n    sprite.anchor.set(-rect.x / rect.width, -rect.y / rect.height);\n    sprite._onAnchorUpdate();\n\n    sprite._renderWebGL(renderer);\n  }\n\n  _renderCanvas(renderer) {\n    if (this.isMask === true) {\n      return;\n    }\n\n    renderer.plugins.graphics.render(this);\n  }\n\n  /**\n   * Retrieves the bounds of the graphic shape as a rectangle object\n   *\n   * @private\n   */\n  _calculateBounds() {\n    if (this.boundsDirty !== this.dirty) {\n      this.boundsDirty = this.dirty;\n      this.updateLocalBounds();\n\n      this.cachedSpriteDirty = true;\n    }\n\n    const lb = this._localBounds;\n\n    this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);\n  }\n\n  /**\n   * Tests if a point is inside this graphics object\n   *\n   * @param {InkPaint.Point} point - the point to test\n   * @return {boolean} the result of the test\n   */\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n\n    const graphicsData = this.graphicsData;\n\n    for (let i = 0; i < graphicsData.length; ++i) {\n      const data = graphicsData[i];\n\n      if (!data.fill) {\n        continue;\n      }\n\n      // only deal with fills..\n      if (data.shape) {\n        if (data.shape.contains(tempPoint.x, tempPoint.y)) {\n          let hitHole = false;\n\n          if (data.holes) {\n            for (let i = 0; i < data.holes.length; i++) {\n              const hole = data.holes[i];\n\n              if (hole.contains(tempPoint.x, tempPoint.y)) {\n                hitHole = true;\n                break;\n              }\n            }\n          }\n\n          if (!hitHole) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the bounds of the object\n   *\n   */\n  updateLocalBounds() {\n    let minX = Infinity;\n    let maxX = -Infinity;\n\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    if (this.graphicsData.length) {\n      let shape = 0;\n      let x = 0;\n      let y = 0;\n      let w = 0;\n      let h = 0;\n\n      for (let i = 0; i < this.graphicsData.length; i++) {\n        const data = this.graphicsData[i];\n        const type = data.type;\n        const lineWidth = data.lineWidth;\n        const lineAlignment = data.lineAlignment;\n\n        const lineOffset = lineWidth * lineAlignment;\n\n        shape = data.shape;\n\n        if (type === SHAPES.RECT || type === SHAPES.RREC) {\n          x = shape.x - lineOffset;\n          y = shape.y - lineOffset;\n          w = shape.width + lineOffset * 2;\n          h = shape.height + lineOffset * 2;\n\n          minX = x < minX ? x : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y < minY ? y : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else if (type === SHAPES.CIRC) {\n          x = shape.x;\n          y = shape.y;\n          w = shape.radius + lineOffset;\n          h = shape.radius + lineOffset;\n\n          minX = x - w < minX ? x - w : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y - h < minY ? y - h : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else if (type === SHAPES.ELIP) {\n          x = shape.x;\n          y = shape.y;\n          w = shape.width + lineOffset;\n          h = shape.height + lineOffset;\n\n          minX = x - w < minX ? x - w : minX;\n          maxX = x + w > maxX ? x + w : maxX;\n\n          minY = y - h < minY ? y - h : minY;\n          maxY = y + h > maxY ? y + h : maxY;\n        } else {\n          // POLY\n          const points = shape.points;\n          let x2 = 0;\n          let y2 = 0;\n          let dx = 0;\n          let dy = 0;\n          let rw = 0;\n          let rh = 0;\n          let cx = 0;\n          let cy = 0;\n\n          for (let j = 0; j + 2 < points.length; j += 2) {\n            x = points[j];\n            y = points[j + 1];\n            x2 = points[j + 2];\n            y2 = points[j + 3];\n            dx = Math.abs(x2 - x);\n            dy = Math.abs(y2 - y);\n            h = lineOffset * 2;\n            w = Math.sqrt(dx * dx + dy * dy);\n\n            if (w < 1e-9) {\n              continue;\n            }\n\n            rw = ((h / w) * dy + dx) / 2;\n            rh = ((h / w) * dx + dy) / 2;\n            cx = (x2 + x) / 2;\n            cy = (y2 + y) / 2;\n\n            minX = cx - rw < minX ? cx - rw : minX;\n            maxX = cx + rw > maxX ? cx + rw : maxX;\n\n            minY = cy - rh < minY ? cy - rh : minY;\n            maxY = cy + rh > maxY ? cy + rh : maxY;\n          }\n        }\n      }\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n\n    const padding = this.boundsPadding;\n\n    this._localBounds.minX = minX - padding;\n    this._localBounds.maxX = maxX + padding;\n\n    this._localBounds.minY = minY - padding;\n    this._localBounds.maxY = maxY + padding;\n  }\n\n  /**\n   * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n   *\n   * @param {InkPaint.Circle|InkPaint.Ellipse|InkPaint.Polygon|InkPaint.Rectangle|InkPaint.RoundedRectangle} shape - The shape object to draw.\n   * @return {InkPaint.GraphicsData} The generated GraphicsData object.\n   */\n  drawShape(shape) {\n    if (this.currentPath) {\n      // check current path!\n      if (this.currentPath.shape.points.length <= 2) {\n        this.graphicsData.pop();\n      }\n    }\n\n    this.currentPath = null;\n\n    const data = new GraphicsData(\n      this.lineWidth,\n      this.lineColor,\n      this.lineAlpha,\n      this.fillColor,\n      this.fillAlpha,\n      this.filling,\n      this.nativeLines,\n      shape,\n      this.lineAlignment\n    );\n\n    this.graphicsData.push(data);\n\n    if (data.type === SHAPES.POLY) {\n      data.shape.closed = data.shape.closed;\n      this.currentPath = data;\n    }\n\n    this.dirty++;\n\n    return data;\n  }\n\n  generateCanvasTexture(scaleMode, resolution = 1) {\n    const bounds = this.getLocalBounds();\n\n    const canvasBuffer = RenderTexture.create(\n      bounds.width,\n      bounds.height,\n      scaleMode,\n      resolution\n    );\n\n    if (!canvasRenderer) {\n      canvasRenderer = new CanvasRenderer();\n    }\n\n    this.transform.updateLocalTransform();\n    this.transform.localTransform.copy(tempMatrix);\n\n    tempMatrix.invert();\n\n    tempMatrix.tx -= bounds.x;\n    tempMatrix.ty -= bounds.y;\n\n    canvasRenderer.render(this, canvasBuffer, true, tempMatrix);\n\n    const texture = Texture.fromCanvas(\n      canvasBuffer.baseTexture._canvasRenderTarget.canvas,\n      scaleMode,\n      \"graphics\"\n    );\n\n    texture.baseTexture.resolution = resolution;\n    texture.baseTexture.update();\n\n    return texture;\n  }\n\n  /**\n   * Closes the current path.\n   *\n   * @return {InkPaint.Graphics} Returns itself.\n   */\n  closePath() {\n    // ok so close path assumes next one is a hole!\n    const currentPath = this.currentPath;\n\n    if (currentPath && currentPath.shape) {\n      currentPath.shape.close();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a hole in the current path.\n   *\n   * @return {InkPaint.Graphics} Returns itself.\n   */\n  addHole() {\n    // this is a hole!\n    const hole = this.graphicsData.pop();\n\n    this.currentPath = this.graphicsData[this.graphicsData.length - 1];\n\n    this.currentPath.addHole(hole.shape);\n    this.currentPath = null;\n\n    return this;\n  }\n\n  /**\n   * Destroys the Graphics object.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n   *  options have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have\n   *  their destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    super.destroy(options);\n\n    // destroy each of the GraphicsData objects\n    for (let i = 0; i < this.graphicsData.length; ++i) {\n      this.graphicsData[i].destroy();\n    }\n\n    // for each webgl data entry, destroy the WebGLGraphicsData\n    for (const id in this._webGL) {\n      for (let j = 0; j < this._webGL[id].data.length; ++j) {\n        this._webGL[id].data[j].destroy();\n      }\n    }\n\n    if (this._spriteRect) {\n      this._spriteRect.destroy();\n    }\n\n    this.graphicsData = null;\n\n    this.currentPath = null;\n    this._webGL = null;\n    this._localBounds = null;\n  }\n}\n\nGraphics._SPRITE_TEXTURE = null;\n\nGraphics.CURVES = {\n  adaptive: false,\n  maxLength: 10,\n  minSegments: 8,\n  maxSegments: 2048\n};\n"],"file":"Graphics.js"}