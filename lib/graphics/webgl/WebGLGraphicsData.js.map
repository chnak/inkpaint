{"version":3,"sources":["../../../src/graphics/webgl/WebGLGraphicsData.js"],"names":["WebGLGraphicsData","constructor","gl","shader","attribsState","color","points","indices","buffer","glCore","GLBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","dirty","nativeLines","glPoints","glIndices","vao","VertexArrayObject","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aColor","reset","length","upload","Float32Array","Uint16Array","destroy"],"mappings":";;;;;;;AAAA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,iBAAN,CACf;AACI;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,EAAD,EAAKC,MAAL,EAAaC,YAAb,EACX;AACI;AACR;AACA;AACA;AACA;AACQ,SAAKF,EAAL,GAAUA,EAAV,CANJ,CAQI;;AACA;AACR;AACA;AACA;;AACQ,SAAKG,KAAL,GAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAbJ,CAa4B;;AAExB;AACR;AACA;AACA;;AACQ,SAAKC,MAAL,GAAc,EAAd;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,OAAL,GAAe,EAAf;AACA;AACR;AACA;AACA;;AACQ,SAAKC,MAAL,GAAcC,oBAAOC,QAAP,CAAgBC,kBAAhB,CAAmCT,EAAnC,CAAd;AAEA;AACR;AACA;AACA;;AACQ,SAAKU,WAAL,GAAmBH,oBAAOC,QAAP,CAAgBG,iBAAhB,CAAkCX,EAAlC,CAAnB;AAEA;AACR;AACA;AACA;;AACQ,SAAKY,KAAL,GAAa,IAAb;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,KAAnB;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;AACR;AACA;AACA;;AACQ,SAAKd,MAAL,GAAcA,MAAd;AAEA,SAAKe,GAAL,GAAW,IAAIT,oBAAOU,iBAAX,CAA6BjB,EAA7B,EAAiCE,YAAjC,EACVgB,QADU,CACD,KAAKR,WADJ,EAEVS,YAFU,CAEG,KAAKb,MAFR,EAEgBL,MAAM,CAACmB,UAAP,CAAkBC,eAFlC,EAEmDrB,EAAE,CAACsB,KAFtD,EAE6D,KAF7D,EAEoE,IAAI,CAFxE,EAE2E,CAF3E,EAGVH,YAHU,CAGG,KAAKb,MAHR,EAGgBL,MAAM,CAACmB,UAAP,CAAkBG,MAHlC,EAG0CvB,EAAE,CAACsB,KAH7C,EAGoD,KAHpD,EAG2D,IAAI,CAH/D,EAGkE,IAAI,CAHtE,CAAX;AAIH;AAED;AACJ;AACA;;;AACIE,EAAAA,KAAK,GACL;AACI,SAAKpB,MAAL,CAAYqB,MAAZ,GAAqB,CAArB;AACA,SAAKpB,OAAL,CAAaoB,MAAb,GAAsB,CAAtB;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,MAAM,GACN;AACI,SAAKZ,QAAL,GAAgB,IAAIa,YAAJ,CAAiB,KAAKvB,MAAtB,CAAhB;AACA,SAAKE,MAAL,CAAYoB,MAAZ,CAAmB,KAAKZ,QAAxB;AAEA,SAAKC,SAAL,GAAiB,IAAIa,WAAJ,CAAgB,KAAKvB,OAArB,CAAjB;AACA,SAAKK,WAAL,CAAiBgB,MAAjB,CAAwB,KAAKX,SAA7B;AAEA,SAAKH,KAAL,GAAa,KAAb;AACH;AAED;AACJ;AACA;;;AACIiB,EAAAA,OAAO,GACP;AACI,SAAK1B,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKW,GAAL,CAASa,OAAT;AACA,SAAKvB,MAAL,CAAYuB,OAAZ;AACA,SAAKnB,WAAL,CAAiBmB,OAAjB;AAEA,SAAK7B,EAAL,GAAU,IAAV;AAEA,SAAKM,MAAL,GAAc,IAAd;AACA,SAAKI,WAAL,GAAmB,IAAnB;AAEA,SAAKI,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;AAnHL","sourcesContent":["import glCore from 'pixi-gl-core';\n\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof InkPaint\n */\nexport default class WebGLGraphicsData\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n     * @param {InkPaint.Shader} shader - The shader\n     * @param {object} attribsState - The state for the VAO\n     */\n    constructor(gl, shader, attribsState)\n    {\n        /**\n         * The current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        // TODO does this need to be split before uploading??\n        /**\n         * An array of color components (r,g,b)\n         * @member {number[]}\n         */\n        this.color = [0, 0, 0]; // color split!\n\n        /**\n         * An array of points to draw\n         * @member {InkPaint.Point[]}\n         */\n        this.points = [];\n\n        /**\n         * The indices of the vertices\n         * @member {number[]}\n         */\n        this.indices = [];\n        /**\n         * The main buffer\n         * @member {WebGLBuffer}\n         */\n        this.buffer = glCore.GLBuffer.createVertexBuffer(gl);\n\n        /**\n         * The index buffer\n         * @member {WebGLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl);\n\n        /**\n         * Whether this graphics is dirty or not\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Whether this graphics is nativeLines or not\n         * @member {boolean}\n         */\n        this.nativeLines = false;\n\n        this.glPoints = null;\n        this.glIndices = null;\n\n        /**\n         *\n         * @member {InkPaint.Shader}\n         */\n        this.shader = shader;\n\n        this.vao = new glCore.VertexArrayObject(gl, attribsState)\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0)\n        .addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);\n    }\n\n    /**\n     * Resets the vertices and the indices\n     */\n    reset()\n    {\n        this.points.length = 0;\n        this.indices.length = 0;\n    }\n\n    /**\n     * Binds the buffers and uploads the data\n     */\n    upload()\n    {\n        this.glPoints = new Float32Array(this.points);\n        this.buffer.upload(this.glPoints);\n\n        this.glIndices = new Uint16Array(this.indices);\n        this.indexBuffer.upload(this.glIndices);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Empties all the data\n     */\n    destroy()\n    {\n        this.color = null;\n        this.points = null;\n        this.indices = null;\n\n        this.vao.destroy();\n        this.buffer.destroy();\n        this.indexBuffer.destroy();\n\n        this.gl = null;\n\n        this.buffer = null;\n        this.indexBuffer = null;\n\n        this.glPoints = null;\n        this.glIndices = null;\n    }\n}\n"],"file":"WebGLGraphicsData.js"}