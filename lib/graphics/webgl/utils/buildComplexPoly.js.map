{"version":3,"sources":["../../../../src/graphics/webgl/utils/buildComplexPoly.js"],"names":["buildComplexPoly","graphicsData","webGLData","points","slice","length","indices","alpha","fillAlpha","color","fillColor","minX","Infinity","maxX","minY","maxY","x","y","i","push"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,YAA1B,EAAwCC,SAAxC,EACf;AACI;AACA,MAAMC,MAAM,GAAGF,YAAY,CAACE,MAAb,CAAoBC,KAApB,EAAf;;AAEA,MAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EACA;AACI;AACH,GAPL,CASI;;;AACA,MAAMC,OAAO,GAAGJ,SAAS,CAACI,OAA1B;AAEAJ,EAAAA,SAAS,CAACC,MAAV,GAAmBA,MAAnB;AACAD,EAAAA,SAAS,CAACK,KAAV,GAAkBN,YAAY,CAACO,SAA/B;AACAN,EAAAA,SAAS,CAACO,KAAV,GAAkB,oBAAQR,YAAY,CAACS,SAArB,CAAlB,CAdJ,CAgBI;;AACA,MAAIC,IAAI,GAAGC,QAAX;AACA,MAAIC,IAAI,GAAG,CAACD,QAAZ;AAEA,MAAIE,IAAI,GAAGF,QAAX;AACA,MAAIG,IAAI,GAAG,CAACH,QAAZ;AAEA,MAAII,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR,CAxBJ,CA0BI;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,MAAM,CAACE,MAA3B,EAAmCa,CAAC,IAAI,CAAxC,EACA;AACIF,IAAAA,CAAC,GAAGb,MAAM,CAACe,CAAD,CAAV;AACAD,IAAAA,CAAC,GAAGd,MAAM,CAACe,CAAC,GAAG,CAAL,CAAV;AAEAP,IAAAA,IAAI,GAAGK,CAAC,GAAGL,IAAJ,GAAWK,CAAX,GAAeL,IAAtB;AACAE,IAAAA,IAAI,GAAGG,CAAC,GAAGH,IAAJ,GAAWG,CAAX,GAAeH,IAAtB;AAEAC,IAAAA,IAAI,GAAGG,CAAC,GAAGH,IAAJ,GAAWG,CAAX,GAAeH,IAAtB;AACAC,IAAAA,IAAI,GAAGE,CAAC,GAAGF,IAAJ,GAAWE,CAAX,GAAeF,IAAtB;AACH,GArCL,CAuCI;;;AACAZ,EAAAA,MAAM,CAACgB,IAAP,CAAYR,IAAZ,EAAkBG,IAAlB,EACYD,IADZ,EACkBC,IADlB,EAEYD,IAFZ,EAEkBE,IAFlB,EAGYJ,IAHZ,EAGkBI,IAHlB,EAxCJ,CA6CI;AAEA;;AACA,MAAMV,MAAM,GAAGF,MAAM,CAACE,MAAP,GAAgB,CAA/B;;AAEA,OAAK,IAAIa,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGb,MAApB,EAA4Ba,EAAC,EAA7B,EACA;AACIZ,IAAAA,OAAO,CAACa,IAAR,CAAaD,EAAb;AACH;AACJ","sourcesContent":["import { hex2rgb } from '../../../utils';\n\n/**\n * Builds a complex polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {InkPaint.Graphics} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nexport default function buildComplexPoly(graphicsData, webGLData)\n{\n    // TODO - no need to copy this as it gets turned into a Float32Array anyways..\n    const points = graphicsData.points.slice();\n\n    if (points.length < 6)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n    const indices = webGLData.indices;\n\n    webGLData.points = points;\n    webGLData.alpha = graphicsData.fillAlpha;\n    webGLData.color = hex2rgb(graphicsData.fillColor);\n\n    // calculate the bounds..\n    let minX = Infinity;\n    let maxX = -Infinity;\n\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    let x = 0;\n    let y = 0;\n\n    // get size..\n    for (let i = 0; i < points.length; i += 2)\n    {\n        x = points[i];\n        y = points[i + 1];\n\n        minX = x < minX ? x : minX;\n        maxX = x > maxX ? x : maxX;\n\n        minY = y < minY ? y : minY;\n        maxY = y > maxY ? y : maxY;\n    }\n\n    // add a quad to the end cos there is no point making another buffer!\n    points.push(minX, minY,\n                maxX, minY,\n                maxX, maxY,\n                minX, maxY);\n\n    // push a quad onto the end..\n\n    // TODO - this aint needed!\n    const length = points.length / 2;\n\n    for (let i = 0; i < length; i++)\n    {\n        indices.push(i);\n    }\n}\n"],"file":"buildComplexPoly.js"}