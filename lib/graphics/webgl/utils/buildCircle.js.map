{"version":3,"sources":["../../../../src/graphics/webgl/utils/buildCircle.js"],"names":["buildCircle","graphicsData","webGLData","webGLDataNativeLines","circleData","shape","x","y","width","height","type","SHAPES","CIRC","radius","totalSegs","Math","floor","sqrt","seg","PI","fill","color","fillColor","alpha","fillAlpha","r","g","b","verts","points","indices","vecPos","length","push","i","sin","cos","lineWidth","tempPoints"],"mappings":"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","sourcesContent":["import buildLine from './buildLine';\nimport { SHAPES } from '../../../const';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {InkPaint.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildCircle(graphicsData, webGLData, webGLDataNativeLines)\n{\n    // need to convert points to a nice regular data\n    const circleData = graphicsData.shape;\n    const x = circleData.x;\n    const y = circleData.y;\n    let width;\n    let height;\n\n    // TODO - bit hacky??\n    if (graphicsData.type === SHAPES.CIRC)\n    {\n        width = circleData.radius;\n        height = circleData.radius;\n    }\n    else\n    {\n        width = circleData.width;\n        height = circleData.height;\n    }\n\n    if (width === 0 || height === 0)\n    {\n        return;\n    }\n\n    const totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n        || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n    const seg = (Math.PI * 2) / totalSegs;\n\n    if (graphicsData.fill)\n    {\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        let vecPos = verts.length / 6;\n\n        indices.push(vecPos);\n\n        for (let i = 0; i < totalSegs + 1; i++)\n        {\n            verts.push(x, y, r, g, b, alpha);\n\n            verts.push(\n                x + (Math.sin(seg * i) * width),\n                y + (Math.cos(seg * i) * height),\n                r, g, b, alpha\n            );\n\n            indices.push(vecPos++, vecPos++);\n        }\n\n        indices.push(vecPos - 1);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        const tempPoints = graphicsData.points;\n\n        graphicsData.points = [];\n\n        for (let i = 0; i < totalSegs; i++)\n        {\n            graphicsData.points.push(\n                x + (Math.sin(seg * -i) * width),\n                y + (Math.cos(seg * -i) * height)\n            );\n        }\n\n        graphicsData.points.push(\n            graphicsData.points[0],\n            graphicsData.points[1]\n        );\n\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n"],"file":"buildCircle.js"}