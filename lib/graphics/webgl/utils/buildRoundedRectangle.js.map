{"version":3,"sources":["../../../../src/graphics/webgl/utils/buildRoundedRectangle.js"],"names":["buildRoundedRectangle","graphicsData","webGLData","webGLDataNativeLines","rrectData","shape","x","y","width","height","radius","recPoints","push","quadraticBezierCurve","fill","color","fillColor","alpha","fillAlpha","r","g","b","verts","points","indices","vecPos","length","triangles","i","j","lineWidth","tempPoints","getPt","n1","n2","perc","diff","fromX","fromY","cpX","cpY","toX","toY","out","n","xa","ya","xb","yb"],"mappings":"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","sourcesContent":["import earcut from 'earcut';\nimport buildLine from './buildLine';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {InkPaint.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildRoundedRectangle(graphicsData, webGLData, webGLDataNativeLines)\n{\n    const rrectData = graphicsData.shape;\n    const x = rrectData.x;\n    const y = rrectData.y;\n    const width = rrectData.width;\n    const height = rrectData.height;\n\n    const radius = rrectData.radius;\n\n    const recPoints = [];\n\n    recPoints.push(x + radius, y);\n    quadraticBezierCurve(x + width - radius, y, x + width, y, x + width, y + radius, recPoints);\n    quadraticBezierCurve(x + width, y + height - radius, x + width, y + height, x + width - radius, y + height, recPoints);\n    quadraticBezierCurve(x + radius, y + height, x, y + height, x, y + height - radius, recPoints);\n    quadraticBezierCurve(x, y + radius, x, y, x + radius + 0.0000000001, y, recPoints);\n\n    // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n    // TODO - fix this properly, this is not very elegant.. but it works for now.\n\n    if (graphicsData.fill)\n    {\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        const vecPos = verts.length / 6;\n\n        const triangles = earcut(recPoints, null, 2);\n\n        for (let i = 0, j = triangles.length; i < j; i += 3)\n        {\n            indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n\n        for (let i = 0, j = recPoints.length; i < j; i++)\n        {\n            verts.push(recPoints[i], recPoints[++i], r, g, b, alpha);\n        }\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        const tempPoints = graphicsData.points;\n\n        graphicsData.points = recPoints;\n\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1, n2, perc)\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out = [])\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n"],"file":"buildRoundedRectangle.js"}