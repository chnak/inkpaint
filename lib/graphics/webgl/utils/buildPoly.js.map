{"version":3,"sources":["../../../../src/graphics/webgl/utils/buildPoly.js"],"names":["buildPoly","graphicsData","webGLData","webGLDataNativeLines","points","shape","slice","fill","length","holeArray","holes","i","hole","push","concat","verts","indices","color","fillColor","alpha","fillAlpha","r","g","b","triangles","vertPos","lineWidth"],"mappings":"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","sourcesContent":["import buildLine from \"./buildLine\";\nimport { hex2rgb } from \"../../../utils\";\nimport earcut from \"earcut\";\n\nexport default function buildPoly(\n  graphicsData,\n  webGLData,\n  webGLDataNativeLines\n) {\n  graphicsData.points = graphicsData.shape.points.slice();\n\n  let points = graphicsData.points;\n\n  if (graphicsData.fill && points.length >= 6) {\n    const holeArray = [];\n    // Process holes..\n    const holes = graphicsData.holes;\n\n    for (let i = 0; i < holes.length; i++) {\n      const hole = holes[i];\n\n      holeArray.push(points.length / 2);\n\n      points = points.concat(hole.points);\n    }\n\n    // get first and last point.. figure out the middle!\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n\n    const length = points.length / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.fillColor);\n    const alpha = graphicsData.fillAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    const triangles = earcut(points, holeArray, 2);\n\n    if (!triangles) {\n      return;\n    }\n\n    const vertPos = verts.length / 6;\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      indices.push(triangles[i] + vertPos);\n      indices.push(triangles[i] + vertPos);\n      indices.push(triangles[i + 1] + vertPos);\n      indices.push(triangles[i + 2] + vertPos);\n      indices.push(triangles[i + 2] + vertPos);\n    }\n\n    for (let i = 0; i < length; i++) {\n      verts.push(points[i * 2], points[i * 2 + 1], r, g, b, alpha);\n    }\n  }\n\n  if (graphicsData.lineWidth > 0) {\n    buildLine(graphicsData, webGLData, webGLDataNativeLines);\n  }\n}\n"],"file":"buildPoly.js"}