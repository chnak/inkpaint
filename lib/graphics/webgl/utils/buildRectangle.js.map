{"version":3,"sources":["../../../../src/graphics/webgl/utils/buildRectangle.js"],"names":["buildRectangle","graphicsData","webGLData","webGLDataNativeLines","rectData","shape","x","y","width","height","fill","color","fillColor","alpha","fillAlpha","r","g","b","verts","points","indices","vertPos","length","push","lineWidth","tempPoints"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CACbC,YADa,EAEbC,SAFa,EAGbC,oBAHa,EAIb;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGH,YAAY,CAACI,KAA9B;AACA,MAAMC,CAAC,GAAGF,QAAQ,CAACE,CAAnB;AACA,MAAMC,CAAC,GAAGH,QAAQ,CAACG,CAAnB;AACA,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAvB;AACA,MAAMC,MAAM,GAAGL,QAAQ,CAACK,MAAxB;;AAEA,MAAIR,YAAY,CAACS,IAAjB,EAAuB;AACrB,QAAMC,KAAK,GAAG,oBAAQV,YAAY,CAACW,SAArB,CAAd;AACA,QAAMC,KAAK,GAAGZ,YAAY,CAACa,SAA3B;AAEA,QAAMC,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAWE,KAArB;AACA,QAAMG,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAWE,KAArB;AACA,QAAMI,CAAC,GAAGN,KAAK,CAAC,CAAD,CAAL,GAAWE,KAArB;AAEA,QAAMK,KAAK,GAAGhB,SAAS,CAACiB,MAAxB;AACA,QAAMC,OAAO,GAAGlB,SAAS,CAACkB,OAA1B;AAEA,QAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,GAAe,CAA/B,CAXqB,CAarB;;AACAJ,IAAAA,KAAK,CAACK,IAAN,CAAWjB,CAAX,EAAcC,CAAd;AACAW,IAAAA,KAAK,CAACK,IAAN,CAAWR,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBJ,KAApB;AAEAK,IAAAA,KAAK,CAACK,IAAN,CAAWjB,CAAC,GAAGE,KAAf,EAAsBD,CAAtB;AACAW,IAAAA,KAAK,CAACK,IAAN,CAAWR,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBJ,KAApB;AAEAK,IAAAA,KAAK,CAACK,IAAN,CAAWjB,CAAX,EAAcC,CAAC,GAAGE,MAAlB;AACAS,IAAAA,KAAK,CAACK,IAAN,CAAWR,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBJ,KAApB;AAEAK,IAAAA,KAAK,CAACK,IAAN,CAAWjB,CAAC,GAAGE,KAAf,EAAsBD,CAAC,GAAGE,MAA1B;AACAS,IAAAA,KAAK,CAACK,IAAN,CAAWR,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBJ,KAApB,EAxBqB,CA0BrB;;AACAO,IAAAA,OAAO,CAACG,IAAR,CACEF,OADF,EAEEA,OAFF,EAGEA,OAAO,GAAG,CAHZ,EAIEA,OAAO,GAAG,CAJZ,EAKEA,OAAO,GAAG,CALZ,EAMEA,OAAO,GAAG,CANZ;AAQD;;AAED,MAAIpB,YAAY,CAACuB,SAAjB,EAA4B;AAC1B,QAAMC,UAAU,GAAGxB,YAAY,CAACkB,MAAhC;AAEAlB,IAAAA,YAAY,CAACkB,MAAb,GAAsB,CACpBb,CADoB,EAEpBC,CAFoB,EAGpBD,CAAC,GAAGE,KAHgB,EAIpBD,CAJoB,EAKpBD,CAAC,GAAGE,KALgB,EAMpBD,CAAC,GAAGE,MANgB,EAOpBH,CAPoB,EAQpBC,CAAC,GAAGE,MARgB,EASpBH,CAToB,EAUpBC,CAVoB,CAAtB;AAaA,4BAAUN,YAAV,EAAwBC,SAAxB,EAAmCC,oBAAnC;AAEAF,IAAAA,YAAY,CAACkB,MAAb,GAAsBM,UAAtB;AACD;AACF","sourcesContent":["import buildLine from \"./buildLine\";\nimport { hex2rgb } from \"../../../utils\";\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {InkPaint.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildRectangle(\n  graphicsData,\n  webGLData,\n  webGLDataNativeLines\n) {\n  // --- //\n  // need to convert points to a nice regular data\n  //\n  const rectData = graphicsData.shape;\n  const x = rectData.x;\n  const y = rectData.y;\n  const width = rectData.width;\n  const height = rectData.height;\n\n  if (graphicsData.fill) {\n    const color = hex2rgb(graphicsData.fillColor);\n    const alpha = graphicsData.fillAlpha;\n\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n\n    const vertPos = verts.length / 6;\n\n    // start\n    verts.push(x, y);\n    verts.push(r, g, b, alpha);\n\n    verts.push(x + width, y);\n    verts.push(r, g, b, alpha);\n\n    verts.push(x, y + height);\n    verts.push(r, g, b, alpha);\n\n    verts.push(x + width, y + height);\n    verts.push(r, g, b, alpha);\n\n    // insert 2 dead triangles..\n    indices.push(\n      vertPos,\n      vertPos,\n      vertPos + 1,\n      vertPos + 2,\n      vertPos + 3,\n      vertPos + 3\n    );\n  }\n\n  if (graphicsData.lineWidth) {\n    const tempPoints = graphicsData.points;\n\n    graphicsData.points = [\n      x,\n      y,\n      x + width,\n      y,\n      x + width,\n      y + height,\n      x,\n      y + height,\n      x,\n      y\n    ];\n\n    buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n    graphicsData.points = tempPoints;\n  }\n}\n"],"file":"buildRectangle.js"}