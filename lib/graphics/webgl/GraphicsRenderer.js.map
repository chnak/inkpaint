{"version":3,"sources":["../../../src/graphics/webgl/GraphicsRenderer.js"],"names":["GraphicsRenderer","ObjectRenderer","constructor","renderer","graphicsDataPool","primitiveShader","gl","CONTEXT_UID","onContextChange","PrimitiveShader","destroy","prototype","call","i","length","render","graphics","webGLData","webGL","_webGL","dirty","updateGraphics","shader","bindShader","state","setBlendMode","blendMode","n","data","shaderTemp","uniforms","translationMatrix","transform","worldTransform","toArray","tint","alpha","worldAlpha","bindVao","vao","nativeLines","drawArrays","LINES","points","draw","TRIANGLE_STRIP","indices","lastIndex","clearDirty","push","webGLDataNativeLines","graphicsData","getWebGLData","lineWidth","type","SHAPES","POLY","RECT","CIRC","ELIP","RREC","upload","pop","WebGLGraphicsData","attribsState","reset","WebGLRenderer","registerPlugin"],"mappings":"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","sourcesContent":["import { hex2rgb } from \"../../utils\";\nimport { SHAPES } from \"../../const\";\nimport ObjectRenderer from \"../../renderers/webgl/utils/ObjectRenderer\";\nimport WebGLRenderer from \"../../renderers/webgl/WebGLRenderer\";\nimport WebGLGraphicsData from \"./WebGLGraphicsData\";\nimport PrimitiveShader from \"./shaders/PrimitiveShader\";\n\nimport buildPoly from \"./utils/buildPoly\";\nimport buildRectangle from \"./utils/buildRectangle\";\nimport buildRoundedRectangle from \"./utils/buildRoundedRectangle\";\nimport buildCircle from \"./utils/buildCircle\";\n\n/**\n * Renders the graphics object.\n *\n * @class\n * @memberof InkPaint\n * @extends InkPaint.ObjectRenderer\n */\nexport default class GraphicsRenderer extends ObjectRenderer {\n  /**\n   * @param {InkPaint.WebGLRenderer} renderer - The renderer this object renderer works for.\n   */\n  constructor(renderer) {\n    super(renderer);\n\n    this.graphicsDataPool = [];\n\n    this.primitiveShader = null;\n\n    this.gl = renderer.gl;\n\n    // easy access!\n    this.CONTEXT_UID = 0;\n  }\n\n  /**\n   * Called when there is a WebGL context change\n   *\n   * @private\n   *\n   */\n  onContextChange() {\n    this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    this.primitiveShader = new PrimitiveShader(this.gl);\n  }\n\n  /**\n   * Destroys this renderer.\n   *\n   */\n  destroy() {\n    ObjectRenderer.prototype.destroy.call(this);\n\n    for (let i = 0; i < this.graphicsDataPool.length; ++i) {\n      this.graphicsDataPool[i].destroy();\n    }\n\n    this.graphicsDataPool = null;\n  }\n\n  /**\n   * Renders a graphics object.\n   *\n   * @param {InkPaint.Graphics} graphics - The graphics object to render.\n   */\n  render(graphics) {\n    const renderer = this.renderer;\n    const gl = renderer.gl;\n\n    let webGLData;\n    let webGL = graphics._webGL[this.CONTEXT_UID];\n\n    if (!webGL || graphics.dirty !== webGL.dirty) {\n      this.updateGraphics(graphics);\n\n      webGL = graphics._webGL[this.CONTEXT_UID];\n    }\n\n    // This  could be speeded up for sure!\n    const shader = this.primitiveShader;\n\n    renderer.bindShader(shader);\n    renderer.state.setBlendMode(graphics.blendMode);\n\n    for (let i = 0, n = webGL.data.length; i < n; i++) {\n      webGLData = webGL.data[i];\n      const shaderTemp = webGLData.shader;\n\n      renderer.bindShader(shaderTemp);\n      shaderTemp.uniforms.translationMatrix = graphics.transform.worldTransform.toArray(\n        true\n      );\n      shaderTemp.uniforms.tint = hex2rgb(graphics.tint);\n      shaderTemp.uniforms.alpha = graphics.worldAlpha;\n\n      renderer.bindVao(webGLData.vao);\n\n      if (webGLData.nativeLines) {\n        gl.drawArrays(gl.LINES, 0, webGLData.points.length / 6);\n      } else {\n        webGLData.vao.draw(gl.TRIANGLE_STRIP, webGLData.indices.length);\n      }\n    }\n  }\n\n  /**\n   * Updates the graphics object\n   *\n   * @private\n   * @param {InkPaint.Graphics} graphics - The graphics object to update\n   */\n  updateGraphics(graphics) {\n    const gl = this.renderer.gl;\n\n    // get the contexts graphics object\n    let webGL = graphics._webGL[this.CONTEXT_UID];\n\n    // if the graphics object does not exist in the webGL context time to create it!\n    if (!webGL) {\n      webGL = graphics._webGL[this.CONTEXT_UID] = {\n        lastIndex: 0,\n        data: [],\n        gl,\n        clearDirty: -1,\n        dirty: -1\n      };\n    }\n\n    // flag the graphics as not dirty as we are about to update it...\n    webGL.dirty = graphics.dirty;\n\n    // if the user cleared the graphics object we will need to clear every object\n    if (graphics.clearDirty !== webGL.clearDirty) {\n      webGL.clearDirty = graphics.clearDirty;\n\n      // loop through and return all the webGLDatas to the object pool so than can be reused later on\n      for (let i = 0; i < webGL.data.length; i++) {\n        this.graphicsDataPool.push(webGL.data[i]);\n      }\n\n      // clear the array and reset the index..\n      webGL.data.length = 0;\n      webGL.lastIndex = 0;\n    }\n\n    let webGLData;\n    let webGLDataNativeLines;\n\n    // loop through the graphics datas and construct each one..\n    // if the object is a complex fill then the new stencil buffer technique will be used\n    // other wise graphics objects will be pushed into a batch..\n    for (let i = webGL.lastIndex; i < graphics.graphicsData.length; i++) {\n      const data = graphics.graphicsData[i];\n\n      // TODO - this can be simplified\n      webGLData = this.getWebGLData(webGL, 0);\n\n      if (data.nativeLines && data.lineWidth) {\n        webGLDataNativeLines = this.getWebGLData(webGL, 0, true);\n        webGL.lastIndex++;\n      }\n\n      if (data.type === SHAPES.POLY) {\n        buildPoly(data, webGLData, webGLDataNativeLines);\n      }\n      if (data.type === SHAPES.RECT) {\n        buildRectangle(data, webGLData, webGLDataNativeLines);\n      } else if (data.type === SHAPES.CIRC || data.type === SHAPES.ELIP) {\n        buildCircle(data, webGLData, webGLDataNativeLines);\n      } else if (data.type === SHAPES.RREC) {\n        buildRoundedRectangle(data, webGLData, webGLDataNativeLines);\n      }\n\n      webGL.lastIndex++;\n    }\n\n    this.renderer.bindVao(null);\n\n    // upload all the dirty data...\n    for (let i = 0; i < webGL.data.length; i++) {\n      webGLData = webGL.data[i];\n\n      if (webGLData.dirty) {\n        webGLData.upload();\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {WebGLRenderingContext} gl - the current WebGL drawing context\n   * @param {number} type - TODO @Alvin\n   * @param {number} nativeLines - indicate whether the webGLData use for nativeLines.\n   * @return {*} TODO\n   */\n  getWebGLData(gl, type, nativeLines) {\n    let webGLData = gl.data[gl.data.length - 1];\n\n    if (\n      !webGLData ||\n      webGLData.nativeLines !== nativeLines ||\n      webGLData.points.length > 320000\n    ) {\n      webGLData =\n        this.graphicsDataPool.pop() ||\n        new WebGLGraphicsData(\n          this.renderer.gl,\n          this.primitiveShader,\n          this.renderer.state.attribsState\n        );\n      webGLData.nativeLines = nativeLines;\n      webGLData.reset(type);\n      gl.data.push(webGLData);\n    }\n\n    webGLData.dirty = true;\n\n    return webGLData;\n  }\n}\n\nWebGLRenderer.registerPlugin(\"graphics\", GraphicsRenderer);\n"],"file":"GraphicsRenderer.js"}