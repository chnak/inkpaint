{"version":3,"sources":["../../src/utils/cache.js"],"names":["TextureCache","Object","create","BaseTextureCache","addToTextureCache","texture","id","textureCacheIds","indexOf","push","removeFromTextureCache","textureFromCache","index","splice","i","length","addToBaseTextureCache","baseTexture","removeFromBaseTextureCache","baseTextureFromCache","destroyAllTextureCache","key","destroy","deleteAllTextureCache","destroyAndCleanAllCache","destroyBaseTextureCache","destroyTextureCache"],"mappings":"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","sourcesContent":["export const TextureCache = Object.create(null);\n\nexport const BaseTextureCache = Object.create(null);\n\nexport function addToTextureCache(texture, id) {\n  if (!id) return;\n\n  if (texture.textureCacheIds.indexOf(id) === -1)\n    texture.textureCacheIds.push(id);\n\n  TextureCache[id] = texture;\n}\n\nexport function removeFromTextureCache(texture) {\n  if (typeof texture === \"string\") {\n    const textureFromCache = TextureCache[texture];\n\n    if (textureFromCache) {\n      const index = textureFromCache.textureCacheIds.indexOf(texture);\n      if (index > -1) textureFromCache.textureCacheIds.splice(index, 1);\n\n      delete TextureCache[texture];\n      return textureFromCache;\n    }\n  } else if (texture && texture.textureCacheIds) {\n    for (let i = 0; i < texture.textureCacheIds.length; ++i) {\n      if (TextureCache[texture.textureCacheIds[i]] === texture) {\n        delete TextureCache[texture.textureCacheIds[i]];\n      }\n    }\n\n    texture.textureCacheIds.length = 0;\n    return texture;\n  }\n\n  return null;\n}\n\nexport function addToBaseTextureCache(baseTexture, id) {\n  if (!id) return;\n\n  if (baseTexture.textureCacheIds.indexOf(id) === -1) {\n    baseTexture.textureCacheIds.push(id);\n  }\n\n  BaseTextureCache[id] = baseTexture;\n}\n\nexport function removeFromBaseTextureCache(baseTexture) {\n  if (typeof baseTexture === \"string\") {\n    const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n    if (baseTextureFromCache) {\n      const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n      if (index > -1) {\n        baseTextureFromCache.textureCacheIds.splice(index, 1);\n      }\n\n      delete BaseTextureCache[baseTexture];\n      return baseTextureFromCache;\n    }\n  } else if (baseTexture && baseTexture.textureCacheIds) {\n    for (let i = 0; i < baseTexture.textureCacheIds.length; ++i) {\n      delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n    }\n\n    baseTexture.textureCacheIds.length = 0;\n    return baseTexture;\n  }\n\n  return null;\n}\n\nexport function destroyAllTextureCache() {\n  let key;\n\n  for (key in TextureCache) {\n    TextureCache[key].destroy();\n  }\n\n  for (key in BaseTextureCache) {\n    BaseTextureCache[key].destroy();\n  }\n}\n\nexport function deleteAllTextureCache() {\n  let key;\n\n  for (key in TextureCache) {\n    delete TextureCache[key];\n  }\n\n  for (key in BaseTextureCache) {\n    delete BaseTextureCache[key];\n  }\n}\n\nexport function destroyAndCleanAllCache() {\n  destroyAllTextureCache();\n  deleteAllTextureCache();\n}\n\nexport function destroyBaseTextureCache(key) {\n  if (!BaseTextureCache[key]) return;\n  BaseTextureCache[key].destroy();\n  delete BaseTextureCache[key];\n}\n\nexport function destroyTextureCache(key) {\n  if (!TextureCache[key]) return;\n  TextureCache[key].destroy();\n  delete TextureCache[key];\n}\n"],"file":"cache.js"}