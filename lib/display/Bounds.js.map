{"version":3,"sources":["../../src/display/Bounds.js"],"names":["Bounds","constructor","minX","Infinity","minY","maxX","maxY","rect","isEmpty","clear","updateID","getRectangle","Rectangle","EMPTY","x","y","width","height","addPoint","point","Math","min","max","addQuad","vertices","addFrame","transform","x0","y0","x1","y1","matrix","worldTransform","a","b","c","d","tx","ty","addVertices","beginOffset","endOffset","i","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsArea","area"],"mappings":"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","sourcesContent":["import { Rectangle } from \"../math\";\n\nexport default class Bounds {\n  constructor() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.rect = null;\n  }\n\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n\n  clear() {\n    this.updateID++;\n\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n  }\n\n  getRectangle(rect) {\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      return Rectangle.EMPTY;\n    }\n\n    rect = rect || new Rectangle(0, 0, 1, 1);\n\n    rect.x = this.minX;\n    rect.y = this.minY;\n    rect.width = this.maxX - this.minX;\n    rect.height = this.maxY - this.minY;\n\n    return rect;\n  }\n\n  addPoint(point) {\n    this.minX = Math.min(this.minX, point.x);\n    this.maxX = Math.max(this.maxX, point.x);\n    this.minY = Math.min(this.minY, point.y);\n    this.maxY = Math.max(this.maxY, point.y);\n  }\n\n  addQuad(vertices) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n\n    let x = vertices[0];\n    let y = vertices[1];\n\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = vertices[2];\n    y = vertices[3];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = vertices[4];\n    y = vertices[5];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = vertices[6];\n    y = vertices[7];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n\n  addFrame(transform, x0, y0, x1, y1) {\n    const matrix = transform.worldTransform;\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n\n  addVertices(transform, vertices, beginOffset, endOffset) {\n    const matrix = transform.worldTransform;\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const rawX = vertices[i];\n      const rawY = vertices[i + 1];\n      const x = a * rawX + c * rawY + tx;\n      const y = d * rawY + b * rawX + ty;\n\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n\n  addBounds(bounds) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n\n    this.minX = bounds.minX < minX ? bounds.minX : minX;\n    this.minY = bounds.minY < minY ? bounds.minY : minY;\n    this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n    this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n  }\n\n  addBoundsMask(bounds, mask) {\n    const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n    const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n    const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n    const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX;\n      const minY = this.minY;\n      const maxX = this.maxX;\n      const maxY = this.maxY;\n\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n\n  addBoundsArea(bounds, area) {\n    const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n    const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n    const _maxX =\n      bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;\n    const _maxY =\n      bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX;\n      const minY = this.minY;\n      const maxX = this.maxX;\n      const maxY = this.maxY;\n\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n}\n"],"file":"Bounds.js"}