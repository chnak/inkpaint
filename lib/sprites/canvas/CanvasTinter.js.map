{"version":3,"sources":["../../../src/sprites/canvas/CanvasTinter.js"],"names":["CanvasTinter","getTintedTexture","sprite","color","texture","_texture","roundColor","stringColor","toString","substr","tintCache","cachedTexture","canvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","PsImage","src","toDataURL","tintWithMultiply","context","getContext","crop","_frame","clone","resolution","baseTexture","x","y","width","height","Math","ceil","save","fillStyle","fillRect","globalCompositeOperation","drawImage","source","restore","tintWithOverlay","tintWithPerPixel","rgbValues","r","g","b","pixelData","getImageData","pixels","data","i","length","putImageData","step","cacheStepsPerColorChannel","min","canUseMultiply"],"mappings":"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","sourcesContent":["import PsImage from \"../../polyfill/Image\";\nimport { hex2rgb, rgb2hex } from \"../../utils\";\nimport canUseNewCanvasBlendModes from \"../../renderers/canvas/utils/canUseNewCanvasBlendModes\";\n\nconst CanvasTinter = {\n  getTintedTexture: (sprite, color) => {\n    const texture = sprite._texture;\n    color = CanvasTinter.roundColor(color);\n    const stringColor = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n    texture.tintCache = texture.tintCache || {};\n    const cachedTexture = texture.tintCache[stringColor];\n\n    let canvas;\n\n    if (cachedTexture) {\n      if (cachedTexture.tintId === texture._updateID) {\n        return texture.tintCache[stringColor];\n      }\n      canvas = texture.tintCache[stringColor];\n    } else {\n      canvas = CanvasTinter.canvas;\n    }\n\n    CanvasTinter.tintMethod(texture, color, canvas);\n\n    canvas.tintId = texture._updateID;\n\n    if (CanvasTinter.convertTintToImage) {\n      const tintImage = new PsImage();\n      tintImage.src = canvas.toDataURL();\n      texture.tintCache[stringColor] = tintImage;\n    } else {\n      texture.tintCache[stringColor] = canvas;\n      CanvasTinter.canvas = null;\n    }\n\n    return canvas;\n  },\n\n  tintWithMultiply: (texture, color, canvas) => {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.fillStyle = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n\n    context.fillRect(0, 0, crop.width, crop.height);\n\n    context.globalCompositeOperation = \"multiply\";\n\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    context.globalCompositeOperation = \"destination-atop\";\n\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n    context.restore();\n  },\n\n  tintWithOverlay(texture, color, canvas) {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.globalCompositeOperation = \"copy\";\n    context.fillStyle = `#${`00000${(color | 0).toString(16)}`.substr(-6)}`;\n    context.fillRect(0, 0, crop.width, crop.height);\n\n    context.globalCompositeOperation = \"destination-atop\";\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    // context.globalCompositeOperation = 'copy';\n    context.restore();\n  },\n\n  tintWithPerPixel: (texture, color, canvas) => {\n    const context = canvas.getContext(\"2d\");\n    const crop = texture._frame.clone();\n    const resolution = texture.baseTexture.resolution;\n\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n\n    context.save();\n    context.globalCompositeOperation = \"copy\";\n    context.drawImage(\n      texture.baseTexture.source,\n      crop.x,\n      crop.y,\n      crop.width,\n      crop.height,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n    context.restore();\n\n    const rgbValues = hex2rgb(color);\n    const r = rgbValues[0];\n    const g = rgbValues[1];\n    const b = rgbValues[2];\n\n    const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n    const pixels = pixelData.data;\n\n    for (let i = 0; i < pixels.length; i += 4) {\n      pixels[i + 0] *= r;\n      pixels[i + 1] *= g;\n      pixels[i + 2] *= b;\n    }\n\n    context.putImageData(pixelData, 0, 0);\n  },\n\n  roundColor: color => {\n    const step = CanvasTinter.cacheStepsPerColorChannel;\n\n    const rgbValues = hex2rgb(color);\n\n    rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n    rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n    rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n    return rgb2hex(rgbValues);\n  },\n\n  cacheStepsPerColorChannel: 8,\n  convertTintToImage: false,\n  canUseMultiply: canUseNewCanvasBlendModes(),\n  tintMethod: 0\n};\n\nCanvasTinter.tintMethod = CanvasTinter.canUseMultiply\n  ? CanvasTinter.tintWithMultiply\n  : CanvasTinter.tintWithPerPixel;\n\nexport default CanvasTinter;\n"],"file":"CanvasTinter.js"}