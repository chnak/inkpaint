{"version":3,"sources":["../../src/sprites/AnimatedSprite.js"],"names":["AnimatedSprite","Sprite","constructor","textures","autoUpdate","Texture","texture","_textures","_durations","_autoUpdate","animationSpeed","loop","updateAnchor","onComplete","onFrameChange","onLoop","_currentTime","playing","stop","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","previousFrame","currentFrame","updateTexture","gotoAndPlay","deltaTime","elapsed","lag","sign","Maths","Math","floor","length","_texture","_textureID","cachedTint","_anchor","copy","defaultAnchor","destroy","options","fromFrames","frames","i","push","fromFrame","fromImages","images","fromImage","totalFrames","value","time"],"mappings":"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","sourcesContent":["import Sprite from \"./Sprite\";\nimport { shared } from \"../ticker\";\nimport Maths from \"../math/Maths\";\nimport Texture from \"../textures/Texture\";\nimport { UPDATE_PRIORITY } from \"../const\";\n\nexport default class AnimatedSprite extends Sprite {\n  constructor(textures, autoUpdate) {\n    super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n    this._textures = null;\n    this._durations = null;\n    this.textures = textures;\n    this._autoUpdate = autoUpdate !== false;\n    this.animationSpeed = 1;\n    this.loop = true;\n    this.updateAnchor = false;\n    this.onComplete = null;\n    this.onFrameChange = null;\n    this.onLoop = null;\n    this._currentTime = 0;\n    this.playing = false;\n  }\n\n  stop() {\n    if (!this.playing) return;\n\n    this.playing = false;\n    if (this._autoUpdate) {\n      shared.remove(this.update, this);\n    }\n  }\n\n  play() {\n    if (this.playing) return;\n\n    this.playing = true;\n    if (this._autoUpdate) {\n      shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n    }\n  }\n\n  gotoAndStop(frameNumber) {\n    this.stop();\n\n    const previousFrame = this.currentFrame;\n    this._currentTime = frameNumber;\n\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n  }\n\n  gotoAndPlay(frameNumber) {\n    const previousFrame = this.currentFrame;\n\n    this._currentTime = frameNumber;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n\n    this.play();\n  }\n\n  update(deltaTime) {\n    const elapsed = this.animationSpeed * deltaTime;\n    const previousFrame = this.currentFrame;\n\n    if (this._durations !== null) {\n      let lag = (this._currentTime % 1) * this._durations[this.currentFrame];\n      lag += (elapsed / 60) * 1000;\n\n      while (lag < 0) {\n        this._currentTime--;\n        lag += this._durations[this.currentFrame];\n      }\n\n      const sign = Maths.sign(this.animationSpeed * deltaTime);\n      this._currentTime = Math.floor(this._currentTime);\n\n      while (lag >= this._durations[this.currentFrame]) {\n        lag -= this._durations[this.currentFrame] * sign;\n        this._currentTime += sign;\n      }\n\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else {\n      this._currentTime += elapsed;\n    }\n\n    if (this._currentTime < 0 && !this.loop) {\n      this.gotoAndStop(0);\n\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (this._currentTime >= this._textures.length && !this.loop) {\n      this.gotoAndStop(this._textures.length - 1);\n\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (previousFrame !== this.currentFrame) {\n      if (this.loop && this.onLoop) {\n        if (this.animationSpeed > 0 && this.currentFrame < previousFrame) {\n          this.onLoop();\n        } else if (\n          this.animationSpeed < 0 &&\n          this.currentFrame > previousFrame\n        ) {\n          this.onLoop();\n        }\n      }\n\n      this.updateTexture();\n    }\n  }\n\n  updateTexture() {\n    this._texture = this._textures[this.currentFrame];\n    this._textureID = -1;\n    this.cachedTint = 0xffffff;\n\n    if (this.updateAnchor) {\n      this._anchor.copy(this._texture.defaultAnchor);\n    }\n\n    if (this.onFrameChange) {\n      this.onFrameChange(this.currentFrame);\n    }\n  }\n\n  destroy(options) {\n    this.stop();\n    super.destroy(options);\n  }\n\n  static fromFrames(frames) {\n    const textures = [];\n\n    for (let i = 0; i < frames.length; ++i) {\n      textures.push(Texture.fromFrame(frames[i]));\n    }\n\n    return new AnimatedSprite(textures);\n  }\n\n  static fromImages(images) {\n    const textures = [];\n\n    for (let i = 0; i < images.length; ++i) {\n      textures.push(Texture.fromImage(images[i]));\n    }\n\n    return new AnimatedSprite(textures);\n  }\n\n  get totalFrames() {\n    return this._textures.length;\n  }\n\n  get textures() {\n    return this._textures;\n  }\n\n  set textures(value) {\n    if (value[0] instanceof Texture) {\n      this._textures = value;\n      this._durations = null;\n    } else {\n      this._textures = [];\n      this._durations = [];\n\n      for (let i = 0; i < value.length; i++) {\n        this._textures.push(value[i].texture);\n        this._durations.push(value[i].time);\n      }\n    }\n    this.gotoAndStop(0);\n    this.updateTexture();\n  }\n\n  get currentFrame() {\n    let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n    if (currentFrame < 0) {\n      currentFrame += this._textures.length;\n    }\n\n    return currentFrame;\n  }\n}\n"],"file":"AnimatedSprite.js"}