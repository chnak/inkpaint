{"version":3,"sources":["../../../src/sprites/webgl/SpriteRenderer.js"],"names":["TICK","TEXTURE_TICK","SpriteRenderer","ObjectRenderer","constructor","renderer","vertSize","vertByteSize","size","settings","SPRITE_BATCH_SIZE","buffers","i","bitTwiddle","nextPow2","push","Buffer","indices","shader","currentIndex","groups","k","textures","textureCount","ids","start","blend","sprites","vertexBuffers","vaos","vaoMax","vertexCount","on","onPrerender","onContextChange","gl","legacy","MAX_TEXTURES","Math","min","getParameter","MAX_TEXTURE_IMAGE_UNITS","SPRITE_MAX_TEXTURES","indexBuffer","glCore","GLBuffer","createIndexBuffer","STATIC_DRAW","bindVao","attrs","attributes","vertexBuffer","createVertexBuffer","STREAM_DRAW","vao","createVao","addIndex","addAttribute","aVertexPosition","FLOAT","aTextureCoord","UNSIGNED_SHORT","aColor","UNSIGNED_BYTE","aTextureId","currentBlendMode","boundTextures","Array","render","sprite","flush","_texture","_uvs","np2","log2","buffer","float32View","uint32View","rendererBoundTextures","touch","textureGC","count","index","nextTexture","currentTexture","groupCount","currentGroup","vertexData","uvs","blendMode","premultiplyBlendMode","baseTexture","premultipliedAlpha","bt","_enabled","emptyTextures","_virtalBoundId","spriteBlendMode","Number","touched","j","tIndex","t","uvsUint32","roundPixels","resolution","alpha","worldAlpha","argb","_tintRGB","CAN_UPLOAD_SAME_BUFFER","upload","vertices","group","groupTextureCount","bindTexture","state","setBlendMode","drawElements","TRIANGLES","bindShader","bind","stop","destroy","off","length","WebGLRenderer","registerPlugin"],"mappings":"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","sourcesContent":["import ObjectRenderer from \"../../renderers/webgl/utils/ObjectRenderer\";\nimport WebGLRenderer from \"../../renderers/webgl/WebGLRenderer\";\nimport createIndicesForQuads from \"../../utils/createIndicesForQuads\";\nimport generateMultiTextureShader from \"./generateMultiTextureShader\";\nimport checkMaxIfStatmentsInShader from \"../../renderers/webgl/utils/checkMaxIfStatmentsInShader\";\nimport Buffer from \"./BatchBuffer\";\nimport settings from \"../../settings\";\nimport { premultiplyBlendMode, premultiplyTint } from \"../../utils\";\nimport glCore from \"pixi-gl-core\";\nimport bitTwiddle from \"bit-twiddle\";\n\nlet TICK = 0;\nlet TEXTURE_TICK = 0;\n\nexport default class SpriteRenderer extends ObjectRenderer {\n  constructor(renderer) {\n    super(renderer);\n\n    this.vertSize = 5;\n    this.vertByteSize = this.vertSize * 4;\n    this.size = settings.SPRITE_BATCH_SIZE; // 2000 is a nice balance between mobile / desktop\n\n    // the total number of bytes in our batch\n    // let numVerts = this.size * 4 * this.vertByteSize;\n\n    this.buffers = [];\n    for (let i = 1; i <= bitTwiddle.nextPow2(this.size); i *= 2) {\n      this.buffers.push(new Buffer(i * 4 * this.vertByteSize));\n    }\n\n    /**\n     * Holds the indices of the geometry (quads) to draw\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = createIndicesForQuads(this.size);\n\n    /**\n     * The default shaders that is used if a sprite doesn't have a more specific one.\n     * there is a shader for each number of textures that can be rendererd.\n     * These shaders will also be generated on the fly as required.\n     * @member {InkPaint.Shader[]}\n     */\n    this.shader = null;\n\n    this.currentIndex = 0;\n    this.groups = [];\n\n    for (let k = 0; k < this.size; k++) {\n      this.groups[k] = {\n        textures: [],\n        textureCount: 0,\n        ids: [],\n        size: 0,\n        start: 0,\n        blend: 0\n      };\n    }\n\n    this.sprites = [];\n\n    this.vertexBuffers = [];\n    this.vaos = [];\n\n    this.vaoMax = 2;\n    this.vertexCount = 0;\n\n    this.renderer.on(\"prerender\", this.onPrerender, this);\n  }\n\n  /**\n   * Sets up the renderer context and necessary buffers.\n   *\n   * @private\n   */\n  onContextChange() {\n    const gl = this.renderer.gl;\n\n    if (this.renderer.legacy) {\n      this.MAX_TEXTURES = 1;\n    } else {\n      // step 1: first check max textures the GPU can handle.\n      this.MAX_TEXTURES = Math.min(\n        gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n        settings.SPRITE_MAX_TEXTURES\n      );\n\n      // step 2: check the maximum number of if statements the shader can have too..\n      this.MAX_TEXTURES = checkMaxIfStatmentsInShader(this.MAX_TEXTURES, gl);\n    }\n\n    this.shader = generateMultiTextureShader(gl, this.MAX_TEXTURES);\n\n    // create a couple of buffers\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(\n      gl,\n      this.indices,\n      gl.STATIC_DRAW\n    );\n\n    // we use the second shader as the first one depending on your browser may omit aTextureId\n    // as it is not used by the shader so is optimized out.\n\n    this.renderer.bindVao(null);\n\n    const attrs = this.shader.attributes;\n\n    for (let i = 0; i < this.vaoMax; i++) {\n      /* eslint-disable max-len */\n      const vertexBuffer = (this.vertexBuffers[\n        i\n      ] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW));\n      /* eslint-enable max-len */\n\n      // build the vao object that will render..\n      const vao = this.renderer\n        .createVao()\n        .addIndex(this.indexBuffer)\n        .addAttribute(\n          vertexBuffer,\n          attrs.aVertexPosition,\n          gl.FLOAT,\n          false,\n          this.vertByteSize,\n          0\n        )\n        .addAttribute(\n          vertexBuffer,\n          attrs.aTextureCoord,\n          gl.UNSIGNED_SHORT,\n          true,\n          this.vertByteSize,\n          2 * 4\n        )\n        .addAttribute(\n          vertexBuffer,\n          attrs.aColor,\n          gl.UNSIGNED_BYTE,\n          true,\n          this.vertByteSize,\n          3 * 4\n        );\n\n      if (attrs.aTextureId) {\n        vao.addAttribute(\n          vertexBuffer,\n          attrs.aTextureId,\n          gl.FLOAT,\n          false,\n          this.vertByteSize,\n          4 * 4\n        );\n      }\n\n      this.vaos[i] = vao;\n    }\n\n    this.vao = this.vaos[0];\n    this.currentBlendMode = 99999;\n\n    this.boundTextures = new Array(this.MAX_TEXTURES);\n  }\n\n  /**\n   * Called before the renderer starts rendering.\n   *\n   */\n  onPrerender() {\n    this.vertexCount = 0;\n  }\n\n  /**\n   * Renders the sprite object.\n   *\n   * @param {InkPaint.Sprite} sprite - the sprite to render when using this spritebatch\n   */\n  render(sprite) {\n    // TODO set blend modes..\n    // check texture..\n    if (this.currentIndex >= this.size) {\n      this.flush();\n    }\n\n    // get the uvs for the texture\n\n    // if the uvs have not updated then no point rendering just yet!\n    if (!sprite._texture._uvs) {\n      return;\n    }\n\n    // push a texture.\n    // increment the batchsize\n    this.sprites[this.currentIndex++] = sprite;\n  }\n\n  /**\n   * Renders the content and empties the current batch.\n   *\n   */\n  flush() {\n    if (this.currentIndex === 0) {\n      return;\n    }\n\n    const gl = this.renderer.gl;\n    const MAX_TEXTURES = this.MAX_TEXTURES;\n\n    const np2 = bitTwiddle.nextPow2(this.currentIndex);\n    const log2 = bitTwiddle.log2(np2);\n    const buffer = this.buffers[log2];\n\n    const sprites = this.sprites;\n    const groups = this.groups;\n\n    const float32View = buffer.float32View;\n    const uint32View = buffer.uint32View;\n\n    const boundTextures = this.boundTextures;\n    const rendererBoundTextures = this.renderer.boundTextures;\n    const touch = this.renderer.textureGC.count;\n\n    let index = 0;\n    let nextTexture;\n    let currentTexture;\n    let groupCount = 1;\n    let textureCount = 0;\n    let currentGroup = groups[0];\n    let vertexData;\n    let uvs;\n    let blendMode =\n      premultiplyBlendMode[\n        sprites[0]._texture.baseTexture.premultipliedAlpha ? 1 : 0\n      ][sprites[0].blendMode];\n\n    currentGroup.textureCount = 0;\n    currentGroup.start = 0;\n    currentGroup.blend = blendMode;\n\n    TICK++;\n\n    let i;\n\n    // copy textures..\n    for (i = 0; i < MAX_TEXTURES; ++i) {\n      const bt = rendererBoundTextures[i];\n\n      if (bt._enabled === TICK) {\n        boundTextures[i] = this.renderer.emptyTextures[i];\n        continue;\n      }\n\n      boundTextures[i] = bt;\n      bt._virtalBoundId = i;\n      bt._enabled = TICK;\n    }\n    TICK++;\n\n    for (i = 0; i < this.currentIndex; ++i) {\n      // upload the sprite elemetns...\n      // they have all ready been calculated so we just need to push them into the buffer.\n      const sprite = sprites[i];\n\n      sprites[i] = null;\n\n      nextTexture = sprite._texture.baseTexture;\n\n      const spriteBlendMode =\n        premultiplyBlendMode[Number(nextTexture.premultipliedAlpha)][\n          sprite.blendMode\n        ];\n\n      if (blendMode !== spriteBlendMode) {\n        // finish a group..\n        blendMode = spriteBlendMode;\n\n        // force the batch to break!\n        currentTexture = null;\n        textureCount = MAX_TEXTURES;\n        TICK++;\n      }\n\n      if (currentTexture !== nextTexture) {\n        currentTexture = nextTexture;\n\n        if (nextTexture._enabled !== TICK) {\n          if (textureCount === MAX_TEXTURES) {\n            TICK++;\n\n            currentGroup.size = i - currentGroup.start;\n\n            textureCount = 0;\n\n            currentGroup = groups[groupCount++];\n            currentGroup.blend = blendMode;\n            currentGroup.textureCount = 0;\n            currentGroup.start = i;\n          }\n\n          nextTexture.touched = touch;\n\n          if (nextTexture._virtalBoundId === -1) {\n            for (let j = 0; j < MAX_TEXTURES; ++j) {\n              const tIndex = (j + TEXTURE_TICK) % MAX_TEXTURES;\n\n              const t = boundTextures[tIndex];\n\n              if (t._enabled !== TICK) {\n                TEXTURE_TICK++;\n\n                t._virtalBoundId = -1;\n\n                nextTexture._virtalBoundId = tIndex;\n\n                boundTextures[tIndex] = nextTexture;\n                break;\n              }\n            }\n          }\n\n          nextTexture._enabled = TICK;\n\n          currentGroup.textureCount++;\n          currentGroup.ids[textureCount] = nextTexture._virtalBoundId;\n          currentGroup.textures[textureCount++] = nextTexture;\n        }\n      }\n\n      vertexData = sprite.vertexData;\n\n      // TODO this sum does not need to be set each frame..\n      uvs = sprite._texture._uvs.uvsUint32;\n\n      if (this.renderer.roundPixels) {\n        const resolution = this.renderer.resolution;\n\n        // xy\n        float32View[index] = ((vertexData[0] * resolution) | 0) / resolution;\n        float32View[index + 1] =\n          ((vertexData[1] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 5] =\n          ((vertexData[2] * resolution) | 0) / resolution;\n        float32View[index + 6] =\n          ((vertexData[3] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 10] =\n          ((vertexData[4] * resolution) | 0) / resolution;\n        float32View[index + 11] =\n          ((vertexData[5] * resolution) | 0) / resolution;\n\n        // xy\n        float32View[index + 15] =\n          ((vertexData[6] * resolution) | 0) / resolution;\n        float32View[index + 16] =\n          ((vertexData[7] * resolution) | 0) / resolution;\n      } else {\n        // xy\n        float32View[index] = vertexData[0];\n        float32View[index + 1] = vertexData[1];\n\n        // xy\n        float32View[index + 5] = vertexData[2];\n        float32View[index + 6] = vertexData[3];\n\n        // xy\n        float32View[index + 10] = vertexData[4];\n        float32View[index + 11] = vertexData[5];\n\n        // xy\n        float32View[index + 15] = vertexData[6];\n        float32View[index + 16] = vertexData[7];\n      }\n\n      uint32View[index + 2] = uvs[0];\n      uint32View[index + 7] = uvs[1];\n      uint32View[index + 12] = uvs[2];\n      uint32View[index + 17] = uvs[3];\n\n      /* eslint-disable max-len */\n      const alpha = Math.min(sprite.worldAlpha, 1.0);\n      // we dont call extra function if alpha is 1.0, that's faster\n      const argb =\n        alpha < 1.0 && nextTexture.premultipliedAlpha\n          ? premultiplyTint(sprite._tintRGB, alpha)\n          : sprite._tintRGB + ((alpha * 255) << 24);\n\n      uint32View[index + 3] = uint32View[index + 8] = uint32View[\n        index + 13\n      ] = uint32View[index + 18] = argb;\n      float32View[index + 4] = float32View[index + 9] = float32View[\n        index + 14\n      ] = float32View[index + 19] = nextTexture._virtalBoundId;\n      /* eslint-enable max-len */\n\n      index += 20;\n    }\n\n    currentGroup.size = i - currentGroup.start;\n\n    if (!settings.CAN_UPLOAD_SAME_BUFFER) {\n      // this is still needed for IOS performance..\n      // it really does not like uploading to the same buffer in a single frame!\n      if (this.vaoMax <= this.vertexCount) {\n        this.vaoMax++;\n\n        const attrs = this.shader.attributes;\n\n        /* eslint-disable max-len */\n        const vertexBuffer = (this.vertexBuffers[\n          this.vertexCount\n        ] = glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW));\n        /* eslint-enable max-len */\n\n        // build the vao object that will render..\n        const vao = this.renderer\n          .createVao()\n          .addIndex(this.indexBuffer)\n          .addAttribute(\n            vertexBuffer,\n            attrs.aVertexPosition,\n            gl.FLOAT,\n            false,\n            this.vertByteSize,\n            0\n          )\n          .addAttribute(\n            vertexBuffer,\n            attrs.aTextureCoord,\n            gl.UNSIGNED_SHORT,\n            true,\n            this.vertByteSize,\n            2 * 4\n          )\n          .addAttribute(\n            vertexBuffer,\n            attrs.aColor,\n            gl.UNSIGNED_BYTE,\n            true,\n            this.vertByteSize,\n            3 * 4\n          );\n\n        if (attrs.aTextureId) {\n          vao.addAttribute(\n            vertexBuffer,\n            attrs.aTextureId,\n            gl.FLOAT,\n            false,\n            this.vertByteSize,\n            4 * 4\n          );\n        }\n\n        this.vaos[this.vertexCount] = vao;\n      }\n\n      this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n      this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, false);\n\n      this.vertexCount++;\n    } else {\n      // lets use the faster option, always use buffer number 0\n      this.vertexBuffers[this.vertexCount].upload(buffer.vertices, 0, true);\n    }\n\n    for (i = 0; i < MAX_TEXTURES; ++i) {\n      rendererBoundTextures[i]._virtalBoundId = -1;\n    }\n\n    // render the groups..\n    for (i = 0; i < groupCount; ++i) {\n      const group = groups[i];\n      const groupTextureCount = group.textureCount;\n\n      for (let j = 0; j < groupTextureCount; j++) {\n        currentTexture = group.textures[j];\n\n        // reset virtual ids..\n        // lets do a quick check..\n        if (rendererBoundTextures[group.ids[j]] !== currentTexture) {\n          this.renderer.bindTexture(currentTexture, group.ids[j], true);\n        }\n\n        // reset the virtualId..\n        currentTexture._virtalBoundId = -1;\n      }\n\n      // set the blend mode..\n      this.renderer.state.setBlendMode(group.blend);\n\n      gl.drawElements(\n        gl.TRIANGLES,\n        group.size * 6,\n        gl.UNSIGNED_SHORT,\n        group.start * 6 * 2\n      );\n    }\n\n    // reset elements for the next flush\n    this.currentIndex = 0;\n  }\n\n  /**\n   * Starts a new sprite batch.\n   */\n  start() {\n    this.renderer.bindShader(this.shader);\n\n    if (settings.CAN_UPLOAD_SAME_BUFFER) {\n      // bind buffer #0, we don't need others\n      this.renderer.bindVao(this.vaos[this.vertexCount]);\n\n      this.vertexBuffers[this.vertexCount].bind();\n    }\n  }\n\n  /**\n   * Stops and flushes the current batch.\n   *\n   */\n  stop() {\n    this.flush();\n  }\n\n  /**\n   * Destroys the SpriteRenderer.\n   *\n   */\n  destroy() {\n    for (let i = 0; i < this.vaoMax; i++) {\n      if (this.vertexBuffers[i]) {\n        this.vertexBuffers[i].destroy();\n      }\n      if (this.vaos[i]) {\n        this.vaos[i].destroy();\n      }\n    }\n\n    if (this.indexBuffer) {\n      this.indexBuffer.destroy();\n    }\n\n    this.renderer.off(\"prerender\", this.onPrerender, this);\n\n    super.destroy();\n\n    if (this.shader) {\n      this.shader.destroy();\n      this.shader = null;\n    }\n\n    this.vertexBuffers = null;\n    this.vaos = null;\n    this.indexBuffer = null;\n    this.indices = null;\n    this.sprites = null;\n\n    for (let i = 0; i < this.buffers.length; ++i) {\n      this.buffers[i].destroy();\n    }\n  }\n}\n\nWebGLRenderer.registerPlugin(\"sprite\", SpriteRenderer);\n"],"file":"SpriteRenderer.js"}