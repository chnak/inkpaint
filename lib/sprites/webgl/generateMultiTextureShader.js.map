{"version":3,"sources":["../../../src/sprites/webgl/generateMultiTextureShader.js"],"names":["fragTemplate","join","generateMultiTextureShader","gl","maxTextures","vertexSrc","fragmentSrc","replace","generateSampleSrc","shader","Shader","sampleValues","i","bind","uniforms","uSamplers","src"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA,IAAMA,YAAY,GAAG,CACjB,6BADiB,EAEjB,sBAFiB,EAGjB,2BAHiB,EAIjB,uCAJiB,EAMjB,kBANiB,EAOjB,aAPiB,EAQjB,WARiB,EASjB,gCATiB,EAUjB,GAViB,EAWnBC,IAXmB,CAWd,IAXc,CAArB;;AAae,SAASC,0BAAT,CAAoCC,EAApC,EAAwCC,WAAxC,EACf;AACI,MAAMC,SAAS,4cAAf;AACA,MAAIC,WAAW,GAAGN,YAAlB;AAEAM,EAAAA,WAAW,GAAGA,WAAW,CAACC,OAAZ,CAAoB,WAApB,EAAiCH,WAAjC,CAAd;AACAE,EAAAA,WAAW,GAAGA,WAAW,CAACC,OAAZ,CAAoB,aAApB,EAAmCC,iBAAiB,CAACJ,WAAD,CAApD,CAAd;AAEA,MAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAWP,EAAX,EAAeE,SAAf,EAA0BC,WAA1B,CAAf;AAEA,MAAMK,YAAY,GAAG,EAArB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAApB,EAAiCQ,CAAC,EAAlC,EACA;AACID,IAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBA,CAAlB;AACH;;AAEDH,EAAAA,MAAM,CAACI,IAAP;AACAJ,EAAAA,MAAM,CAACK,QAAP,CAAgBC,SAAhB,GAA4BJ,YAA5B;AAEA,SAAOF,MAAP;AACH;;AAED,SAASD,iBAAT,CAA2BJ,WAA3B,EACA;AACI,MAAIY,GAAG,GAAG,EAAV;AAEAA,EAAAA,GAAG,IAAI,IAAP;AACAA,EAAAA,GAAG,IAAI,IAAP;;AAEA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAApB,EAAiCQ,CAAC,EAAlC,EACA;AACI,QAAIA,CAAC,GAAG,CAAR,EACA;AACII,MAAAA,GAAG,IAAI,SAAP;AACH;;AAED,QAAIJ,CAAC,GAAGR,WAAW,GAAG,CAAtB,EACA;AACIY,MAAAA,GAAG,yBAAuBJ,CAAvB,QAAH;AACH;;AAEDI,IAAAA,GAAG,IAAI,KAAP;AACAA,IAAAA,GAAG,yCAAuCJ,CAAvC,uBAAH;AACAI,IAAAA,GAAG,IAAI,KAAP;AACH;;AAEDA,EAAAA,GAAG,IAAI,IAAP;AACAA,EAAAA,GAAG,IAAI,IAAP;AAEA,SAAOA,GAAP;AACH","sourcesContent":["import Shader from '../../Shader';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = new Shader(gl, vertexSrc, fragmentSrc);\n\n    const sampleValues = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(vTextureId < ${i}.5)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"],"file":"generateMultiTextureShader.js"}