{"version":3,"sources":["../../src/sprites/Sprite.js"],"names":["tempPoint","Point","Sprite","Container","constructor","texture","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","shader","cachedTint","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","log","_onTextureUpdate","scale","orig","width","height","calculateVertices","transform","_worldID","_updateID","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","calculateTrimmedVertices","_renderWebGL","renderer","setObjectRenderer","plugins","render","_renderCanvas","_calculateBounds","_bounds","addQuad","updateBaseTexture","imageUrl","useCache","updateSource","getLocalBounds","rect","children","length","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","destroyed","off","destroyTexture","destroyBaseTexture","baseTexture","from","source","fromFrame","frameId","TextureCache","Error","fromImage","imageId","crossorigin","scaleMode","Math","abs","value","s","copy","hasLoaded","once"],"mappings":"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","sourcesContent":["import { Point, ObservablePoint, Rectangle } from \"../math\";\nimport { sign } from \"../utils\";\nimport { BLEND_MODES } from \"../const\";\nimport Texture from \"../textures/Texture\";\nimport Container from \"../display/Container\";\nimport { TextureCache } from \"../utils/cache\";\n\nconst tempPoint = new Point();\n\nexport default class Sprite extends Container {\n  constructor(texture) {\n    super();\n\n    this._anchor = new ObservablePoint(\n      this._onAnchorUpdate,\n      this,\n      texture ? texture.defaultAnchor.x : 0,\n      texture ? texture.defaultAnchor.y : 0\n    );\n\n    this._texture = null;\n    this._width = 0;\n    this._height = 0;\n    this._tint = null;\n    this._tintRGB = null;\n\n    this.tint = 0xffffff;\n    this.blendMode = BLEND_MODES.NORMAL;\n    this.shader = null;\n    this.cachedTint = 0xffffff;\n    this.texture = texture || Texture.EMPTY;\n    this.vertexData = new Float32Array(8);\n    this.vertexTrimmedData = null;\n\n    this._transformID = -1;\n    this._textureID = -1;\n\n    this._transformTrimmedID = -1;\n    this._textureTrimmedID = -1;\n    this.pluginName = \"sprite\";\n    this.log = false;\n  }\n\n  _onTextureUpdate() {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this.cachedTint = 0xffffff;\n\n    if (this._width) {\n      this.scale.x =\n        (sign(this.scale.x) * this._width) / this._texture.orig.width;\n    }\n\n    if (this._height) {\n      this.scale.y =\n        (sign(this.scale.y) * this._height) / this._texture.orig.height;\n    }\n  }\n\n  _onAnchorUpdate() {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  }\n\n  calculateVertices() {\n    if (\n      this._transformID === this.transform._worldID &&\n      this._textureID === this._texture._updateID\n    ) {\n      return;\n    }\n\n    this._transformID = this.transform._worldID;\n    this._textureID = this._texture._updateID;\n\n    const texture = this._texture;\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const vertexData = this.vertexData;\n    const trim = texture.trim;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n\n    let w0 = 0;\n    let w1 = 0;\n    let h0 = 0;\n    let h1 = 0;\n\n    if (trim) {\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    }\n\n    // xy\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n\n    // xy\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n\n    // xy\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n\n    // xy\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  }\n\n  calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (\n      this._transformTrimmedID === this.transform._worldID &&\n      this._textureTrimmedID === this._texture._updateID\n    ) {\n      return;\n    }\n\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID;\n\n    // lets do some special trim code!\n    const texture = this._texture;\n    const vertexData = this.vertexTrimmedData;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n\n    // lets calculate the new untrimmed bounds..\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n\n    const w1 = -anchor._x * orig.width;\n    const w0 = w1 + orig.width;\n\n    const h1 = -anchor._y * orig.height;\n    const h0 = h1 + orig.height;\n\n    // xy\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n\n    // xy\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n\n    // xy\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n\n    // xy\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  }\n\n  _renderWebGL(renderer) {\n    this.calculateVertices();\n\n    renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  }\n\n  _renderCanvas(renderer) {\n    renderer.plugins[this.pluginName].render(this);\n  }\n\n  _calculateBounds() {\n    const trim = this._texture.trim;\n    const orig = this._texture.orig;\n\n    if (!trim || (trim.width === orig.width && trim.height === orig.height)) {\n      this.calculateVertices();\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      this.calculateTrimmedVertices();\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  }\n\n  updateBaseTexture(imageUrl, useCache = false) {\n    if (!this.texture) return;\n    this.texture.updateSource(imageUrl, useCache);\n  }\n\n  getLocalBounds(rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n\n      return this._bounds.getRectangle(rect);\n    }\n\n    return super.getLocalBounds.call(this, rect);\n  }\n\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n\n    const width = this._texture.orig.width;\n    const height = this._texture.orig.height;\n    const x1 = -width * this.anchor.x;\n    let y1 = 0;\n\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  destroy(options) {\n    if (this.destroyed) return;\n\n    super.destroy(options);\n    this._texture.off(\"update\", this._onTextureUpdate, this);\n    this._anchor = null;\n\n    const destroyTexture =\n      typeof options === \"boolean\" ? options : options && options.texture;\n\n    if (destroyTexture) {\n      const destroyBaseTexture =\n        typeof options === \"boolean\" ? options : options && options.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n\n    this._texture = null;\n    this.shader = null;\n  }\n\n  static from(source) {\n    return new Sprite(Texture.from(source));\n  }\n\n  static fromFrame(frameId) {\n    const texture = TextureCache[frameId];\n    if (!texture) throw new Error(`The frameId \"${frameId}\" does not exist`);\n\n    return new Sprite(texture);\n  }\n\n  static fromImage(imageId, crossorigin, scaleMode) {\n    return new Sprite(Texture.fromImage(imageId, crossorigin, scaleMode));\n  }\n\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n\n  set width(value) {\n    const s = sign(this.scale.x) || 1;\n    this.scale.x = (s * value) / this._texture.orig.width;\n    this._width = value;\n  }\n\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n\n  set height(value) {\n    const s = sign(this.scale.y) || 1;\n    this.scale.y = (s * value) / this._texture.orig.height;\n    this._height = value;\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  set anchor(value) {\n    this._anchor.copy(value);\n  }\n\n  get tint() {\n    return this._tint;\n  }\n\n  set tint(value) {\n    this._tint = value;\n    this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  set texture(value) {\n    if (this._texture === value) return;\n\n    this._texture = value || Texture.EMPTY;\n    this.cachedTint = 0xffffff;\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n\n    if (!value) return;\n    if (value.baseTexture.hasLoaded) {\n      this._onTextureUpdate();\n    } else {\n      value.once(\"update\", this._onTextureUpdate, this);\n    }\n  }\n}\n"],"file":"Sprite.js"}